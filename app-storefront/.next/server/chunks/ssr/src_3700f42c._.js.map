{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/checkout/components/payment-wrapper/stripe-wrapper.tsx"],"sourcesContent":["\"use client\"\n\nimport { Stripe, StripeElementsOptions } from \"@stripe/stripe-js\"\nimport { Elements } from \"@stripe/react-stripe-js\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { createContext } from \"react\"\n\ntype StripeWrapperProps = {\n  paymentSession: HttpTypes.StorePaymentSession\n  stripeKey?: string\n  stripePromise: Promise<Stripe | null> | null\n  children: React.ReactNode\n}\n\nexport const StripeContext = createContext(false)\n\nconst StripeWrapper: React.FC<StripeWrapperProps> = ({\n  paymentSession,\n  stripeKey,\n  stripePromise,\n  children,\n}) => {\n  const options: StripeElementsOptions = {\n    clientSecret: paymentSession!.data?.client_secret as string | undefined,\n  }\n\n  if (!stripeKey) {\n    throw new Error(\n      \"Stripe key is missing. Set NEXT_PUBLIC_STRIPE_KEY environment variable.\"\n    )\n  }\n\n  if (!stripePromise) {\n    throw new Error(\n      \"Stripe promise is missing. Make sure you have provided a valid Stripe key.\"\n    )\n  }\n\n  if (!paymentSession?.data?.client_secret) {\n    throw new Error(\n      \"Stripe client secret is missing. Cannot initialize Stripe.\"\n    )\n  }\n\n  return (\n    <StripeContext.Provider value={true}>\n      <Elements options={options} stripe={stripePromise}>\n        {children}\n      </Elements>\n    </StripeContext.Provider>\n  )\n}\n\nexport default StripeWrapper\n"],"names":[],"mappings":";;;;;;;AAGA;AAEA;AALA;;;;AAcO,MAAM,8BAAgB,IAAA,sNAAa,EAAC;AAE3C,MAAM,gBAA8C,CAAC,EACnD,cAAc,EACd,SAAS,EACT,aAAa,EACb,QAAQ,EACT;IACC,MAAM,UAAiC;QACrC,cAAc,eAAgB,IAAI,EAAE;IACtC;IAEA,IAAI,CAAC,WAAW;QACd,MAAM,IAAI,MACR;IAEJ;IAEA,IAAI,CAAC,eAAe;QAClB,MAAM,IAAI,MACR;IAEJ;IAEA,IAAI,CAAC,gBAAgB,MAAM,eAAe;QACxC,MAAM,IAAI,MACR;IAEJ;IAEA,qBACE,8OAAC,cAAc,QAAQ;QAAC,OAAO;kBAC7B,cAAA,8OAAC,+LAAQ;YAAC,SAAS;YAAS,QAAQ;sBACjC;;;;;;;;;;;AAIT;uCAEe","debugId":null}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/icons/ideal.tsx"],"sourcesContent":["import React from \"react\"\n\nimport { IconProps } from \"types/icon\"\n\nconst Ideal: React.FC<IconProps> = ({\n  size = \"20\",\n  color = \"currentColor\",\n  ...attributes\n}) => {\n  return (\n    <svg\n      width=\"20px\"\n      height=\"20px\"\n      viewBox=\"0 0 24 24\"\n      role=\"img\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill={color}\n      {...attributes}\n    >\n      <title>iDEAL icon</title>\n      <path d=\"M.975 2.61v18.782h11.411c6.89 0 10.64-3.21 10.64-9.415 0-6.377-4.064-9.367-10.64-9.367H.975zm11.411-.975C22.491 1.635 24 8.115 24 11.977c0 6.7-4.124 10.39-11.614 10.39H0V1.635h12.386z M2.506 13.357h3.653v6.503H2.506z M6.602 10.082a2.27 2.27 0 1 1-4.54 0 2.27 2.27 0 0 1 4.54 0m1.396-1.057v2.12h.65c.45 0 .867-.13.867-1.077 0-.924-.463-1.043-.867-1.043h-.65zm10.85-1.054h1.053v3.174h1.56c-.428-5.758-4.958-7.002-9.074-7.002H7.999v3.83h.65c1.183 0 1.92.803 1.92 2.095 0 1.333-.719 2.129-1.92 2.129h-.65v7.665h4.388c6.692 0 9.021-3.107 9.103-7.665h-2.64V7.97zm-2.93 2.358h.76l-.348-1.195h-.063l-.35 1.195zm-1.643 1.87l1.274-4.228h1.497l1.274 4.227h-1.095l-.239-.818H15.61l-.24.818h-1.095zm-.505-1.054v1.052h-2.603V7.973h2.519v1.052h-1.467v.49h1.387v1.05H12.22v.58h1.55z\" />\n    </svg>\n  )\n}\n\nexport default Ideal\n"],"names":[],"mappings":";;;;;;AAIA,MAAM,QAA6B,CAAC,EAClC,OAAO,IAAI,EACX,QAAQ,cAAc,EACtB,GAAG,YACJ;IACC,qBACE,8OAAC;QACC,OAAM;QACN,QAAO;QACP,SAAQ;QACR,MAAK;QACL,OAAM;QACN,MAAM;QACL,GAAG,UAAU;;0BAEd,8OAAC;0BAAM;;;;;;0BACP,8OAAC;gBAAK,GAAE;;;;;;;;;;;;AAGd;uCAEe","debugId":null}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/icons/bancontact.tsx"],"sourcesContent":["import React from \"react\"\n\nimport { IconProps } from \"types/icon\"\n\nconst Ideal: React.FC<IconProps> = ({\n  size = \"20\",\n  color = \"currentColor\",\n  ...attributes\n}) => {\n  return (\n    <svg\n      width=\"24px\"\n      height=\"24px\"\n      viewBox=\"0 0 24 24\"\n      role=\"img\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill={color}\n      {...attributes}\n    >\n      <title>Bancontact icon</title>\n      <path d=\"M21.385 9.768h-7.074l-4.293 5.022H1.557L3.84 12.1H1.122C.505 12.1 0 12.616 0 13.25v2.428c0 .633.505 1.15 1.122 1.15h12.933c.617 0 1.46-.384 1.874-.854l1.956-2.225 3.469-3.946.031-.035zm-1.123 1.279l-.751.855.75-.855zm2.616-3.875H9.982c-.617 0-1.462.384-1.876.853l-5.49 6.208h7.047l4.368-5.02h8.424l-2.263 2.689h2.686c.617 0 1.122-.518 1.122-1.151V8.323c0-.633-.505-1.15-1.122-1.15zm-1.87 3.024l-.374.427-.1.114.474-.54z\" />\n    </svg>\n  )\n}\n\nexport default Ideal\n"],"names":[],"mappings":";;;;;;AAIA,MAAM,QAA6B,CAAC,EAClC,OAAO,IAAI,EACX,QAAQ,cAAc,EACtB,GAAG,YACJ;IACC,qBACE,8OAAC;QACC,OAAM;QACN,QAAO;QACP,SAAQ;QACR,MAAK;QACL,OAAM;QACN,MAAM;QACL,GAAG,UAAU;;0BAEd,8OAAC;0BAAM;;;;;;0BACP,8OAAC;gBAAK,GAAE;;;;;;;;;;;;AAGd;uCAEe","debugId":null}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/icons/paypal.tsx"],"sourcesContent":["const PayPal = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"20\"\n      width=\"20\"\n      viewBox=\"0 0 26 25\"\n      id=\"paypalIcon\"\n    >\n      <path\n        fill=\"none\"\n        stroke=\"#303c42\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M6.9 20.5H2c-.6 0-.5-.1-.5-.5s2.9-18 3-18.5.5-1 1-1h10c2.8 0 5 2.2 5 5h0c0 4.4-3.6 8-8 8H7.9\"\n      ></path>\n      <path\n        fill=\"none\"\n        stroke=\"#303c42\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M7 23.5c-.3 0-.5-.2-.5-.5 0 0 0 0 0 0 0-.3 2.4-16 2.5-16.5s.3-1 1-1h7.5c2.8 0 5 2.2 5 5h0c0 3.9-3.1 7-7 7h-2l-1 6H7z\"\n      ></path>\n    </svg>\n  )\n}\n\nexport default PayPal\n"],"names":[],"mappings":";;;;;;AAAA,MAAM,SAAS;IACb,qBACE,8OAAC;QACC,OAAM;QACN,QAAO;QACP,OAAM;QACN,SAAQ;QACR,IAAG;;0BAEH,8OAAC;gBACC,MAAK;gBACL,QAAO;gBACP,aAAY;gBACZ,eAAc;gBACd,gBAAe;gBACf,GAAE;;;;;;0BAEJ,8OAAC;gBACC,MAAK;gBACL,QAAO;gBACP,aAAY;gBACZ,eAAc;gBACd,gBAAe;gBACf,GAAE;;;;;;;;;;;;AAIV;uCAEe","debugId":null}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/constants.tsx"],"sourcesContent":["import React from \"react\"\nimport { CreditCard } from \"@medusajs/icons\"\n\nimport Ideal from \"@modules/common/icons/ideal\"\nimport Bancontact from \"@modules/common/icons/bancontact\"\nimport PayPal from \"@modules/common/icons/paypal\"\n\n/* Map of payment provider_id to their title and icon. Add in any payment providers you want to use. */\nexport const paymentInfoMap: Record<\n  string,\n  { title: string; icon: React.JSX.Element }\n> = {\n  pp_stripe_stripe: {\n    title: \"Credit card\",\n    icon: <CreditCard />,\n  },\n  \"pp_stripe-ideal_stripe\": {\n    title: \"iDeal\",\n    icon: <Ideal />,\n  },\n  \"pp_stripe-bancontact_stripe\": {\n    title: \"Bancontact\",\n    icon: <Bancontact />,\n  },\n  pp_paypal_paypal: {\n    title: \"PayPal\",\n    icon: <PayPal />,\n  },\n  pp_system_default: {\n    title: \"Manual Payment\",\n    icon: <CreditCard />,\n  },\n  // Add more payment providers here\n}\n\n// This only checks if it is native stripe for card payments, it ignores the other stripe-based providers\nexport const isStripe = (providerId?: string) => {\n  return providerId?.startsWith(\"pp_stripe_\")\n}\nexport const isPaypal = (providerId?: string) => {\n  return providerId?.startsWith(\"pp_paypal\")\n}\nexport const isManual = (providerId?: string) => {\n  return providerId?.startsWith(\"pp_system_default\")\n}\n\n// Add currencies that don't need to be divided by 100\nexport const noDivisionCurrencies = [\n  \"krw\",\n  \"jpy\",\n  \"vnd\",\n  \"clp\",\n  \"pyg\",\n  \"xaf\",\n  \"xof\",\n  \"bif\",\n  \"djf\",\n  \"gnf\",\n  \"kmf\",\n  \"mga\",\n  \"rwf\",\n  \"xpf\",\n  \"htg\",\n  \"vuv\",\n  \"xag\",\n  \"xdr\",\n  \"xau\",\n]\n"],"names":[],"mappings":";;;;;;;;;;;;;AACA;AAEA;AACA;AACA;;;;;;AAGO,MAAM,iBAGT;IACF,kBAAkB;QAChB,OAAO;QACP,oBAAM,8OAAC,2NAAU;;;;;IACnB;IACA,0BAA0B;QACxB,OAAO;QACP,oBAAM,8OAAC,sJAAK;;;;;IACd;IACA,+BAA+B;QAC7B,OAAO;QACP,oBAAM,8OAAC,2JAAU;;;;;IACnB;IACA,kBAAkB;QAChB,OAAO;QACP,oBAAM,8OAAC,uJAAM;;;;;IACf;IACA,mBAAmB;QACjB,OAAO;QACP,oBAAM,8OAAC,2NAAU;;;;;IACnB;AAEF;AAGO,MAAM,WAAW,CAAC;IACvB,OAAO,YAAY,WAAW;AAChC;AACO,MAAM,WAAW,CAAC;IACvB,OAAO,YAAY,WAAW;AAChC;AACO,MAAM,WAAW,CAAC;IACvB,OAAO,YAAY,WAAW;AAChC;AAGO,MAAM,uBAAuB;IAClC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD","debugId":null}},
    {"offset": {"line": 285, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/checkout/components/payment-wrapper/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { loadStripe } from \"@stripe/stripe-js\"\nimport React from \"react\"\nimport StripeWrapper from \"./stripe-wrapper\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { isStripe } from \"@lib/constants\"\n\ntype PaymentWrapperProps = {\n  cart: HttpTypes.StoreCart\n  children: React.ReactNode\n}\n\nconst stripeKey = process.env.NEXT_PUBLIC_STRIPE_KEY\nconst stripePromise = stripeKey ? loadStripe(stripeKey) : null\n\nconst PaymentWrapper: React.FC<PaymentWrapperProps> = ({ cart, children }) => {\n  const paymentSession = cart.payment_collection?.payment_sessions?.find(\n    (s) => s.status === \"pending\"\n  )\n\n  if (\n    isStripe(paymentSession?.provider_id) &&\n    paymentSession &&\n    stripePromise\n  ) {\n    return (\n      <StripeWrapper\n        paymentSession={paymentSession}\n        stripeKey={stripeKey}\n        stripePromise={stripePromise}\n      >\n        {children}\n      </StripeWrapper>\n    )\n  }\n\n  return <div>{children}</div>\n}\n\nexport default PaymentWrapper\n"],"names":[],"mappings":";;;;;AAEA;AAEA;AAEA;AANA;;;;;AAaA,MAAM;AACN,MAAM,gBAAgB,sCAAY,0BAAwB;AAE1D,MAAM,iBAAgD,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;IACvE,MAAM,iBAAiB,KAAK,kBAAkB,EAAE,kBAAkB,KAChE,CAAC,IAAM,EAAE,MAAM,KAAK;IAGtB,IACE,IAAA,oIAAQ,EAAC,gBAAgB,gBACzB,kBACA;;IAaF,qBAAO,8OAAC;kBAAK;;;;;;AACf;uCAEe","debugId":null}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/data/cart.ts"],"sourcesContent":["\"use server\"\n\nimport { sdk } from \"@lib/config\"\nimport medusaError from \"@lib/util/medusa-error\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { revalidateTag } from \"next/cache\"\nimport { redirect } from \"next/navigation\"\nimport {\n  getAuthHeaders,\n  getCacheOptions,\n  getCacheTag,\n  getCartId,\n  removeCartId,\n  setCartId,\n} from \"./cookies\"\nimport { getRegion } from \"./regions\"\n\n/**\n * Retrieves a cart by its ID. If no ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to retrieve.\n * @returns The cart object if found, or null if not found.\n */\nexport async function retrieveCart(cartId?: string, fields?: string) {\n  const id = cartId || (await getCartId())\n  fields ??= \"*items, *region, *items.product, *items.variant, *items.thumbnail, *items.metadata, +items.total, *promotions, +shipping_methods.name\"\n\n  if (!id) {\n    return null\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const next = {\n    ...(await getCacheOptions(\"carts\")),\n  }\n\n  return await sdk.client\n    .fetch<HttpTypes.StoreCartResponse>(`/store/carts/${id}`, {\n      method: \"GET\",\n      query: {\n        fields\n      },\n      headers,\n      next,\n      cache: \"force-cache\",\n    })\n    .then(({ cart }: { cart: HttpTypes.StoreCart }) => cart)\n    .catch(() => null)\n}\n\nexport async function getOrSetCart(countryCode: string) {\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  let cart = await retrieveCart(undefined, 'id,region_id')\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  if (!cart) {\n    const cartResp = await sdk.store.cart.create(\n      { region_id: region.id },\n      {},\n      headers\n    )\n    cart = cartResp.cart\n\n    await setCartId(cart.id)\n\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  if (cart && cart?.region_id !== region.id) {\n    await sdk.store.cart.update(cart.id, { region_id: region.id }, {}, headers)\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  return cart\n}\n\nexport async function updateCart(data: HttpTypes.StoreUpdateCart) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found, please create one before updating\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, data, {}, headers)\n    .then(async ({ cart }: { cart: HttpTypes.StoreCart }) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n\n      return cart\n    })\n    .catch(medusaError)\n}\n\nexport async function addToCart({\n  variantId,\n  quantity,\n  countryCode,\n}: {\n  variantId: string\n  quantity: number\n  countryCode: string\n}) {\n  if (!variantId) {\n    throw new Error(\"Missing variant ID when adding to cart\")\n  }\n\n  const cart = await getOrSetCart(countryCode)\n\n  if (!cart) {\n    throw new Error(\"Error retrieving or creating cart\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .createLineItem(\n      cart.id,\n      {\n        variant_id: variantId,\n        quantity,\n      },\n      {},\n      headers\n    )\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function updateLineItem({\n  lineId,\n  quantity,\n}: {\n  lineId: string\n  quantity: number\n}) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when updating line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when updating line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .updateLineItem(cartId, lineId, { quantity }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function deleteLineItem(lineId: string) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when deleting line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when deleting line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .deleteLineItem(cartId, lineId, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function setShippingMethod({\n  cartId,\n  shippingMethodId,\n}: {\n  cartId: string\n  shippingMethodId: string\n}) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .addShippingMethod(cartId, { option_id: shippingMethodId }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function initiatePaymentSession(\n  cart: HttpTypes.StoreCart,\n  data: HttpTypes.StoreInitializePaymentSession\n) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.payment\n    .initiatePaymentSession(cart, data, {}, headers)\n    .then(async (resp) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return resp\n    })\n    .catch(medusaError)\n}\n\nexport async function applyPromotions(codes: string[]) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, { promo_codes: codes }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function applyGiftCard(code: string) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, { gift_cards: [{ code }] }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function removeDiscount(code: string) {\n  // const cartId = getCartId()\n  // if (!cartId) return \"No cartId cookie found\"\n  // try {\n  //   await deleteDiscount(cartId, code)\n  //   revalidateTag(\"cart\")\n  // } catch (error: any) {\n  //   throw error\n  // }\n}\n\nexport async function removeGiftCard(\n  codeToRemove: string,\n  giftCards: any[]\n  // giftCards: GiftCard[]\n) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, {\n  //       gift_cards: [...giftCards]\n  //         .filter((gc) => gc.code !== codeToRemove)\n  //         .map((gc) => ({ code: gc.code })),\n  //     }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function submitPromotionForm(\n  currentState: unknown,\n  formData: FormData\n) {\n  const code = formData.get(\"code\") as string\n  try {\n    await applyPromotions([code])\n  } catch (e: any) {\n    return e.message\n  }\n}\n\n// TODO: Pass a POJO instead of a form entity here\nexport async function setAddresses(currentState: unknown, formData: FormData) {\n  try {\n    if (!formData) {\n      throw new Error(\"No form data found when setting addresses\")\n    }\n    const cartId = getCartId()\n    if (!cartId) {\n      throw new Error(\"No existing cart found when setting addresses\")\n    }\n\n    const data = {\n      shipping_address: {\n        first_name: formData.get(\"shipping_address.first_name\"),\n        last_name: formData.get(\"shipping_address.last_name\"),\n        address_1: formData.get(\"shipping_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"shipping_address.company\"),\n        postal_code: formData.get(\"shipping_address.postal_code\"),\n        city: formData.get(\"shipping_address.city\"),\n        country_code: formData.get(\"shipping_address.country_code\"),\n        province: formData.get(\"shipping_address.province\"),\n        phone: formData.get(\"shipping_address.phone\"),\n      },\n      email: formData.get(\"email\"),\n    } as any\n\n    const sameAsBilling = formData.get(\"same_as_billing\")\n    if (sameAsBilling === \"on\") data.billing_address = data.shipping_address\n\n    if (sameAsBilling !== \"on\")\n      data.billing_address = {\n        first_name: formData.get(\"billing_address.first_name\"),\n        last_name: formData.get(\"billing_address.last_name\"),\n        address_1: formData.get(\"billing_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"billing_address.company\"),\n        postal_code: formData.get(\"billing_address.postal_code\"),\n        city: formData.get(\"billing_address.city\"),\n        country_code: formData.get(\"billing_address.country_code\"),\n        province: formData.get(\"billing_address.province\"),\n        phone: formData.get(\"billing_address.phone\"),\n      }\n    await updateCart(data)\n  } catch (e: any) {\n    return e.message\n  }\n\n  redirect(\n    `/${formData.get(\"shipping_address.country_code\")}/checkout?step=delivery`\n  )\n}\n\n/**\n * Places an order for a cart. If no cart ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to place an order for.\n * @returns The cart object if the order was successful, or null if not.\n */\nexport async function placeOrder(cartId?: string) {\n  const id = cartId || (await getCartId())\n\n  if (!id) {\n    throw new Error(\"No existing cart found when placing an order\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const cartRes = await sdk.store.cart\n    .complete(id, {}, headers)\n    .then(async (cartRes) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return cartRes\n    })\n    .catch(medusaError)\n\n  if (cartRes?.type === \"order\") {\n    const countryCode =\n      cartRes.order.shipping_address?.country_code?.toLowerCase()\n\n    const orderCacheTag = await getCacheTag(\"orders\")\n    revalidateTag(orderCacheTag)\n\n    removeCartId()\n    redirect(`/${countryCode}/order/${cartRes?.order.id}/confirmed`)\n  }\n\n  return cartRes.cart\n}\n\n/**\n * Updates the countrycode param and revalidates the regions cache\n * @param regionId\n * @param countryCode\n */\nexport async function updateRegion(countryCode: string, currentPath: string) {\n  const cartId = await getCartId()\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  if (cartId) {\n    await updateCart({ region_id: region.id })\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  const regionCacheTag = await getCacheTag(\"regions\")\n  revalidateTag(regionCacheTag)\n\n  const productsCacheTag = await getCacheTag(\"products\")\n  revalidateTag(productsCacheTag)\n\n  redirect(`/${countryCode}${currentPath}`)\n}\n\nexport async function listCartOptions() {\n  const cartId = await getCartId()\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n  const next = {\n    ...(await getCacheOptions(\"shippingOptions\")),\n  }\n\n  return await sdk.client.fetch<{\n    shipping_options: HttpTypes.StoreCartShippingOption[]\n  }>(\"/store/shipping-options\", {\n    query: { cart_id: cartId },\n    next,\n    headers,\n    cache: \"force-cache\",\n  })\n}\n"],"names":[],"mappings":";;;;;;;IA6UsB,eAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 329, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/util/compare-addresses.ts"],"sourcesContent":["import { isEqual, pick } from \"lodash\"\n\nexport default function compareAddresses(address1: any, address2: any) {\n  return isEqual(\n    pick(address1, [\n      \"first_name\",\n      \"last_name\",\n      \"address_1\",\n      \"company\",\n      \"postal_code\",\n      \"city\",\n      \"country_code\",\n      \"province\",\n      \"phone\",\n    ]),\n    pick(address2, [\n      \"first_name\",\n      \"last_name\",\n      \"address_1\",\n      \"company\",\n      \"postal_code\",\n      \"city\",\n      \"country_code\",\n      \"province\",\n      \"phone\",\n    ])\n  )\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;;;AAEe,SAAS,iBAAiB,QAAa,EAAE,QAAa;IACnE,OAAO,IAAA,4IAAO,EACZ,IAAA,yIAAI,EAAC,UAAU;QACb;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD,GACD,IAAA,yIAAI,EAAC,UAAU;QACb;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;AAEL","debugId":null}},
    {"offset": {"line": 364, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/components/divider/index.tsx"],"sourcesContent":["import { clx } from \"@medusajs/ui\"\n\nconst Divider = ({ className }: { className?: string }) => (\n  <div\n    className={clx(\"h-px w-full border-b border-gray-200 mt-1\", className)}\n  />\n)\n\nexport default Divider\n"],"names":[],"mappings":";;;;;AAAA;;;AAEA,MAAM,UAAU,CAAC,EAAE,SAAS,EAA0B,iBACpD,8OAAC;QACC,WAAW,IAAA,sKAAG,EAAC,6CAA6C;;;;;;uCAIjD","debugId":null}},
    {"offset": {"line": 384, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/icons/spinner.tsx"],"sourcesContent":["import React from \"react\"\n\nimport { IconProps } from \"types/icon\"\n\nconst Spinner: React.FC<IconProps> = ({\n  size = \"16\",\n  color = \"currentColor\",\n  ...attributes\n}) => {\n  return (\n    <svg\n      className=\"animate-spin\"\n      width={size}\n      height={size}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      {...attributes}\n    >\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke={color}\n        strokeWidth=\"4\"\n      ></circle>\n      <path\n        className=\"opacity-75\"\n        fill={color}\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      ></path>\n    </svg>\n  )\n}\n\nexport default Spinner\n"],"names":[],"mappings":";;;;;;AAIA,MAAM,UAA+B,CAAC,EACpC,OAAO,IAAI,EACX,QAAQ,cAAc,EACtB,GAAG,YACJ;IACC,qBACE,8OAAC;QACC,WAAU;QACV,OAAO;QACP,QAAQ;QACR,OAAM;QACN,MAAK;QACL,SAAQ;QACP,GAAG,UAAU;;0BAEd,8OAAC;gBACC,WAAU;gBACV,IAAG;gBACH,IAAG;gBACH,GAAE;gBACF,QAAQ;gBACR,aAAY;;;;;;0BAEd,8OAAC;gBACC,WAAU;gBACV,MAAM;gBACN,GAAE;;;;;;;;;;;;AAIV;uCAEe","debugId":null}},
    {"offset": {"line": 433, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/icons/eye.tsx"],"sourcesContent":["import React from \"react\"\n\nimport { IconProps } from \"types/icon\"\n\nconst Eye: React.FC<IconProps> = ({\n  size = \"20\",\n  color = \"currentColor\",\n  ...attributes\n}) => {\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...attributes}\n    >\n      <path\n        d=\"M2.5 9.99992C2.5 9.99992 5.22727 4.58325 10 4.58325C14.7727 4.58325 17.5 9.99992 17.5 9.99992C17.5 9.99992 14.7727 15.4166 10 15.4166C5.22727 15.4166 2.5 9.99992 2.5 9.99992Z\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M9.99965 12.074C11.145 12.074 12.0735 11.1455 12.0735 10.0001C12.0735 8.85477 11.145 7.92627 9.99965 7.92627C8.85428 7.92627 7.92578 8.85477 7.92578 10.0001C7.92578 11.1455 8.85428 12.074 9.99965 12.074Z\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  )\n}\n\nexport default Eye\n"],"names":[],"mappings":";;;;;;AAIA,MAAM,MAA2B,CAAC,EAChC,OAAO,IAAI,EACX,QAAQ,cAAc,EACtB,GAAG,YACJ;IACC,qBACE,8OAAC;QACC,OAAO;QACP,QAAQ;QACR,SAAQ;QACR,MAAK;QACL,OAAM;QACL,GAAG,UAAU;;0BAEd,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;0BAEjB,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;;;;;;;AAIvB;uCAEe","debugId":null}},
    {"offset": {"line": 482, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/icons/eye-off.tsx"],"sourcesContent":["import React from \"react\"\n\nimport { IconProps } from \"types/icon\"\n\nconst EyeOff: React.FC<IconProps> = ({\n  size = \"20\",\n  color = \"currentColor\",\n  ...attributes\n}) => {\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...attributes}\n    >\n      <path\n        d=\"M8.56818 4.70906C9.0375 4.59921 9.518 4.54429 10 4.54543C14.7727 4.54543 17.5 9.99997 17.5 9.99997C17.0861 10.7742 16.5925 11.5032 16.0273 12.175M11.4455 11.4454C11.2582 11.6464 11.0324 11.8076 10.7815 11.9194C10.5306 12.0312 10.2597 12.0913 9.98506 12.0961C9.71042 12.101 9.43761 12.0505 9.18292 11.9476C8.92822 11.8447 8.69686 11.6916 8.50262 11.4973C8.30839 11.3031 8.15527 11.0718 8.05239 10.8171C7.94952 10.5624 7.899 10.2896 7.90384 10.0149C7.90869 9.74027 7.9688 9.46941 8.0806 9.2185C8.19239 8.9676 8.35358 8.74178 8.55455 8.55452M14.05 14.05C12.8845 14.9384 11.4653 15.4306 10 15.4545C5.22727 15.4545 2.5 9.99997 2.5 9.99997C3.34811 8.41945 4.52441 7.03857 5.95 5.94997L14.05 14.05Z\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M2.5 2.5L17.5 17.5\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  )\n}\n\nexport default EyeOff\n"],"names":[],"mappings":";;;;;;AAIA,MAAM,SAA8B,CAAC,EACnC,OAAO,IAAI,EACX,QAAQ,cAAc,EACtB,GAAG,YACJ;IACC,qBACE,8OAAC;QACC,OAAO;QACP,QAAQ;QACR,SAAQ;QACR,MAAK;QACL,OAAM;QACL,GAAG,UAAU;;0BAEd,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;0BAEjB,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;;;;;;;AAIvB;uCAEe","debugId":null}},
    {"offset": {"line": 531, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/components/input/index.tsx"],"sourcesContent":["import { Label } from \"@medusajs/ui\"\nimport React, { useEffect, useImperativeHandle, useState } from \"react\"\n\nimport Eye from \"@modules/common/icons/eye\"\nimport EyeOff from \"@modules/common/icons/eye-off\"\n\ntype InputProps = Omit<\n  Omit<React.InputHTMLAttributes<HTMLInputElement>, \"size\">,\n  \"placeholder\"\n> & {\n  label: string\n  errors?: Record<string, unknown>\n  touched?: Record<string, unknown>\n  name: string\n  topLabel?: string\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ type, name, label, touched, required, topLabel, ...props }, ref) => {\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    const [showPassword, setShowPassword] = useState(false)\n    const [inputType, setInputType] = useState(type)\n\n    useEffect(() => {\n      if (type === \"password\" && showPassword) {\n        setInputType(\"text\")\n      }\n\n      if (type === \"password\" && !showPassword) {\n        setInputType(\"password\")\n      }\n    }, [type, showPassword])\n\n    useImperativeHandle(ref, () => inputRef.current!)\n\n    return (\n      <div className=\"flex flex-col w-full\">\n        {topLabel && (\n          <Label className=\"mb-2 txt-compact-medium-plus\">{topLabel}</Label>\n        )}\n        <div className=\"flex relative z-0 w-full txt-compact-medium\">\n          <input\n            type={inputType}\n            name={name}\n            placeholder=\" \"\n            required={required}\n            className=\"pt-4 pb-1 block w-full h-11 px-4 mt-0 bg-ui-bg-field border rounded-md appearance-none focus:outline-none focus:ring-0 focus:shadow-borders-interactive-with-active border-ui-border-base hover:bg-ui-bg-field-hover\"\n            {...props}\n            ref={inputRef}\n          />\n          <label\n            htmlFor={name}\n            onClick={() => inputRef.current?.focus()}\n            className=\"flex items-center justify-center mx-3 px-1 transition-all absolute duration-300 top-3 -z-1 origin-0 text-ui-fg-subtle\"\n          >\n            {label}\n            {required && <span className=\"text-rose-500\">*</span>}\n          </label>\n          {type === \"password\" && (\n            <button\n              type=\"button\"\n              onClick={() => setShowPassword(!showPassword)}\n              className=\"text-ui-fg-subtle px-4 focus:outline-none transition-all duration-150 outline-none focus:text-ui-fg-base absolute right-0 top-3\"\n            >\n              {showPassword ? <Eye /> : <EyeOff />}\n            </button>\n          )}\n        </div>\n      </div>\n    )\n  }\n)\n\nInput.displayName = \"Input\"\n\nexport default Input\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAEA;AACA;;;;;;AAaA,MAAM,sBAAQ,gNAAK,CAAC,UAAU,CAC5B,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE;IAC7D,MAAM,WAAW,gNAAK,CAAC,MAAM,CAAmB;IAChD,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,iNAAQ,EAAC;IACjD,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,iNAAQ,EAAC;IAE3C,IAAA,kNAAS,EAAC;QACR,IAAI,SAAS,cAAc,cAAc;YACvC,aAAa;QACf;QAEA,IAAI,SAAS,cAAc,CAAC,cAAc;YACxC,aAAa;QACf;IACF,GAAG;QAAC;QAAM;KAAa;IAEvB,IAAA,4NAAmB,EAAC,KAAK,IAAM,SAAS,OAAO;IAE/C,qBACE,8OAAC;QAAI,WAAU;;YACZ,0BACC,8OAAC,wLAAK;gBAAC,WAAU;0BAAgC;;;;;;0BAEnD,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBACC,MAAM;wBACN,MAAM;wBACN,aAAY;wBACZ,UAAU;wBACV,WAAU;wBACT,GAAG,KAAK;wBACT,KAAK;;;;;;kCAEP,8OAAC;wBACC,SAAS;wBACT,SAAS,IAAM,SAAS,OAAO,EAAE;wBACjC,WAAU;;4BAET;4BACA,0BAAY,8OAAC;gCAAK,WAAU;0CAAgB;;;;;;;;;;;;oBAE9C,SAAS,4BACR,8OAAC;wBACC,MAAK;wBACL,SAAS,IAAM,gBAAgB,CAAC;wBAChC,WAAU;kCAET,6BAAe,8OAAC,oJAAG;;;;qFAAM,8OAAC,2JAAM;;;;;;;;;;;;;;;;;;;;;;AAM7C;AAGF,MAAM,WAAW,GAAG;uCAEL","debugId":null}},
    {"offset": {"line": 645, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/components/native-select/index.tsx"],"sourcesContent":["import { ChevronUpDown } from \"@medusajs/icons\"\nimport { clx } from \"@medusajs/ui\"\nimport {\n  SelectHTMLAttributes,\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from \"react\"\n\nexport type NativeSelectProps = {\n  placeholder?: string\n  errors?: Record<string, unknown>\n  touched?: Record<string, unknown>\n} & SelectHTMLAttributes<HTMLSelectElement>\n\nconst NativeSelect = forwardRef<HTMLSelectElement, NativeSelectProps>(\n  (\n    { placeholder = \"Select...\", defaultValue, className, children, ...props },\n    ref\n  ) => {\n    const innerRef = useRef<HTMLSelectElement>(null)\n    const [isPlaceholder, setIsPlaceholder] = useState(false)\n\n    useImperativeHandle<HTMLSelectElement | null, HTMLSelectElement | null>(\n      ref,\n      () => innerRef.current\n    )\n\n    useEffect(() => {\n      if (innerRef.current && innerRef.current.value === \"\") {\n        setIsPlaceholder(true)\n      } else {\n        setIsPlaceholder(false)\n      }\n    }, [innerRef.current?.value])\n\n    return (\n      <div>\n        <div\n          onFocus={() => innerRef.current?.focus()}\n          onBlur={() => innerRef.current?.blur()}\n          className={clx(\n            \"relative flex items-center text-base-regular border border-ui-border-base bg-ui-bg-subtle rounded-md hover:bg-ui-bg-field-hover\",\n            className,\n            {\n              \"text-ui-fg-muted\": isPlaceholder,\n            }\n          )}\n        >\n          <select\n            ref={innerRef}\n            defaultValue={defaultValue}\n            {...props}\n            className=\"appearance-none flex-1 bg-transparent border-none px-4 py-2.5 transition-colors duration-150 outline-none \"\n          >\n            <option disabled value=\"\">\n              {placeholder}\n            </option>\n            {children}\n          </select>\n          <span className=\"absolute right-4 inset-y-0 flex items-center pointer-events-none \">\n            <ChevronUpDown />\n          </span>\n        </div>\n      </div>\n    )\n  }\n)\n\nNativeSelect.displayName = \"NativeSelect\"\n\nexport default NativeSelect\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;;AAeA,MAAM,6BAAe,IAAA,mNAAU,EAC7B,CACE,EAAE,cAAc,WAAW,EAAE,YAAY,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAC1E;IAEA,MAAM,WAAW,IAAA,+MAAM,EAAoB;IAC3C,MAAM,CAAC,eAAe,iBAAiB,GAAG,IAAA,iNAAQ,EAAC;IAEnD,IAAA,4NAAmB,EACjB,KACA,IAAM,SAAS,OAAO;IAGxB,IAAA,kNAAS,EAAC;QACR,IAAI,SAAS,OAAO,IAAI,SAAS,OAAO,CAAC,KAAK,KAAK,IAAI;YACrD,iBAAiB;QACnB,OAAO;YACL,iBAAiB;QACnB;IACF,GAAG;QAAC,SAAS,OAAO,EAAE;KAAM;IAE5B,qBACE,8OAAC;kBACC,cAAA,8OAAC;YACC,SAAS,IAAM,SAAS,OAAO,EAAE;YACjC,QAAQ,IAAM,SAAS,OAAO,EAAE;YAChC,WAAW,IAAA,sKAAG,EACZ,mIACA,WACA;gBACE,oBAAoB;YACtB;;8BAGF,8OAAC;oBACC,KAAK;oBACL,cAAc;oBACb,GAAG,KAAK;oBACT,WAAU;;sCAEV,8OAAC;4BAAO,QAAQ;4BAAC,OAAM;sCACpB;;;;;;wBAEF;;;;;;;8BAEH,8OAAC;oBAAK,WAAU;8BACd,cAAA,8OAAC,wOAAa;;;;;;;;;;;;;;;;;;;;;AAKxB;AAGF,aAAa,WAAW,GAAG;uCAEZ","debugId":null}},
    {"offset": {"line": 730, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/checkout/components/country-select/index.tsx"],"sourcesContent":["import { forwardRef, useImperativeHandle, useMemo, useRef } from \"react\"\n\nimport NativeSelect, {\n  NativeSelectProps,\n} from \"@modules/common/components/native-select\"\nimport { HttpTypes } from \"@medusajs/types\"\n\nconst CountrySelect = forwardRef<\n  HTMLSelectElement,\n  NativeSelectProps & {\n    region?: HttpTypes.StoreRegion\n  }\n>(({ placeholder = \"Country\", region, defaultValue, ...props }, ref) => {\n  const innerRef = useRef<HTMLSelectElement>(null)\n\n  useImperativeHandle<HTMLSelectElement | null, HTMLSelectElement | null>(\n    ref,\n    () => innerRef.current\n  )\n\n  const countryOptions = useMemo(() => {\n    if (!region) {\n      return []\n    }\n\n    return region.countries?.map((country) => ({\n      value: country.iso_2,\n      label: country.display_name,\n    }))\n  }, [region])\n\n  return (\n    <NativeSelect\n      ref={innerRef}\n      placeholder={placeholder}\n      defaultValue={defaultValue}\n      {...props}\n    >\n      {countryOptions?.map(({ value, label }, index) => (\n        <option key={index} value={value}>\n          {label}\n        </option>\n      ))}\n    </NativeSelect>\n  )\n})\n\nCountrySelect.displayName = \"CountrySelect\"\n\nexport default CountrySelect\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAKA,MAAM,8BAAgB,IAAA,mNAAU,EAK9B,CAAC,EAAE,cAAc,SAAS,EAAE,MAAM,EAAE,YAAY,EAAE,GAAG,OAAO,EAAE;IAC9D,MAAM,WAAW,IAAA,+MAAM,EAAoB;IAE3C,IAAA,4NAAmB,EACjB,KACA,IAAM,SAAS,OAAO;IAGxB,MAAM,iBAAiB,IAAA,gNAAO,EAAC;QAC7B,IAAI,CAAC,QAAQ;YACX,OAAO,EAAE;QACX;QAEA,OAAO,OAAO,SAAS,EAAE,IAAI,CAAC,UAAY,CAAC;gBACzC,OAAO,QAAQ,KAAK;gBACpB,OAAO,QAAQ,YAAY;YAC7B,CAAC;IACH,GAAG;QAAC;KAAO;IAEX,qBACE,8OAAC,+KAAY;QACX,KAAK;QACL,aAAa;QACb,cAAc;QACb,GAAG,KAAK;kBAER,gBAAgB,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,sBACtC,8OAAC;gBAAmB,OAAO;0BACxB;eADU;;;;;;;;;;AAMrB;AAEA,cAAc,WAAW,GAAG;uCAEb","debugId":null}},
    {"offset": {"line": 779, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/checkout/components/billing_address/index.tsx"],"sourcesContent":["import { HttpTypes } from \"@medusajs/types\"\nimport Input from \"@modules/common/components/input\"\nimport React, { useState } from \"react\"\nimport CountrySelect from \"../country-select\"\n\nconst BillingAddress = ({ cart }: { cart: HttpTypes.StoreCart | null }) => {\n  const [formData, setFormData] = useState<any>({\n    \"billing_address.first_name\": cart?.billing_address?.first_name || \"\",\n    \"billing_address.last_name\": cart?.billing_address?.last_name || \"\",\n    \"billing_address.address_1\": cart?.billing_address?.address_1 || \"\",\n    \"billing_address.company\": cart?.billing_address?.company || \"\",\n    \"billing_address.postal_code\": cart?.billing_address?.postal_code || \"\",\n    \"billing_address.city\": cart?.billing_address?.city || \"\",\n    \"billing_address.country_code\": cart?.billing_address?.country_code || \"\",\n    \"billing_address.province\": cart?.billing_address?.province || \"\",\n    \"billing_address.phone\": cart?.billing_address?.phone || \"\",\n  })\n\n  const handleChange = (\n    e: React.ChangeEvent<\n      HTMLInputElement | HTMLInputElement | HTMLSelectElement\n    >\n  ) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    })\n  }\n\n  return (\n    <>\n      <div className=\"grid grid-cols-2 gap-4\">\n        <Input\n          label=\"First name\"\n          name=\"billing_address.first_name\"\n          autoComplete=\"given-name\"\n          value={formData[\"billing_address.first_name\"]}\n          onChange={handleChange}\n          required\n          data-testid=\"billing-first-name-input\"\n        />\n        <Input\n          label=\"Last name\"\n          name=\"billing_address.last_name\"\n          autoComplete=\"family-name\"\n          value={formData[\"billing_address.last_name\"]}\n          onChange={handleChange}\n          required\n          data-testid=\"billing-last-name-input\"\n        />\n        <Input\n          label=\"Address\"\n          name=\"billing_address.address_1\"\n          autoComplete=\"address-line1\"\n          value={formData[\"billing_address.address_1\"]}\n          onChange={handleChange}\n          required\n          data-testid=\"billing-address-input\"\n        />\n        <Input\n          label=\"Company\"\n          name=\"billing_address.company\"\n          value={formData[\"billing_address.company\"]}\n          onChange={handleChange}\n          autoComplete=\"organization\"\n          data-testid=\"billing-company-input\"\n        />\n        <Input\n          label=\"Postal code\"\n          name=\"billing_address.postal_code\"\n          autoComplete=\"postal-code\"\n          value={formData[\"billing_address.postal_code\"]}\n          onChange={handleChange}\n          required\n          data-testid=\"billing-postal-input\"\n        />\n        <Input\n          label=\"City\"\n          name=\"billing_address.city\"\n          autoComplete=\"address-level2\"\n          value={formData[\"billing_address.city\"]}\n          onChange={handleChange}\n        />\n        <CountrySelect\n          name=\"billing_address.country_code\"\n          autoComplete=\"country\"\n          region={cart?.region}\n          value={formData[\"billing_address.country_code\"]}\n          onChange={handleChange}\n          required\n          data-testid=\"billing-country-select\"\n        />\n        <Input\n          label=\"State / Province\"\n          name=\"billing_address.province\"\n          autoComplete=\"address-level1\"\n          value={formData[\"billing_address.province\"]}\n          onChange={handleChange}\n          data-testid=\"billing-province-input\"\n        />\n        <Input\n          label=\"Phone\"\n          name=\"billing_address.phone\"\n          autoComplete=\"tel\"\n          value={formData[\"billing_address.phone\"]}\n          onChange={handleChange}\n          data-testid=\"billing-phone-input\"\n        />\n      </div>\n    </>\n  )\n}\n\nexport default BillingAddress\n"],"names":[],"mappings":";;;;;AACA;AACA;AACA;;;;;AAEA,MAAM,iBAAiB,CAAC,EAAE,IAAI,EAAwC;IACpE,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,iNAAQ,EAAM;QAC5C,8BAA8B,MAAM,iBAAiB,cAAc;QACnE,6BAA6B,MAAM,iBAAiB,aAAa;QACjE,6BAA6B,MAAM,iBAAiB,aAAa;QACjE,2BAA2B,MAAM,iBAAiB,WAAW;QAC7D,+BAA+B,MAAM,iBAAiB,eAAe;QACrE,wBAAwB,MAAM,iBAAiB,QAAQ;QACvD,gCAAgC,MAAM,iBAAiB,gBAAgB;QACvE,4BAA4B,MAAM,iBAAiB,YAAY;QAC/D,yBAAyB,MAAM,iBAAiB,SAAS;IAC3D;IAEA,MAAM,eAAe,CACnB;QAIA,YAAY;YACV,GAAG,QAAQ;YACX,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,KAAK;QACjC;IACF;IAEA,qBACE;kBACE,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC,oKAAK;oBACJ,OAAM;oBACN,MAAK;oBACL,cAAa;oBACb,OAAO,QAAQ,CAAC,6BAA6B;oBAC7C,UAAU;oBACV,QAAQ;oBACR,eAAY;;;;;;8BAEd,8OAAC,oKAAK;oBACJ,OAAM;oBACN,MAAK;oBACL,cAAa;oBACb,OAAO,QAAQ,CAAC,4BAA4B;oBAC5C,UAAU;oBACV,QAAQ;oBACR,eAAY;;;;;;8BAEd,8OAAC,oKAAK;oBACJ,OAAM;oBACN,MAAK;oBACL,cAAa;oBACb,OAAO,QAAQ,CAAC,4BAA4B;oBAC5C,UAAU;oBACV,QAAQ;oBACR,eAAY;;;;;;8BAEd,8OAAC,oKAAK;oBACJ,OAAM;oBACN,MAAK;oBACL,OAAO,QAAQ,CAAC,0BAA0B;oBAC1C,UAAU;oBACV,cAAa;oBACb,eAAY;;;;;;8BAEd,8OAAC,oKAAK;oBACJ,OAAM;oBACN,MAAK;oBACL,cAAa;oBACb,OAAO,QAAQ,CAAC,8BAA8B;oBAC9C,UAAU;oBACV,QAAQ;oBACR,eAAY;;;;;;8BAEd,8OAAC,oKAAK;oBACJ,OAAM;oBACN,MAAK;oBACL,cAAa;oBACb,OAAO,QAAQ,CAAC,uBAAuB;oBACvC,UAAU;;;;;;8BAEZ,8OAAC,kLAAa;oBACZ,MAAK;oBACL,cAAa;oBACb,QAAQ,MAAM;oBACd,OAAO,QAAQ,CAAC,+BAA+B;oBAC/C,UAAU;oBACV,QAAQ;oBACR,eAAY;;;;;;8BAEd,8OAAC,oKAAK;oBACJ,OAAM;oBACN,MAAK;oBACL,cAAa;oBACb,OAAO,QAAQ,CAAC,2BAA2B;oBAC3C,UAAU;oBACV,eAAY;;;;;;8BAEd,8OAAC,oKAAK;oBACJ,OAAM;oBACN,MAAK;oBACL,cAAa;oBACb,OAAO,QAAQ,CAAC,wBAAwB;oBACxC,UAAU;oBACV,eAAY;;;;;;;;;;;;;AAKtB;uCAEe","debugId":null}},
    {"offset": {"line": 938, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/checkout/components/error-message/index.tsx"],"sourcesContent":["const ErrorMessage = ({ error, 'data-testid': dataTestid }: { error?: string | null, 'data-testid'?: string }) => {\n  if (!error) {\n    return null\n  }\n\n  return (\n    <div className=\"pt-2 text-rose-500 text-small-regular\" data-testid={dataTestid}>\n      <span>{error}</span>\n    </div>\n  )\n}\n\nexport default ErrorMessage\n"],"names":[],"mappings":";;;;;;AAAA,MAAM,eAAe,CAAC,EAAE,KAAK,EAAE,eAAe,UAAU,EAAqD;IAC3G,IAAI,CAAC,OAAO;QACV,OAAO;IACT;IAEA,qBACE,8OAAC;QAAI,WAAU;QAAwC,eAAa;kBAClE,cAAA,8OAAC;sBAAM;;;;;;;;;;;AAGb;uCAEe","debugId":null}},
    {"offset": {"line": 969, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/components/checkbox/index.tsx"],"sourcesContent":["import { Checkbox, Label } from \"@medusajs/ui\"\nimport React from \"react\"\n\ntype CheckboxProps = {\n  checked?: boolean\n  onChange?: () => void\n  label: string\n  name?: string\n  'data-testid'?: string\n}\n\nconst CheckboxWithLabel: React.FC<CheckboxProps> = ({\n  checked = true,\n  onChange,\n  label,\n  name,\n  'data-testid': dataTestId\n}) => {\n  return (\n    <div className=\"flex items-center space-x-2 \">\n      <Checkbox\n        className=\"text-base-regular flex items-center gap-x-2\"\n        id=\"checkbox\"\n        role=\"checkbox\"\n        type=\"button\"\n        checked={checked}\n        aria-checked={checked}\n        onClick={onChange}\n        name={name}\n        data-testid={dataTestId}\n      />\n      <Label\n        htmlFor=\"checkbox\"\n        className=\"!transform-none !txt-medium\"\n        size=\"large\"\n      >\n        {label}\n      </Label>\n    </div>\n  )\n}\n\nexport default CheckboxWithLabel\n"],"names":[],"mappings":";;;;;AAAA;AAAA;;;AAWA,MAAM,oBAA6C,CAAC,EAClD,UAAU,IAAI,EACd,QAAQ,EACR,KAAK,EACL,IAAI,EACJ,eAAe,UAAU,EAC1B;IACC,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,iMAAQ;gBACP,WAAU;gBACV,IAAG;gBACH,MAAK;gBACL,MAAK;gBACL,SAAS;gBACT,gBAAc;gBACd,SAAS;gBACT,MAAM;gBACN,eAAa;;;;;;0BAEf,8OAAC,wLAAK;gBACJ,SAAQ;gBACR,WAAU;gBACV,MAAK;0BAEJ;;;;;;;;;;;;AAIT;uCAEe","debugId":null}},
    {"offset": {"line": 1019, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/components/radio/index.tsx"],"sourcesContent":["const Radio = ({ checked, 'data-testid': dataTestId }: { checked: boolean, 'data-testid'?: string }) => {\n  return (\n    <>\n      <button\n        type=\"button\"\n        role=\"radio\"\n        aria-checked=\"true\"\n        data-state={checked ? \"checked\" : \"unchecked\"}\n        className=\"group relative flex h-5 w-5 items-center justify-center outline-none\"\n        data-testid={dataTestId || 'radio-button'}\n      >\n        <div className=\"shadow-borders-base group-hover:shadow-borders-strong-with-shadow bg-ui-bg-base group-data-[state=checked]:bg-ui-bg-interactive group-data-[state=checked]:shadow-borders-interactive group-focus:!shadow-borders-interactive-with-focus group-disabled:!bg-ui-bg-disabled group-disabled:!shadow-borders-base flex h-[14px] w-[14px] items-center justify-center rounded-full transition-all\">\n          {checked && (\n            <span\n              data-state={checked ? \"checked\" : \"unchecked\"}\n              className=\"group flex items-center justify-center\"\n            >\n              <div className=\"bg-ui-bg-base shadow-details-contrast-on-bg-interactive group-disabled:bg-ui-fg-disabled rounded-full group-disabled:shadow-none h-1.5 w-1.5\"></div>\n            </span>\n          )}\n        </div>\n      </button>\n    </>\n  )\n}\n\nexport default Radio\n"],"names":[],"mappings":";;;;;;AAAA,MAAM,QAAQ,CAAC,EAAE,OAAO,EAAE,eAAe,UAAU,EAAgD;IACjG,qBACE;kBACE,cAAA,8OAAC;YACC,MAAK;YACL,MAAK;YACL,gBAAa;YACb,cAAY,UAAU,YAAY;YAClC,WAAU;YACV,eAAa,cAAc;sBAE3B,cAAA,8OAAC;gBAAI,WAAU;0BACZ,yBACC,8OAAC;oBACC,cAAY,UAAU,YAAY;oBAClC,WAAU;8BAEV,cAAA,8OAAC;wBAAI,WAAU;;;;;;;;;;;;;;;;;;;;;;AAO7B;uCAEe","debugId":null}},
    {"offset": {"line": 1068, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/checkout/components/address-select/index.tsx"],"sourcesContent":["import { Listbox, Transition } from \"@headlessui/react\"\nimport { ChevronUpDown } from \"@medusajs/icons\"\nimport { clx } from \"@medusajs/ui\"\nimport { Fragment, useMemo } from \"react\"\n\nimport Radio from \"@modules/common/components/radio\"\nimport compareAddresses from \"@lib/util/compare-addresses\"\nimport { HttpTypes } from \"@medusajs/types\"\n\ntype AddressSelectProps = {\n  addresses: HttpTypes.StoreCustomerAddress[]\n  addressInput: HttpTypes.StoreCartAddress | null\n  onSelect: (\n    address: HttpTypes.StoreCartAddress | undefined,\n    email?: string\n  ) => void\n}\n\nconst AddressSelect = ({\n  addresses,\n  addressInput,\n  onSelect,\n}: AddressSelectProps) => {\n  const handleSelect = (id: string) => {\n    const savedAddress = addresses.find((a) => a.id === id)\n    if (savedAddress) {\n      onSelect(savedAddress as HttpTypes.StoreCartAddress)\n    }\n  }\n\n  const selectedAddress = useMemo(() => {\n    return addresses.find((a) => compareAddresses(a, addressInput))\n  }, [addresses, addressInput])\n\n  return (\n    <Listbox onChange={handleSelect} value={selectedAddress?.id}>\n      <div className=\"relative\">\n        <Listbox.Button\n          className=\"relative w-full flex justify-between items-center px-4 py-[10px] text-left bg-white cursor-default focus:outline-none border rounded-rounded focus-visible:ring-2 focus-visible:ring-opacity-75 focus-visible:ring-white focus-visible:ring-offset-gray-300 focus-visible:ring-offset-2 focus-visible:border-gray-300 text-base-regular\"\n          data-testid=\"shipping-address-select\"\n        >\n          {({ open }) => (\n            <>\n              <span className=\"block truncate\">\n                {selectedAddress\n                  ? selectedAddress.address_1\n                  : \"Choose an address\"}\n              </span>\n              <ChevronUpDown\n                className={clx(\"transition-rotate duration-200\", {\n                  \"transform rotate-180\": open,\n                })}\n              />\n            </>\n          )}\n        </Listbox.Button>\n        <Transition\n          as={Fragment}\n          leave=\"transition ease-in duration-100\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\"\n        >\n          <Listbox.Options\n            className=\"absolute z-20 w-full overflow-auto text-small-regular bg-white border border-top-0 max-h-60 focus:outline-none sm:text-sm\"\n            data-testid=\"shipping-address-options\"\n          >\n            {addresses.map((address) => {\n              return (\n                <Listbox.Option\n                  key={address.id}\n                  value={address.id}\n                  className=\"cursor-default select-none relative pl-6 pr-10 hover:bg-gray-50 py-4\"\n                  data-testid=\"shipping-address-option\"\n                >\n                  <div className=\"flex gap-x-4 items-start\">\n                    <Radio\n                      checked={selectedAddress?.id === address.id}\n                      data-testid=\"shipping-address-radio\"\n                    />\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-left text-base-semi\">\n                        {address.first_name} {address.last_name}\n                      </span>\n                      {address.company && (\n                        <span className=\"text-small-regular text-ui-fg-base\">\n                          {address.company}\n                        </span>\n                      )}\n                      <div className=\"flex flex-col text-left text-base-regular mt-2\">\n                        <span>\n                          {address.address_1}\n                          {address.address_2 && (\n                            <span>, {address.address_2}</span>\n                          )}\n                        </span>\n                        <span>\n                          {address.postal_code}, {address.city}\n                        </span>\n                        <span>\n                          {address.province && `${address.province}, `}\n                          {address.country_code?.toUpperCase()}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </Listbox.Option>\n              )\n            })}\n          </Listbox.Options>\n        </Transition>\n      </div>\n    </Listbox>\n  )\n}\n\nexport default AddressSelect\n"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;AAYA,MAAM,gBAAgB,CAAC,EACrB,SAAS,EACT,YAAY,EACZ,QAAQ,EACW;IACnB,MAAM,eAAe,CAAC;QACpB,MAAM,eAAe,UAAU,IAAI,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK;QACpD,IAAI,cAAc;YAChB,SAAS;QACX;IACF;IAEA,MAAM,kBAAkB,IAAA,gNAAO,EAAC;QAC9B,OAAO,UAAU,IAAI,CAAC,CAAC,IAAM,IAAA,qJAAgB,EAAC,GAAG;IACnD,GAAG;QAAC;QAAW;KAAa;IAE5B,qBACE,8OAAC,4LAAO;QAAC,UAAU;QAAc,OAAO,iBAAiB;kBACvD,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC,4LAAO,CAAC,MAAM;oBACb,WAAU;oBACV,eAAY;8BAEX,CAAC,EAAE,IAAI,EAAE,iBACR;;8CACE,8OAAC;oCAAK,WAAU;8CACb,kBACG,gBAAgB,SAAS,GACzB;;;;;;8CAEN,8OAAC,wOAAa;oCACZ,WAAW,IAAA,sKAAG,EAAC,kCAAkC;wCAC/C,wBAAwB;oCAC1B;;;;;;;;;;;;;8BAKR,8OAAC,qMAAU;oBACT,IAAI,iNAAQ;oBACZ,OAAM;oBACN,WAAU;oBACV,SAAQ;8BAER,cAAA,8OAAC,4LAAO,CAAC,OAAO;wBACd,WAAU;wBACV,eAAY;kCAEX,UAAU,GAAG,CAAC,CAAC;4BACd,qBACE,8OAAC,4LAAO,CAAC,MAAM;gCAEb,OAAO,QAAQ,EAAE;gCACjB,WAAU;gCACV,eAAY;0CAEZ,cAAA,8OAAC;oCAAI,WAAU;;sDACb,8OAAC,oKAAK;4CACJ,SAAS,iBAAiB,OAAO,QAAQ,EAAE;4CAC3C,eAAY;;;;;;sDAEd,8OAAC;4CAAI,WAAU;;8DACb,8OAAC;oDAAK,WAAU;;wDACb,QAAQ,UAAU;wDAAC;wDAAE,QAAQ,SAAS;;;;;;;gDAExC,QAAQ,OAAO,kBACd,8OAAC;oDAAK,WAAU;8DACb,QAAQ,OAAO;;;;;;8DAGpB,8OAAC;oDAAI,WAAU;;sEACb,8OAAC;;gEACE,QAAQ,SAAS;gEACjB,QAAQ,SAAS,kBAChB,8OAAC;;wEAAK;wEAAG,QAAQ,SAAS;;;;;;;;;;;;;sEAG9B,8OAAC;;gEACE,QAAQ,WAAW;gEAAC;gEAAG,QAAQ,IAAI;;;;;;;sEAEtC,8OAAC;;gEACE,QAAQ,QAAQ,IAAI,GAAG,QAAQ,QAAQ,CAAC,EAAE,CAAC;gEAC3C,QAAQ,YAAY,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;+BA/B1B,QAAQ,EAAE;;;;;wBAsCrB;;;;;;;;;;;;;;;;;;;;;;AAMZ;uCAEe","debugId":null}},
    {"offset": {"line": 1276, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/checkout/components/shipping-address/index.tsx"],"sourcesContent":["import { HttpTypes } from \"@medusajs/types\"\nimport { Container } from \"@medusajs/ui\"\nimport Checkbox from \"@modules/common/components/checkbox\"\nimport Input from \"@modules/common/components/input\"\nimport { mapKeys } from \"lodash\"\nimport React, { useEffect, useMemo, useState } from \"react\"\nimport AddressSelect from \"../address-select\"\nimport CountrySelect from \"../country-select\"\n\nconst ShippingAddress = ({\n  customer,\n  cart,\n  checked,\n  onChange,\n}: {\n  customer: HttpTypes.StoreCustomer | null\n  cart: HttpTypes.StoreCart | null\n  checked: boolean\n  onChange: () => void\n}) => {\n  const [formData, setFormData] = useState<Record<string, any>>({\n    \"shipping_address.first_name\": cart?.shipping_address?.first_name || \"\",\n    \"shipping_address.last_name\": cart?.shipping_address?.last_name || \"\",\n    \"shipping_address.address_1\": cart?.shipping_address?.address_1 || \"\",\n    \"shipping_address.company\": cart?.shipping_address?.company || \"\",\n    \"shipping_address.postal_code\": cart?.shipping_address?.postal_code || \"\",\n    \"shipping_address.city\": cart?.shipping_address?.city || \"\",\n    \"shipping_address.country_code\": cart?.shipping_address?.country_code || \"\",\n    \"shipping_address.province\": cart?.shipping_address?.province || \"\",\n    \"shipping_address.phone\": cart?.shipping_address?.phone || \"\",\n    email: cart?.email || \"\",\n  })\n\n  const countriesInRegion = useMemo(\n    () => cart?.region?.countries?.map((c) => c.iso_2),\n    [cart?.region]\n  )\n\n  // check if customer has saved addresses that are in the current region\n  const addressesInRegion = useMemo(\n    () =>\n      customer?.addresses.filter(\n        (a) => a.country_code && countriesInRegion?.includes(a.country_code)\n      ),\n    [customer?.addresses, countriesInRegion]\n  )\n\n  const setFormAddress = (\n    address?: HttpTypes.StoreCartAddress,\n    email?: string\n  ) => {\n    address &&\n      setFormData((prevState: Record<string, any>) => ({\n        ...prevState,\n        \"shipping_address.first_name\": address?.first_name || \"\",\n        \"shipping_address.last_name\": address?.last_name || \"\",\n        \"shipping_address.address_1\": address?.address_1 || \"\",\n        \"shipping_address.company\": address?.company || \"\",\n        \"shipping_address.postal_code\": address?.postal_code || \"\",\n        \"shipping_address.city\": address?.city || \"\",\n        \"shipping_address.country_code\": address?.country_code || \"\",\n        \"shipping_address.province\": address?.province || \"\",\n        \"shipping_address.phone\": address?.phone || \"\",\n      }))\n\n    email &&\n      setFormData((prevState: Record<string, any>) => ({\n        ...prevState,\n        email: email,\n      }))\n  }\n\n  useEffect(() => {\n    // Ensure cart is not null and has a shipping_address before setting form data\n    if (cart && cart.shipping_address) {\n      setFormAddress(cart?.shipping_address, cart?.email)\n    }\n\n    if (cart && !cart.email && customer?.email) {\n      setFormAddress(undefined, customer.email)\n    }\n  }, [cart]) // Add cart as a dependency\n\n  const handleChange = (\n    e: React.ChangeEvent<\n      HTMLInputElement | HTMLInputElement | HTMLSelectElement\n    >\n  ) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    })\n  }\n\n  return (\n    <>\n      {customer && (addressesInRegion?.length || 0) > 0 && (\n        <Container className=\"mb-6 flex flex-col gap-y-4 p-5\">\n          <p className=\"text-small-regular\">\n            {`Hi ${customer.first_name}, do you want to use one of your saved addresses?`}\n          </p>\n          <AddressSelect\n            addresses={customer.addresses}\n            addressInput={\n              mapKeys(formData, (_, key) =>\n                key.replace(\"shipping_address.\", \"\")\n              ) as HttpTypes.StoreCartAddress\n            }\n            onSelect={setFormAddress}\n          />\n        </Container>\n      )}\n      <div className=\"grid grid-cols-2 gap-4\">\n        <Input\n          label=\"First name\"\n          name=\"shipping_address.first_name\"\n          autoComplete=\"given-name\"\n          value={formData[\"shipping_address.first_name\"]}\n          onChange={handleChange}\n          required\n          data-testid=\"shipping-first-name-input\"\n        />\n        <Input\n          label=\"Last name\"\n          name=\"shipping_address.last_name\"\n          autoComplete=\"family-name\"\n          value={formData[\"shipping_address.last_name\"]}\n          onChange={handleChange}\n          required\n          data-testid=\"shipping-last-name-input\"\n        />\n        <Input\n          label=\"Address\"\n          name=\"shipping_address.address_1\"\n          autoComplete=\"address-line1\"\n          value={formData[\"shipping_address.address_1\"]}\n          onChange={handleChange}\n          required\n          data-testid=\"shipping-address-input\"\n        />\n        <Input\n          label=\"Company\"\n          name=\"shipping_address.company\"\n          value={formData[\"shipping_address.company\"]}\n          onChange={handleChange}\n          autoComplete=\"organization\"\n          data-testid=\"shipping-company-input\"\n        />\n        <Input\n          label=\"Postal code\"\n          name=\"shipping_address.postal_code\"\n          autoComplete=\"postal-code\"\n          value={formData[\"shipping_address.postal_code\"]}\n          onChange={handleChange}\n          required\n          data-testid=\"shipping-postal-code-input\"\n        />\n        <Input\n          label=\"City\"\n          name=\"shipping_address.city\"\n          autoComplete=\"address-level2\"\n          value={formData[\"shipping_address.city\"]}\n          onChange={handleChange}\n          required\n          data-testid=\"shipping-city-input\"\n        />\n        <CountrySelect\n          name=\"shipping_address.country_code\"\n          autoComplete=\"country\"\n          region={cart?.region}\n          value={formData[\"shipping_address.country_code\"]}\n          onChange={handleChange}\n          required\n          data-testid=\"shipping-country-select\"\n        />\n        <Input\n          label=\"State / Province\"\n          name=\"shipping_address.province\"\n          autoComplete=\"address-level1\"\n          value={formData[\"shipping_address.province\"]}\n          onChange={handleChange}\n          data-testid=\"shipping-province-input\"\n        />\n      </div>\n      <div className=\"my-8\">\n        <Checkbox\n          label=\"Billing address same as shipping address\"\n          name=\"same_as_billing\"\n          checked={checked}\n          onChange={onChange}\n          data-testid=\"billing-address-checkbox\"\n        />\n      </div>\n      <div className=\"grid grid-cols-2 gap-4 mb-4\">\n        <Input\n          label=\"Email\"\n          name=\"email\"\n          type=\"email\"\n          title=\"Enter a valid email address.\"\n          autoComplete=\"email\"\n          value={formData.email}\n          onChange={handleChange}\n          required\n          data-testid=\"shipping-email-input\"\n        />\n        <Input\n          label=\"Phone\"\n          name=\"shipping_address.phone\"\n          autoComplete=\"tel\"\n          value={formData[\"shipping_address.phone\"]}\n          onChange={handleChange}\n          data-testid=\"shipping-phone-input\"\n        />\n      </div>\n    </>\n  )\n}\n\nexport default ShippingAddress\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1553, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/checkout/components/submit-button/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { Button } from \"@medusajs/ui\"\nimport React from \"react\"\nimport { useFormStatus } from \"react-dom\"\n\nexport function SubmitButton({\n  children,\n  variant = \"primary\",\n  className,\n  \"data-testid\": dataTestId,\n}: {\n  children: React.ReactNode\n  variant?: \"primary\" | \"secondary\" | \"transparent\" | \"danger\" | null\n  className?: string\n  \"data-testid\"?: string\n}) {\n  const { pending } = useFormStatus()\n\n  return (\n    <Button\n      size=\"large\"\n      className={className}\n      type=\"submit\"\n      isLoading={pending}\n      variant={variant || \"primary\"}\n      data-testid={dataTestId}\n    >\n      {children}\n    </Button>\n  )\n}\n"],"names":[],"mappings":";;;;;AAEA;AAEA;AAJA;;;;AAMO,SAAS,aAAa,EAC3B,QAAQ,EACR,UAAU,SAAS,EACnB,SAAS,EACT,eAAe,UAAU,EAM1B;IACC,MAAM,EAAE,OAAO,EAAE,GAAG,IAAA,6NAAa;IAEjC,qBACE,8OAAC,2LAAM;QACL,MAAK;QACL,WAAW;QACX,MAAK;QACL,WAAW;QACX,SAAS,WAAW;QACpB,eAAa;kBAEZ;;;;;;AAGP","debugId":null}},
    {"offset": {"line": 1584, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/checkout/components/addresses/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { setAddresses } from \"@lib/data/cart\"\nimport compareAddresses from \"@lib/util/compare-addresses\"\nimport { CheckCircleSolid } from \"@medusajs/icons\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { Heading, Text, useToggleState } from \"@medusajs/ui\"\nimport Divider from \"@modules/common/components/divider\"\nimport Spinner from \"@modules/common/icons/spinner\"\nimport { usePathname, useRouter, useSearchParams } from \"next/navigation\"\nimport { useActionState } from \"react\"\nimport BillingAddress from \"../billing_address\"\nimport ErrorMessage from \"../error-message\"\nimport ShippingAddress from \"../shipping-address\"\nimport { SubmitButton } from \"../submit-button\"\n\nconst Addresses = ({\n  cart,\n  customer,\n}: {\n  cart: HttpTypes.StoreCart | null\n  customer: HttpTypes.StoreCustomer | null\n}) => {\n  const searchParams = useSearchParams()\n  const router = useRouter()\n  const pathname = usePathname()\n\n  const isOpen = searchParams.get(\"step\") === \"address\"\n\n  const { state: sameAsBilling, toggle: toggleSameAsBilling } = useToggleState(\n    cart?.shipping_address && cart?.billing_address\n      ? compareAddresses(cart?.shipping_address, cart?.billing_address)\n      : true\n  )\n\n  const handleEdit = () => {\n    router.push(pathname + \"?step=address\")\n  }\n\n  const [message, formAction] = useActionState(setAddresses, null)\n\n  return (\n    <div className=\"bg-white\">\n      <div className=\"flex flex-row items-center justify-between mb-6\">\n        <Heading\n          level=\"h2\"\n          className=\"flex flex-row text-3xl-regular gap-x-2 items-baseline\"\n        >\n          Shipping Address\n          {!isOpen && <CheckCircleSolid />}\n        </Heading>\n        {!isOpen && cart?.shipping_address && (\n          <Text>\n            <button\n              onClick={handleEdit}\n              className=\"text-ui-fg-interactive hover:text-ui-fg-interactive-hover\"\n              data-testid=\"edit-address-button\"\n            >\n              Edit\n            </button>\n          </Text>\n        )}\n      </div>\n      {isOpen ? (\n        <form action={formAction}>\n          <div className=\"pb-8\">\n            <ShippingAddress\n              customer={customer}\n              checked={sameAsBilling}\n              onChange={toggleSameAsBilling}\n              cart={cart}\n            />\n\n            {!sameAsBilling && (\n              <div>\n                <Heading\n                  level=\"h2\"\n                  className=\"text-3xl-regular gap-x-4 pb-6 pt-8\"\n                >\n                  Billing address\n                </Heading>\n\n                <BillingAddress cart={cart} />\n              </div>\n            )}\n            <SubmitButton className=\"mt-6\" data-testid=\"submit-address-button\">\n              Continue to delivery\n            </SubmitButton>\n            <ErrorMessage error={message} data-testid=\"address-error-message\" />\n          </div>\n        </form>\n      ) : (\n        <div>\n          <div className=\"text-small-regular\">\n            {cart && cart.shipping_address ? (\n              <div className=\"flex items-start gap-x-8\">\n                <div className=\"flex items-start gap-x-1 w-full\">\n                  <div\n                    className=\"flex flex-col w-1/3\"\n                    data-testid=\"shipping-address-summary\"\n                  >\n                    <Text className=\"txt-medium-plus text-ui-fg-base mb-1\">\n                      Shipping Address\n                    </Text>\n                    <Text className=\"txt-medium text-ui-fg-subtle\">\n                      {cart.shipping_address.first_name}{\" \"}\n                      {cart.shipping_address.last_name}\n                    </Text>\n                    <Text className=\"txt-medium text-ui-fg-subtle\">\n                      {cart.shipping_address.address_1}{\" \"}\n                      {cart.shipping_address.address_2}\n                    </Text>\n                    <Text className=\"txt-medium text-ui-fg-subtle\">\n                      {cart.shipping_address.postal_code},{\" \"}\n                      {cart.shipping_address.city}\n                    </Text>\n                    <Text className=\"txt-medium text-ui-fg-subtle\">\n                      {cart.shipping_address.country_code?.toUpperCase()}\n                    </Text>\n                  </div>\n\n                  <div\n                    className=\"flex flex-col w-1/3 \"\n                    data-testid=\"shipping-contact-summary\"\n                  >\n                    <Text className=\"txt-medium-plus text-ui-fg-base mb-1\">\n                      Contact\n                    </Text>\n                    <Text className=\"txt-medium text-ui-fg-subtle\">\n                      {cart.shipping_address.phone}\n                    </Text>\n                    <Text className=\"txt-medium text-ui-fg-subtle\">\n                      {cart.email}\n                    </Text>\n                  </div>\n\n                  <div\n                    className=\"flex flex-col w-1/3\"\n                    data-testid=\"billing-address-summary\"\n                  >\n                    <Text className=\"txt-medium-plus text-ui-fg-base mb-1\">\n                      Billing Address\n                    </Text>\n\n                    {sameAsBilling ? (\n                      <Text className=\"txt-medium text-ui-fg-subtle\">\n                        Billing and delivery address are the same.\n                      </Text>\n                    ) : (\n                      <>\n                        <Text className=\"txt-medium text-ui-fg-subtle\">\n                          {cart.billing_address?.first_name}{\" \"}\n                          {cart.billing_address?.last_name}\n                        </Text>\n                        <Text className=\"txt-medium text-ui-fg-subtle\">\n                          {cart.billing_address?.address_1}{\" \"}\n                          {cart.billing_address?.address_2}\n                        </Text>\n                        <Text className=\"txt-medium text-ui-fg-subtle\">\n                          {cart.billing_address?.postal_code},{\" \"}\n                          {cart.billing_address?.city}\n                        </Text>\n                        <Text className=\"txt-medium text-ui-fg-subtle\">\n                          {cart.billing_address?.country_code?.toUpperCase()}\n                        </Text>\n                      </>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div>\n                <Spinner />\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      <Divider className=\"mt-8\" />\n    </div>\n  )\n}\n\nexport default Addresses\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1966, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/data/cart.ts"],"sourcesContent":["\"use server\"\n\nimport { sdk } from \"@lib/config\"\nimport medusaError from \"@lib/util/medusa-error\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { revalidateTag } from \"next/cache\"\nimport { redirect } from \"next/navigation\"\nimport {\n  getAuthHeaders,\n  getCacheOptions,\n  getCacheTag,\n  getCartId,\n  removeCartId,\n  setCartId,\n} from \"./cookies\"\nimport { getRegion } from \"./regions\"\n\n/**\n * Retrieves a cart by its ID. If no ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to retrieve.\n * @returns The cart object if found, or null if not found.\n */\nexport async function retrieveCart(cartId?: string, fields?: string) {\n  const id = cartId || (await getCartId())\n  fields ??= \"*items, *region, *items.product, *items.variant, *items.thumbnail, *items.metadata, +items.total, *promotions, +shipping_methods.name\"\n\n  if (!id) {\n    return null\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const next = {\n    ...(await getCacheOptions(\"carts\")),\n  }\n\n  return await sdk.client\n    .fetch<HttpTypes.StoreCartResponse>(`/store/carts/${id}`, {\n      method: \"GET\",\n      query: {\n        fields\n      },\n      headers,\n      next,\n      cache: \"force-cache\",\n    })\n    .then(({ cart }: { cart: HttpTypes.StoreCart }) => cart)\n    .catch(() => null)\n}\n\nexport async function getOrSetCart(countryCode: string) {\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  let cart = await retrieveCart(undefined, 'id,region_id')\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  if (!cart) {\n    const cartResp = await sdk.store.cart.create(\n      { region_id: region.id },\n      {},\n      headers\n    )\n    cart = cartResp.cart\n\n    await setCartId(cart.id)\n\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  if (cart && cart?.region_id !== region.id) {\n    await sdk.store.cart.update(cart.id, { region_id: region.id }, {}, headers)\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  return cart\n}\n\nexport async function updateCart(data: HttpTypes.StoreUpdateCart) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found, please create one before updating\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, data, {}, headers)\n    .then(async ({ cart }: { cart: HttpTypes.StoreCart }) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n\n      return cart\n    })\n    .catch(medusaError)\n}\n\nexport async function addToCart({\n  variantId,\n  quantity,\n  countryCode,\n}: {\n  variantId: string\n  quantity: number\n  countryCode: string\n}) {\n  if (!variantId) {\n    throw new Error(\"Missing variant ID when adding to cart\")\n  }\n\n  const cart = await getOrSetCart(countryCode)\n\n  if (!cart) {\n    throw new Error(\"Error retrieving or creating cart\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .createLineItem(\n      cart.id,\n      {\n        variant_id: variantId,\n        quantity,\n      },\n      {},\n      headers\n    )\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function updateLineItem({\n  lineId,\n  quantity,\n}: {\n  lineId: string\n  quantity: number\n}) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when updating line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when updating line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .updateLineItem(cartId, lineId, { quantity }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function deleteLineItem(lineId: string) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when deleting line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when deleting line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .deleteLineItem(cartId, lineId, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function setShippingMethod({\n  cartId,\n  shippingMethodId,\n}: {\n  cartId: string\n  shippingMethodId: string\n}) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .addShippingMethod(cartId, { option_id: shippingMethodId }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function initiatePaymentSession(\n  cart: HttpTypes.StoreCart,\n  data: HttpTypes.StoreInitializePaymentSession\n) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.payment\n    .initiatePaymentSession(cart, data, {}, headers)\n    .then(async (resp) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return resp\n    })\n    .catch(medusaError)\n}\n\nexport async function applyPromotions(codes: string[]) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, { promo_codes: codes }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function applyGiftCard(code: string) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, { gift_cards: [{ code }] }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function removeDiscount(code: string) {\n  // const cartId = getCartId()\n  // if (!cartId) return \"No cartId cookie found\"\n  // try {\n  //   await deleteDiscount(cartId, code)\n  //   revalidateTag(\"cart\")\n  // } catch (error: any) {\n  //   throw error\n  // }\n}\n\nexport async function removeGiftCard(\n  codeToRemove: string,\n  giftCards: any[]\n  // giftCards: GiftCard[]\n) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, {\n  //       gift_cards: [...giftCards]\n  //         .filter((gc) => gc.code !== codeToRemove)\n  //         .map((gc) => ({ code: gc.code })),\n  //     }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function submitPromotionForm(\n  currentState: unknown,\n  formData: FormData\n) {\n  const code = formData.get(\"code\") as string\n  try {\n    await applyPromotions([code])\n  } catch (e: any) {\n    return e.message\n  }\n}\n\n// TODO: Pass a POJO instead of a form entity here\nexport async function setAddresses(currentState: unknown, formData: FormData) {\n  try {\n    if (!formData) {\n      throw new Error(\"No form data found when setting addresses\")\n    }\n    const cartId = getCartId()\n    if (!cartId) {\n      throw new Error(\"No existing cart found when setting addresses\")\n    }\n\n    const data = {\n      shipping_address: {\n        first_name: formData.get(\"shipping_address.first_name\"),\n        last_name: formData.get(\"shipping_address.last_name\"),\n        address_1: formData.get(\"shipping_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"shipping_address.company\"),\n        postal_code: formData.get(\"shipping_address.postal_code\"),\n        city: formData.get(\"shipping_address.city\"),\n        country_code: formData.get(\"shipping_address.country_code\"),\n        province: formData.get(\"shipping_address.province\"),\n        phone: formData.get(\"shipping_address.phone\"),\n      },\n      email: formData.get(\"email\"),\n    } as any\n\n    const sameAsBilling = formData.get(\"same_as_billing\")\n    if (sameAsBilling === \"on\") data.billing_address = data.shipping_address\n\n    if (sameAsBilling !== \"on\")\n      data.billing_address = {\n        first_name: formData.get(\"billing_address.first_name\"),\n        last_name: formData.get(\"billing_address.last_name\"),\n        address_1: formData.get(\"billing_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"billing_address.company\"),\n        postal_code: formData.get(\"billing_address.postal_code\"),\n        city: formData.get(\"billing_address.city\"),\n        country_code: formData.get(\"billing_address.country_code\"),\n        province: formData.get(\"billing_address.province\"),\n        phone: formData.get(\"billing_address.phone\"),\n      }\n    await updateCart(data)\n  } catch (e: any) {\n    return e.message\n  }\n\n  redirect(\n    `/${formData.get(\"shipping_address.country_code\")}/checkout?step=delivery`\n  )\n}\n\n/**\n * Places an order for a cart. If no cart ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to place an order for.\n * @returns The cart object if the order was successful, or null if not.\n */\nexport async function placeOrder(cartId?: string) {\n  const id = cartId || (await getCartId())\n\n  if (!id) {\n    throw new Error(\"No existing cart found when placing an order\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const cartRes = await sdk.store.cart\n    .complete(id, {}, headers)\n    .then(async (cartRes) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return cartRes\n    })\n    .catch(medusaError)\n\n  if (cartRes?.type === \"order\") {\n    const countryCode =\n      cartRes.order.shipping_address?.country_code?.toLowerCase()\n\n    const orderCacheTag = await getCacheTag(\"orders\")\n    revalidateTag(orderCacheTag)\n\n    removeCartId()\n    redirect(`/${countryCode}/order/${cartRes?.order.id}/confirmed`)\n  }\n\n  return cartRes.cart\n}\n\n/**\n * Updates the countrycode param and revalidates the regions cache\n * @param regionId\n * @param countryCode\n */\nexport async function updateRegion(countryCode: string, currentPath: string) {\n  const cartId = await getCartId()\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  if (cartId) {\n    await updateCart({ region_id: region.id })\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  const regionCacheTag = await getCacheTag(\"regions\")\n  revalidateTag(regionCacheTag)\n\n  const productsCacheTag = await getCacheTag(\"products\")\n  revalidateTag(productsCacheTag)\n\n  redirect(`/${countryCode}${currentPath}`)\n}\n\nexport async function listCartOptions() {\n  const cartId = await getCartId()\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n  const next = {\n    ...(await getCacheOptions(\"shippingOptions\")),\n  }\n\n  return await sdk.client.fetch<{\n    shipping_options: HttpTypes.StoreCartShippingOption[]\n  }>(\"/store/shipping-options\", {\n    query: { cart_id: cartId },\n    next,\n    headers,\n    cache: \"force-cache\",\n  })\n}\n"],"names":[],"mappings":";;;;;;;IA4OsB,yBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1978, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/skeletons/components/skeleton-card-details/index.tsx"],"sourcesContent":["const SkeletonCardDetails = () => {\n  return (\n    <div className=\"flex flex-col gap-1 my-4 transition-all duration-150 ease-in-out\">\n      <div className=\"h-4 bg-ui-bg-component-pressed rounded-md w-1/4 animate-pulse mb-1\"></div>\n      <div className=\"pt-3 pb-1 block w-full h-11 px-4 mt-0 bg-ui-bg-field border rounded-md appearance-none border-ui-border-base animate-pulse\" />\n    </div>\n  )\n}\n\nexport default SkeletonCardDetails\n"],"names":[],"mappings":";;;;;;AAAA,MAAM,sBAAsB;IAC1B,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;;;;;0BACf,8OAAC;gBAAI,WAAU;;;;;;;;;;;;AAGrB;uCAEe","debugId":null}},
    {"offset": {"line": 2014, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/checkout/components/payment-test/index.tsx"],"sourcesContent":["import { Badge } from \"@medusajs/ui\"\n\nconst PaymentTest = ({ className }: { className?: string }) => {\n  return (\n    <Badge color=\"orange\" className={className}>\n      <span className=\"font-semibold\">Attention:</span> For testing purposes\n      only.\n    </Badge>\n  )\n}\n\nexport default PaymentTest\n"],"names":[],"mappings":";;;;;AAAA;;;AAEA,MAAM,cAAc,CAAC,EAAE,SAAS,EAA0B;IACxD,qBACE,8OAAC,wLAAK;QAAC,OAAM;QAAS,WAAW;;0BAC/B,8OAAC;gBAAK,WAAU;0BAAgB;;;;;;YAAiB;;;;;;;AAIvD;uCAEe","debugId":null}},
    {"offset": {"line": 2048, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/checkout/components/payment-container/index.tsx"],"sourcesContent":["import { Radio as RadioGroupOption } from \"@headlessui/react\"\nimport { Text, clx } from \"@medusajs/ui\"\nimport React, { useContext, useMemo, type JSX } from \"react\"\n\nimport Radio from \"@modules/common/components/radio\"\n\nimport { isManual } from \"@lib/constants\"\nimport SkeletonCardDetails from \"@modules/skeletons/components/skeleton-card-details\"\nimport { CardElement } from \"@stripe/react-stripe-js\"\nimport { StripeCardElementOptions } from \"@stripe/stripe-js\"\nimport PaymentTest from \"../payment-test\"\nimport { StripeContext } from \"../payment-wrapper/stripe-wrapper\"\n\ntype PaymentContainerProps = {\n  paymentProviderId: string\n  selectedPaymentOptionId: string | null\n  disabled?: boolean\n  paymentInfoMap: Record<string, { title: string; icon: JSX.Element }>\n  children?: React.ReactNode\n}\n\nconst PaymentContainer: React.FC<PaymentContainerProps> = ({\n  paymentProviderId,\n  selectedPaymentOptionId,\n  paymentInfoMap,\n  disabled = false,\n  children,\n}) => {\n  const isDevelopment = process.env.NODE_ENV === \"development\"\n\n  return (\n    <RadioGroupOption\n      key={paymentProviderId}\n      value={paymentProviderId}\n      disabled={disabled}\n      className={clx(\n        \"flex flex-col gap-y-2 text-small-regular cursor-pointer py-4 border rounded-rounded px-8 mb-2 hover:shadow-borders-interactive-with-active\",\n        {\n          \"border-ui-border-interactive\":\n            selectedPaymentOptionId === paymentProviderId,\n        }\n      )}\n    >\n      <div className=\"flex items-center justify-between \">\n        <div className=\"flex items-center gap-x-4\">\n          <Radio checked={selectedPaymentOptionId === paymentProviderId} />\n          <Text className=\"text-base-regular\">\n            {paymentInfoMap[paymentProviderId]?.title || paymentProviderId}\n          </Text>\n          {isManual(paymentProviderId) && isDevelopment && (\n            <PaymentTest className=\"hidden small:block\" />\n          )}\n        </div>\n        <span className=\"justify-self-end text-ui-fg-base\">\n          {paymentInfoMap[paymentProviderId]?.icon}\n        </span>\n      </div>\n      {isManual(paymentProviderId) && isDevelopment && (\n        <PaymentTest className=\"small:hidden text-[10px]\" />\n      )}\n      {children}\n    </RadioGroupOption>\n  )\n}\n\nexport default PaymentContainer\n\nexport const StripeCardContainer = ({\n  paymentProviderId,\n  selectedPaymentOptionId,\n  paymentInfoMap,\n  disabled = false,\n  setCardBrand,\n  setError,\n  setCardComplete,\n}: Omit<PaymentContainerProps, \"children\"> & {\n  setCardBrand: (brand: string) => void\n  setError: (error: string | null) => void\n  setCardComplete: (complete: boolean) => void\n}) => {\n  const stripeReady = useContext(StripeContext)\n\n  const useOptions: StripeCardElementOptions = useMemo(() => {\n    return {\n      style: {\n        base: {\n          fontFamily: \"Inter, sans-serif\",\n          color: \"#424270\",\n          \"::placeholder\": {\n            color: \"rgb(107 114 128)\",\n          },\n        },\n      },\n      classes: {\n        base: \"pt-3 pb-1 block w-full h-11 px-4 mt-0 bg-ui-bg-field border rounded-md appearance-none focus:outline-none focus:ring-0 focus:shadow-borders-interactive-with-active border-ui-border-base hover:bg-ui-bg-field-hover transition-all duration-300 ease-in-out\",\n      },\n    }\n  }, [])\n\n  return (\n    <PaymentContainer\n      paymentProviderId={paymentProviderId}\n      selectedPaymentOptionId={selectedPaymentOptionId}\n      paymentInfoMap={paymentInfoMap}\n      disabled={disabled}\n    >\n      {selectedPaymentOptionId === paymentProviderId &&\n        (stripeReady ? (\n          <div className=\"my-4 transition-all duration-150 ease-in-out\">\n            <Text className=\"txt-medium-plus text-ui-fg-base mb-1\">\n              Enter your card details:\n            </Text>\n            <CardElement\n              options={useOptions as StripeCardElementOptions}\n              onChange={(e) => {\n                setCardBrand(\n                  e.brand && e.brand.charAt(0).toUpperCase() + e.brand.slice(1)\n                )\n                setError(e.error?.message || null)\n                setCardComplete(e.complete)\n              }}\n            />\n          </div>\n        ) : (\n          <SkeletonCardDetails />\n        ))}\n    </PaymentContainer>\n  )\n}\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;AAUA,MAAM,mBAAoD,CAAC,EACzD,iBAAiB,EACjB,uBAAuB,EACvB,cAAc,EACd,WAAW,KAAK,EAChB,QAAQ,EACT;IACC,MAAM,gBAAgB,oDAAyB;IAE/C,qBACE,8OAAC,wMAAgB;QAEf,OAAO;QACP,UAAU;QACV,WAAW,IAAA,sKAAG,EACZ,8IACA;YACE,gCACE,4BAA4B;QAChC;;0BAGF,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC,oKAAK;gCAAC,SAAS,4BAA4B;;;;;;0CAC5C,8OAAC,qLAAI;gCAAC,WAAU;0CACb,cAAc,CAAC,kBAAkB,EAAE,SAAS;;;;;;4BAE9C,IAAA,oIAAQ,EAAC,sBAAsB,+BAC9B,8OAAC,gLAAW;gCAAC,WAAU;;;;;;;;;;;;kCAG3B,8OAAC;wBAAK,WAAU;kCACb,cAAc,CAAC,kBAAkB,EAAE;;;;;;;;;;;;YAGvC,IAAA,oIAAQ,EAAC,sBAAsB,+BAC9B,8OAAC,gLAAW;gBAAC,WAAU;;;;;;YAExB;;OA5BI;;;;;AA+BX;uCAEe;AAER,MAAM,sBAAsB,CAAC,EAClC,iBAAiB,EACjB,uBAAuB,EACvB,cAAc,EACd,WAAW,KAAK,EAChB,YAAY,EACZ,QAAQ,EACR,eAAe,EAKhB;IACC,MAAM,cAAc,IAAA,mNAAU,EAAC,qMAAa;IAE5C,MAAM,aAAuC,IAAA,gNAAO,EAAC;QACnD,OAAO;YACL,OAAO;gBACL,MAAM;oBACJ,YAAY;oBACZ,OAAO;oBACP,iBAAiB;wBACf,OAAO;oBACT;gBACF;YACF;YACA,SAAS;gBACP,MAAM;YACR;QACF;IACF,GAAG,EAAE;IAEL,qBACE,8OAAC;QACC,mBAAmB;QACnB,yBAAyB;QACzB,gBAAgB;QAChB,UAAU;kBAET,4BAA4B,qBAC3B,CAAC,4BACC,8OAAC;YAAI,WAAU;;8BACb,8OAAC,qLAAI;oBAAC,WAAU;8BAAuC;;;;;;8BAGvD,8OAAC,kMAAW;oBACV,SAAS;oBACT,UAAU,CAAC;wBACT,aACE,EAAE,KAAK,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG,WAAW,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC;wBAE7D,SAAS,EAAE,KAAK,EAAE,WAAW;wBAC7B,gBAAgB,EAAE,QAAQ;oBAC5B;;;;;;;;;;;qEAIJ,8OAAC,6LAAmB;;;;oDACrB;;;;;;AAGT","debugId":null}},
    {"offset": {"line": 2214, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/checkout/components/payment/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { RadioGroup } from \"@headlessui/react\"\nimport { isStripe as isStripeFunc, paymentInfoMap } from \"@lib/constants\"\nimport { initiatePaymentSession } from \"@lib/data/cart\"\nimport { CheckCircleSolid, CreditCard } from \"@medusajs/icons\"\nimport { Button, Container, Heading, Text, clx } from \"@medusajs/ui\"\nimport ErrorMessage from \"@modules/checkout/components/error-message\"\nimport PaymentContainer, {\n  StripeCardContainer,\n} from \"@modules/checkout/components/payment-container\"\nimport Divider from \"@modules/common/components/divider\"\nimport { usePathname, useRouter, useSearchParams } from \"next/navigation\"\nimport { useCallback, useEffect, useState } from \"react\"\n\nconst Payment = ({\n  cart,\n  availablePaymentMethods,\n}: {\n  cart: any\n  availablePaymentMethods: any[]\n}) => {\n  const activeSession = cart.payment_collection?.payment_sessions?.find(\n    (paymentSession: any) => paymentSession.status === \"pending\"\n  )\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [cardBrand, setCardBrand] = useState<string | null>(null)\n  const [cardComplete, setCardComplete] = useState(false)\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(\n    activeSession?.provider_id ?? \"\"\n  )\n\n  const searchParams = useSearchParams()\n  const router = useRouter()\n  const pathname = usePathname()\n\n  const isOpen = searchParams.get(\"step\") === \"payment\"\n\n  const isStripe = isStripeFunc(selectedPaymentMethod)\n\n  const setPaymentMethod = async (method: string) => {\n    setError(null)\n    setSelectedPaymentMethod(method)\n    if (isStripeFunc(method)) {\n      await initiatePaymentSession(cart, {\n        provider_id: method,\n      })\n    }\n  }\n\n  const paidByGiftcard =\n    cart?.gift_cards && cart?.gift_cards?.length > 0 && cart?.total === 0\n\n  const paymentReady =\n    (activeSession && cart?.shipping_methods.length !== 0) || paidByGiftcard\n\n  const createQueryString = useCallback(\n    (name: string, value: string) => {\n      const params = new URLSearchParams(searchParams)\n      params.set(name, value)\n\n      return params.toString()\n    },\n    [searchParams]\n  )\n\n  const handleEdit = () => {\n    router.push(pathname + \"?\" + createQueryString(\"step\", \"payment\"), {\n      scroll: false,\n    })\n  }\n\n  const handleSubmit = async () => {\n    setIsLoading(true)\n    try {\n      const shouldInputCard =\n        isStripeFunc(selectedPaymentMethod) && !activeSession\n\n      const checkActiveSession =\n        activeSession?.provider_id === selectedPaymentMethod\n\n      if (!checkActiveSession) {\n        await initiatePaymentSession(cart, {\n          provider_id: selectedPaymentMethod,\n        })\n      }\n\n      if (!shouldInputCard) {\n        return router.push(\n          pathname + \"?\" + createQueryString(\"step\", \"review\"),\n          {\n            scroll: false,\n          }\n        )\n      }\n    } catch (err: any) {\n      setError(err.message)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    setError(null)\n  }, [isOpen])\n\n  return (\n    <div className=\"bg-white\">\n      <div className=\"flex flex-row items-center justify-between mb-6\">\n        <Heading\n          level=\"h2\"\n          className={clx(\n            \"flex flex-row text-3xl-regular gap-x-2 items-baseline\",\n            {\n              \"opacity-50 pointer-events-none select-none\":\n                !isOpen && !paymentReady,\n            }\n          )}\n        >\n          Payment\n          {!isOpen && paymentReady && <CheckCircleSolid />}\n        </Heading>\n        {!isOpen && paymentReady && (\n          <Text>\n            <button\n              onClick={handleEdit}\n              className=\"text-ui-fg-interactive hover:text-ui-fg-interactive-hover\"\n              data-testid=\"edit-payment-button\"\n            >\n              Edit\n            </button>\n          </Text>\n        )}\n      </div>\n      <div>\n        <div className={isOpen ? \"block\" : \"hidden\"}>\n          {!paidByGiftcard && availablePaymentMethods?.length && (\n            <>\n              <RadioGroup\n                value={selectedPaymentMethod}\n                onChange={(value: string) => setPaymentMethod(value)}\n              >\n                {availablePaymentMethods.map((paymentMethod) => (\n                  <div key={paymentMethod.id}>\n                    {isStripeFunc(paymentMethod.id) ? (\n                      <StripeCardContainer\n                        paymentProviderId={paymentMethod.id}\n                        selectedPaymentOptionId={selectedPaymentMethod}\n                        paymentInfoMap={paymentInfoMap}\n                        setCardBrand={setCardBrand}\n                        setError={setError}\n                        setCardComplete={setCardComplete}\n                      />\n                    ) : (\n                      <PaymentContainer\n                        paymentInfoMap={paymentInfoMap}\n                        paymentProviderId={paymentMethod.id}\n                        selectedPaymentOptionId={selectedPaymentMethod}\n                      />\n                    )}\n                  </div>\n                ))}\n              </RadioGroup>\n            </>\n          )}\n\n          {paidByGiftcard && (\n            <div className=\"flex flex-col w-1/3\">\n              <Text className=\"txt-medium-plus text-ui-fg-base mb-1\">\n                Payment method\n              </Text>\n              <Text\n                className=\"txt-medium text-ui-fg-subtle\"\n                data-testid=\"payment-method-summary\"\n              >\n                Gift card\n              </Text>\n            </div>\n          )}\n\n          <ErrorMessage\n            error={error}\n            data-testid=\"payment-method-error-message\"\n          />\n\n          <Button\n            size=\"large\"\n            className=\"mt-6\"\n            onClick={handleSubmit}\n            isLoading={isLoading}\n            disabled={\n              (isStripe && !cardComplete) ||\n              (!selectedPaymentMethod && !paidByGiftcard)\n            }\n            data-testid=\"submit-payment-button\"\n          >\n            {!activeSession && isStripeFunc(selectedPaymentMethod)\n              ? \" Enter card details\"\n              : \"Continue to review\"}\n          </Button>\n        </div>\n\n        <div className={isOpen ? \"hidden\" : \"block\"}>\n          {cart && paymentReady && activeSession ? (\n            <div className=\"flex items-start gap-x-1 w-full\">\n              <div className=\"flex flex-col w-1/3\">\n                <Text className=\"txt-medium-plus text-ui-fg-base mb-1\">\n                  Payment method\n                </Text>\n                <Text\n                  className=\"txt-medium text-ui-fg-subtle\"\n                  data-testid=\"payment-method-summary\"\n                >\n                  {paymentInfoMap[activeSession?.provider_id]?.title ||\n                    activeSession?.provider_id}\n                </Text>\n              </div>\n              <div className=\"flex flex-col w-1/3\">\n                <Text className=\"txt-medium-plus text-ui-fg-base mb-1\">\n                  Payment details\n                </Text>\n                <div\n                  className=\"flex gap-2 txt-medium text-ui-fg-subtle items-center\"\n                  data-testid=\"payment-details-summary\"\n                >\n                  <Container className=\"flex items-center h-7 w-fit p-2 bg-ui-button-neutral-hover\">\n                    {paymentInfoMap[selectedPaymentMethod]?.icon || (\n                      <CreditCard />\n                    )}\n                  </Container>\n                  <Text>\n                    {isStripeFunc(selectedPaymentMethod) && cardBrand\n                      ? cardBrand\n                      : \"Another step will appear\"}\n                  </Text>\n                </div>\n              </div>\n            </div>\n          ) : paidByGiftcard ? (\n            <div className=\"flex flex-col w-1/3\">\n              <Text className=\"txt-medium-plus text-ui-fg-base mb-1\">\n                Payment method\n              </Text>\n              <Text\n                className=\"txt-medium text-ui-fg-subtle\"\n                data-testid=\"payment-method-summary\"\n              >\n                Gift card\n              </Text>\n            </div>\n          ) : null}\n        </div>\n      </div>\n      <Divider className=\"mt-8\" />\n    </div>\n  )\n}\n\nexport default Payment\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2585, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/data/cart.ts"],"sourcesContent":["\"use server\"\n\nimport { sdk } from \"@lib/config\"\nimport medusaError from \"@lib/util/medusa-error\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { revalidateTag } from \"next/cache\"\nimport { redirect } from \"next/navigation\"\nimport {\n  getAuthHeaders,\n  getCacheOptions,\n  getCacheTag,\n  getCartId,\n  removeCartId,\n  setCartId,\n} from \"./cookies\"\nimport { getRegion } from \"./regions\"\n\n/**\n * Retrieves a cart by its ID. If no ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to retrieve.\n * @returns The cart object if found, or null if not found.\n */\nexport async function retrieveCart(cartId?: string, fields?: string) {\n  const id = cartId || (await getCartId())\n  fields ??= \"*items, *region, *items.product, *items.variant, *items.thumbnail, *items.metadata, +items.total, *promotions, +shipping_methods.name\"\n\n  if (!id) {\n    return null\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const next = {\n    ...(await getCacheOptions(\"carts\")),\n  }\n\n  return await sdk.client\n    .fetch<HttpTypes.StoreCartResponse>(`/store/carts/${id}`, {\n      method: \"GET\",\n      query: {\n        fields\n      },\n      headers,\n      next,\n      cache: \"force-cache\",\n    })\n    .then(({ cart }: { cart: HttpTypes.StoreCart }) => cart)\n    .catch(() => null)\n}\n\nexport async function getOrSetCart(countryCode: string) {\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  let cart = await retrieveCart(undefined, 'id,region_id')\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  if (!cart) {\n    const cartResp = await sdk.store.cart.create(\n      { region_id: region.id },\n      {},\n      headers\n    )\n    cart = cartResp.cart\n\n    await setCartId(cart.id)\n\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  if (cart && cart?.region_id !== region.id) {\n    await sdk.store.cart.update(cart.id, { region_id: region.id }, {}, headers)\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  return cart\n}\n\nexport async function updateCart(data: HttpTypes.StoreUpdateCart) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found, please create one before updating\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, data, {}, headers)\n    .then(async ({ cart }: { cart: HttpTypes.StoreCart }) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n\n      return cart\n    })\n    .catch(medusaError)\n}\n\nexport async function addToCart({\n  variantId,\n  quantity,\n  countryCode,\n}: {\n  variantId: string\n  quantity: number\n  countryCode: string\n}) {\n  if (!variantId) {\n    throw new Error(\"Missing variant ID when adding to cart\")\n  }\n\n  const cart = await getOrSetCart(countryCode)\n\n  if (!cart) {\n    throw new Error(\"Error retrieving or creating cart\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .createLineItem(\n      cart.id,\n      {\n        variant_id: variantId,\n        quantity,\n      },\n      {},\n      headers\n    )\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function updateLineItem({\n  lineId,\n  quantity,\n}: {\n  lineId: string\n  quantity: number\n}) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when updating line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when updating line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .updateLineItem(cartId, lineId, { quantity }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function deleteLineItem(lineId: string) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when deleting line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when deleting line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .deleteLineItem(cartId, lineId, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function setShippingMethod({\n  cartId,\n  shippingMethodId,\n}: {\n  cartId: string\n  shippingMethodId: string\n}) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .addShippingMethod(cartId, { option_id: shippingMethodId }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function initiatePaymentSession(\n  cart: HttpTypes.StoreCart,\n  data: HttpTypes.StoreInitializePaymentSession\n) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.payment\n    .initiatePaymentSession(cart, data, {}, headers)\n    .then(async (resp) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return resp\n    })\n    .catch(medusaError)\n}\n\nexport async function applyPromotions(codes: string[]) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, { promo_codes: codes }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function applyGiftCard(code: string) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, { gift_cards: [{ code }] }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function removeDiscount(code: string) {\n  // const cartId = getCartId()\n  // if (!cartId) return \"No cartId cookie found\"\n  // try {\n  //   await deleteDiscount(cartId, code)\n  //   revalidateTag(\"cart\")\n  // } catch (error: any) {\n  //   throw error\n  // }\n}\n\nexport async function removeGiftCard(\n  codeToRemove: string,\n  giftCards: any[]\n  // giftCards: GiftCard[]\n) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, {\n  //       gift_cards: [...giftCards]\n  //         .filter((gc) => gc.code !== codeToRemove)\n  //         .map((gc) => ({ code: gc.code })),\n  //     }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function submitPromotionForm(\n  currentState: unknown,\n  formData: FormData\n) {\n  const code = formData.get(\"code\") as string\n  try {\n    await applyPromotions([code])\n  } catch (e: any) {\n    return e.message\n  }\n}\n\n// TODO: Pass a POJO instead of a form entity here\nexport async function setAddresses(currentState: unknown, formData: FormData) {\n  try {\n    if (!formData) {\n      throw new Error(\"No form data found when setting addresses\")\n    }\n    const cartId = getCartId()\n    if (!cartId) {\n      throw new Error(\"No existing cart found when setting addresses\")\n    }\n\n    const data = {\n      shipping_address: {\n        first_name: formData.get(\"shipping_address.first_name\"),\n        last_name: formData.get(\"shipping_address.last_name\"),\n        address_1: formData.get(\"shipping_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"shipping_address.company\"),\n        postal_code: formData.get(\"shipping_address.postal_code\"),\n        city: formData.get(\"shipping_address.city\"),\n        country_code: formData.get(\"shipping_address.country_code\"),\n        province: formData.get(\"shipping_address.province\"),\n        phone: formData.get(\"shipping_address.phone\"),\n      },\n      email: formData.get(\"email\"),\n    } as any\n\n    const sameAsBilling = formData.get(\"same_as_billing\")\n    if (sameAsBilling === \"on\") data.billing_address = data.shipping_address\n\n    if (sameAsBilling !== \"on\")\n      data.billing_address = {\n        first_name: formData.get(\"billing_address.first_name\"),\n        last_name: formData.get(\"billing_address.last_name\"),\n        address_1: formData.get(\"billing_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"billing_address.company\"),\n        postal_code: formData.get(\"billing_address.postal_code\"),\n        city: formData.get(\"billing_address.city\"),\n        country_code: formData.get(\"billing_address.country_code\"),\n        province: formData.get(\"billing_address.province\"),\n        phone: formData.get(\"billing_address.phone\"),\n      }\n    await updateCart(data)\n  } catch (e: any) {\n    return e.message\n  }\n\n  redirect(\n    `/${formData.get(\"shipping_address.country_code\")}/checkout?step=delivery`\n  )\n}\n\n/**\n * Places an order for a cart. If no cart ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to place an order for.\n * @returns The cart object if the order was successful, or null if not.\n */\nexport async function placeOrder(cartId?: string) {\n  const id = cartId || (await getCartId())\n\n  if (!id) {\n    throw new Error(\"No existing cart found when placing an order\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const cartRes = await sdk.store.cart\n    .complete(id, {}, headers)\n    .then(async (cartRes) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return cartRes\n    })\n    .catch(medusaError)\n\n  if (cartRes?.type === \"order\") {\n    const countryCode =\n      cartRes.order.shipping_address?.country_code?.toLowerCase()\n\n    const orderCacheTag = await getCacheTag(\"orders\")\n    revalidateTag(orderCacheTag)\n\n    removeCartId()\n    redirect(`/${countryCode}/order/${cartRes?.order.id}/confirmed`)\n  }\n\n  return cartRes.cart\n}\n\n/**\n * Updates the countrycode param and revalidates the regions cache\n * @param regionId\n * @param countryCode\n */\nexport async function updateRegion(countryCode: string, currentPath: string) {\n  const cartId = await getCartId()\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  if (cartId) {\n    await updateCart({ region_id: region.id })\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  const regionCacheTag = await getCacheTag(\"regions\")\n  revalidateTag(regionCacheTag)\n\n  const productsCacheTag = await getCacheTag(\"products\")\n  revalidateTag(productsCacheTag)\n\n  redirect(`/${countryCode}${currentPath}`)\n}\n\nexport async function listCartOptions() {\n  const cartId = await getCartId()\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n  const next = {\n    ...(await getCacheOptions(\"shippingOptions\")),\n  }\n\n  return await sdk.client.fetch<{\n    shipping_options: HttpTypes.StoreCartShippingOption[]\n  }>(\"/store/shipping-options\", {\n    query: { cart_id: cartId },\n    next,\n    headers,\n    cache: \"force-cache\",\n  })\n}\n"],"names":[],"mappings":";;;;;;;IAsYsB,aAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 2597, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/checkout/components/payment-button/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { isManual, isStripe } from \"@lib/constants\"\nimport { placeOrder } from \"@lib/data/cart\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { Button } from \"@medusajs/ui\"\nimport { useElements, useStripe } from \"@stripe/react-stripe-js\"\nimport React, { useState } from \"react\"\nimport ErrorMessage from \"../error-message\"\n\ntype PaymentButtonProps = {\n  cart: HttpTypes.StoreCart\n  \"data-testid\": string\n}\n\nconst PaymentButton: React.FC<PaymentButtonProps> = ({\n  cart,\n  \"data-testid\": dataTestId,\n}) => {\n  const notReady =\n    !cart ||\n    !cart.shipping_address ||\n    !cart.billing_address ||\n    !cart.email ||\n    (cart.shipping_methods?.length ?? 0) < 1\n\n  const paymentSession = cart.payment_collection?.payment_sessions?.[0]\n\n  switch (true) {\n    case isStripe(paymentSession?.provider_id):\n      return (\n        <StripePaymentButton\n          notReady={notReady}\n          cart={cart}\n          data-testid={dataTestId}\n        />\n      )\n    case isManual(paymentSession?.provider_id):\n      return (\n        <ManualTestPaymentButton notReady={notReady} data-testid={dataTestId} />\n      )\n    default:\n      return <Button disabled>Select a payment method</Button>\n  }\n}\n\nconst StripePaymentButton = ({\n  cart,\n  notReady,\n  \"data-testid\": dataTestId,\n}: {\n  cart: HttpTypes.StoreCart\n  notReady: boolean\n  \"data-testid\"?: string\n}) => {\n  const [submitting, setSubmitting] = useState(false)\n  const [errorMessage, setErrorMessage] = useState<string | null>(null)\n\n  const onPaymentCompleted = async () => {\n    await placeOrder()\n      .catch((err) => {\n        setErrorMessage(err.message)\n      })\n      .finally(() => {\n        setSubmitting(false)\n      })\n  }\n\n  const stripe = useStripe()\n  const elements = useElements()\n  const card = elements?.getElement(\"card\")\n\n  const session = cart.payment_collection?.payment_sessions?.find(\n    (s) => s.status === \"pending\"\n  )\n\n  const disabled = !stripe || !elements ? true : false\n\n  const handlePayment = async () => {\n    setSubmitting(true)\n\n    if (!stripe || !elements || !card || !cart) {\n      setSubmitting(false)\n      return\n    }\n\n    await stripe\n      .confirmCardPayment(session?.data.client_secret as string, {\n        payment_method: {\n          card: card,\n          billing_details: {\n            name:\n              cart.billing_address?.first_name +\n              \" \" +\n              cart.billing_address?.last_name,\n            address: {\n              city: cart.billing_address?.city ?? undefined,\n              country: cart.billing_address?.country_code ?? undefined,\n              line1: cart.billing_address?.address_1 ?? undefined,\n              line2: cart.billing_address?.address_2 ?? undefined,\n              postal_code: cart.billing_address?.postal_code ?? undefined,\n              state: cart.billing_address?.province ?? undefined,\n            },\n            email: cart.email,\n            phone: cart.billing_address?.phone ?? undefined,\n          },\n        },\n      })\n      .then(({ error, paymentIntent }) => {\n        if (error) {\n          const pi = error.payment_intent\n\n          if (\n            (pi && pi.status === \"requires_capture\") ||\n            (pi && pi.status === \"succeeded\")\n          ) {\n            onPaymentCompleted()\n          }\n\n          setErrorMessage(error.message || null)\n          return\n        }\n\n        if (\n          (paymentIntent && paymentIntent.status === \"requires_capture\") ||\n          paymentIntent.status === \"succeeded\"\n        ) {\n          return onPaymentCompleted()\n        }\n\n        return\n      })\n  }\n\n  return (\n    <>\n      <Button\n        disabled={disabled || notReady}\n        onClick={handlePayment}\n        size=\"large\"\n        isLoading={submitting}\n        data-testid={dataTestId}\n      >\n        Place order\n      </Button>\n      <ErrorMessage\n        error={errorMessage}\n        data-testid=\"stripe-payment-error-message\"\n      />\n    </>\n  )\n}\n\nconst ManualTestPaymentButton = ({ notReady }: { notReady: boolean }) => {\n  const [submitting, setSubmitting] = useState(false)\n  const [errorMessage, setErrorMessage] = useState<string | null>(null)\n\n  const onPaymentCompleted = async () => {\n    await placeOrder()\n      .catch((err) => {\n        setErrorMessage(err.message)\n      })\n      .finally(() => {\n        setSubmitting(false)\n      })\n  }\n\n  const handlePayment = () => {\n    setSubmitting(true)\n\n    onPaymentCompleted()\n  }\n\n  return (\n    <>\n      <Button\n        disabled={notReady}\n        isLoading={submitting}\n        onClick={handlePayment}\n        size=\"large\"\n        data-testid=\"submit-order-button\"\n      >\n        Place order\n      </Button>\n      <ErrorMessage\n        error={errorMessage}\n        data-testid=\"manual-payment-error-message\"\n      />\n    </>\n  )\n}\n\nexport default PaymentButton\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2772, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/checkout/components/review/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { Heading, Text, clx } from \"@medusajs/ui\"\n\nimport PaymentButton from \"../payment-button\"\nimport { useSearchParams } from \"next/navigation\"\n\nconst Review = ({ cart }: { cart: any }) => {\n  const searchParams = useSearchParams()\n\n  const isOpen = searchParams.get(\"step\") === \"review\"\n\n  const paidByGiftcard =\n    cart?.gift_cards && cart?.gift_cards?.length > 0 && cart?.total === 0\n\n  const previousStepsCompleted =\n    cart.shipping_address &&\n    cart.shipping_methods.length > 0 &&\n    (cart.payment_collection || paidByGiftcard)\n\n  return (\n    <div className=\"bg-white\">\n      <div className=\"flex flex-row items-center justify-between mb-6\">\n        <Heading\n          level=\"h2\"\n          className={clx(\n            \"flex flex-row text-3xl-regular gap-x-2 items-baseline\",\n            {\n              \"opacity-50 pointer-events-none select-none\": !isOpen,\n            }\n          )}\n        >\n          Review\n        </Heading>\n      </div>\n      {isOpen && previousStepsCompleted && (\n        <>\n          <div className=\"flex items-start gap-x-1 w-full mb-6\">\n            <div className=\"w-full\">\n              <Text className=\"txt-medium-plus text-ui-fg-base mb-1\">\n                By clicking the Place Order button, you confirm that you have\n                read, understand and accept our Terms of Use, Terms of Sale and\n                Returns Policy and acknowledge that you have read Medusa\n                Store&apos;s Privacy Policy.\n              </Text>\n            </div>\n          </div>\n          <PaymentButton cart={cart} data-testid=\"submit-order-button\" />\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default Review\n"],"names":[],"mappings":";;;;;AAEA;AAAA;AAAA;AAEA;AACA;AALA;;;;;AAOA,MAAM,SAAS,CAAC,EAAE,IAAI,EAAiB;IACrC,MAAM,eAAe,IAAA,qJAAe;IAEpC,MAAM,SAAS,aAAa,GAAG,CAAC,YAAY;IAE5C,MAAM,iBACJ,MAAM,cAAc,MAAM,YAAY,SAAS,KAAK,MAAM,UAAU;IAEtE,MAAM,yBACJ,KAAK,gBAAgB,IACrB,KAAK,gBAAgB,CAAC,MAAM,GAAG,KAC/B,CAAC,KAAK,kBAAkB,IAAI,cAAc;IAE5C,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,8LAAO;oBACN,OAAM;oBACN,WAAW,IAAA,sKAAG,EACZ,yDACA;wBACE,8CAA8C,CAAC;oBACjD;8BAEH;;;;;;;;;;;YAIF,UAAU,wCACT;;kCACE,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;4BAAI,WAAU;sCACb,cAAA,8OAAC,qLAAI;gCAAC,WAAU;0CAAuC;;;;;;;;;;;;;;;;kCAQ3D,8OAAC,kLAAa;wBAAC,MAAM;wBAAM,eAAY;;;;;;;;;;;;;;AAKjD;uCAEe","debugId":null}},
    {"offset": {"line": 2859, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/data/cart.ts"],"sourcesContent":["\"use server\"\n\nimport { sdk } from \"@lib/config\"\nimport medusaError from \"@lib/util/medusa-error\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { revalidateTag } from \"next/cache\"\nimport { redirect } from \"next/navigation\"\nimport {\n  getAuthHeaders,\n  getCacheOptions,\n  getCacheTag,\n  getCartId,\n  removeCartId,\n  setCartId,\n} from \"./cookies\"\nimport { getRegion } from \"./regions\"\n\n/**\n * Retrieves a cart by its ID. If no ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to retrieve.\n * @returns The cart object if found, or null if not found.\n */\nexport async function retrieveCart(cartId?: string, fields?: string) {\n  const id = cartId || (await getCartId())\n  fields ??= \"*items, *region, *items.product, *items.variant, *items.thumbnail, *items.metadata, +items.total, *promotions, +shipping_methods.name\"\n\n  if (!id) {\n    return null\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const next = {\n    ...(await getCacheOptions(\"carts\")),\n  }\n\n  return await sdk.client\n    .fetch<HttpTypes.StoreCartResponse>(`/store/carts/${id}`, {\n      method: \"GET\",\n      query: {\n        fields\n      },\n      headers,\n      next,\n      cache: \"force-cache\",\n    })\n    .then(({ cart }: { cart: HttpTypes.StoreCart }) => cart)\n    .catch(() => null)\n}\n\nexport async function getOrSetCart(countryCode: string) {\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  let cart = await retrieveCart(undefined, 'id,region_id')\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  if (!cart) {\n    const cartResp = await sdk.store.cart.create(\n      { region_id: region.id },\n      {},\n      headers\n    )\n    cart = cartResp.cart\n\n    await setCartId(cart.id)\n\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  if (cart && cart?.region_id !== region.id) {\n    await sdk.store.cart.update(cart.id, { region_id: region.id }, {}, headers)\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  return cart\n}\n\nexport async function updateCart(data: HttpTypes.StoreUpdateCart) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found, please create one before updating\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, data, {}, headers)\n    .then(async ({ cart }: { cart: HttpTypes.StoreCart }) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n\n      return cart\n    })\n    .catch(medusaError)\n}\n\nexport async function addToCart({\n  variantId,\n  quantity,\n  countryCode,\n}: {\n  variantId: string\n  quantity: number\n  countryCode: string\n}) {\n  if (!variantId) {\n    throw new Error(\"Missing variant ID when adding to cart\")\n  }\n\n  const cart = await getOrSetCart(countryCode)\n\n  if (!cart) {\n    throw new Error(\"Error retrieving or creating cart\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .createLineItem(\n      cart.id,\n      {\n        variant_id: variantId,\n        quantity,\n      },\n      {},\n      headers\n    )\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function updateLineItem({\n  lineId,\n  quantity,\n}: {\n  lineId: string\n  quantity: number\n}) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when updating line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when updating line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .updateLineItem(cartId, lineId, { quantity }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function deleteLineItem(lineId: string) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when deleting line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when deleting line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .deleteLineItem(cartId, lineId, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function setShippingMethod({\n  cartId,\n  shippingMethodId,\n}: {\n  cartId: string\n  shippingMethodId: string\n}) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .addShippingMethod(cartId, { option_id: shippingMethodId }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function initiatePaymentSession(\n  cart: HttpTypes.StoreCart,\n  data: HttpTypes.StoreInitializePaymentSession\n) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.payment\n    .initiatePaymentSession(cart, data, {}, headers)\n    .then(async (resp) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return resp\n    })\n    .catch(medusaError)\n}\n\nexport async function applyPromotions(codes: string[]) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, { promo_codes: codes }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function applyGiftCard(code: string) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, { gift_cards: [{ code }] }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function removeDiscount(code: string) {\n  // const cartId = getCartId()\n  // if (!cartId) return \"No cartId cookie found\"\n  // try {\n  //   await deleteDiscount(cartId, code)\n  //   revalidateTag(\"cart\")\n  // } catch (error: any) {\n  //   throw error\n  // }\n}\n\nexport async function removeGiftCard(\n  codeToRemove: string,\n  giftCards: any[]\n  // giftCards: GiftCard[]\n) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, {\n  //       gift_cards: [...giftCards]\n  //         .filter((gc) => gc.code !== codeToRemove)\n  //         .map((gc) => ({ code: gc.code })),\n  //     }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function submitPromotionForm(\n  currentState: unknown,\n  formData: FormData\n) {\n  const code = formData.get(\"code\") as string\n  try {\n    await applyPromotions([code])\n  } catch (e: any) {\n    return e.message\n  }\n}\n\n// TODO: Pass a POJO instead of a form entity here\nexport async function setAddresses(currentState: unknown, formData: FormData) {\n  try {\n    if (!formData) {\n      throw new Error(\"No form data found when setting addresses\")\n    }\n    const cartId = getCartId()\n    if (!cartId) {\n      throw new Error(\"No existing cart found when setting addresses\")\n    }\n\n    const data = {\n      shipping_address: {\n        first_name: formData.get(\"shipping_address.first_name\"),\n        last_name: formData.get(\"shipping_address.last_name\"),\n        address_1: formData.get(\"shipping_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"shipping_address.company\"),\n        postal_code: formData.get(\"shipping_address.postal_code\"),\n        city: formData.get(\"shipping_address.city\"),\n        country_code: formData.get(\"shipping_address.country_code\"),\n        province: formData.get(\"shipping_address.province\"),\n        phone: formData.get(\"shipping_address.phone\"),\n      },\n      email: formData.get(\"email\"),\n    } as any\n\n    const sameAsBilling = formData.get(\"same_as_billing\")\n    if (sameAsBilling === \"on\") data.billing_address = data.shipping_address\n\n    if (sameAsBilling !== \"on\")\n      data.billing_address = {\n        first_name: formData.get(\"billing_address.first_name\"),\n        last_name: formData.get(\"billing_address.last_name\"),\n        address_1: formData.get(\"billing_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"billing_address.company\"),\n        postal_code: formData.get(\"billing_address.postal_code\"),\n        city: formData.get(\"billing_address.city\"),\n        country_code: formData.get(\"billing_address.country_code\"),\n        province: formData.get(\"billing_address.province\"),\n        phone: formData.get(\"billing_address.phone\"),\n      }\n    await updateCart(data)\n  } catch (e: any) {\n    return e.message\n  }\n\n  redirect(\n    `/${formData.get(\"shipping_address.country_code\")}/checkout?step=delivery`\n  )\n}\n\n/**\n * Places an order for a cart. If no cart ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to place an order for.\n * @returns The cart object if the order was successful, or null if not.\n */\nexport async function placeOrder(cartId?: string) {\n  const id = cartId || (await getCartId())\n\n  if (!id) {\n    throw new Error(\"No existing cart found when placing an order\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const cartRes = await sdk.store.cart\n    .complete(id, {}, headers)\n    .then(async (cartRes) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return cartRes\n    })\n    .catch(medusaError)\n\n  if (cartRes?.type === \"order\") {\n    const countryCode =\n      cartRes.order.shipping_address?.country_code?.toLowerCase()\n\n    const orderCacheTag = await getCacheTag(\"orders\")\n    revalidateTag(orderCacheTag)\n\n    removeCartId()\n    redirect(`/${countryCode}/order/${cartRes?.order.id}/confirmed`)\n  }\n\n  return cartRes.cart\n}\n\n/**\n * Updates the countrycode param and revalidates the regions cache\n * @param regionId\n * @param countryCode\n */\nexport async function updateRegion(countryCode: string, currentPath: string) {\n  const cartId = await getCartId()\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  if (cartId) {\n    await updateCart({ region_id: region.id })\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  const regionCacheTag = await getCacheTag(\"regions\")\n  revalidateTag(regionCacheTag)\n\n  const productsCacheTag = await getCacheTag(\"products\")\n  revalidateTag(productsCacheTag)\n\n  redirect(`/${countryCode}${currentPath}`)\n}\n\nexport async function listCartOptions() {\n  const cartId = await getCartId()\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n  const next = {\n    ...(await getCacheOptions(\"shippingOptions\")),\n  }\n\n  return await sdk.client.fetch<{\n    shipping_options: HttpTypes.StoreCartShippingOption[]\n  }>(\"/store/shipping-options\", {\n    query: { cart_id: cartId },\n    next,\n    headers,\n    cache: \"force-cache\",\n  })\n}\n"],"names":[],"mappings":";;;;;;;IAwNsB,oBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 2871, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/data/fulfillment.ts"],"sourcesContent":["\"use server\"\n\nimport { sdk } from \"@lib/config\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { getAuthHeaders, getCacheOptions } from \"./cookies\"\n\nexport const listCartShippingMethods = async (cartId: string) => {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const next = {\n    ...(await getCacheOptions(\"fulfillment\")),\n  }\n\n  return sdk.client\n    .fetch<HttpTypes.StoreShippingOptionListResponse>(\n      `/store/shipping-options`,\n      {\n        method: \"GET\",\n        query: {\n          cart_id: cartId,\n          fields:\n            \"+service_zone.fulfllment_set.type,*service_zone.fulfillment_set.location.address\",\n        },\n        headers,\n        next,\n        cache: \"force-cache\",\n      }\n    )\n    .then(({ shipping_options }) => shipping_options)\n    .catch(() => {\n      return null\n    })\n}\n\nexport const calculatePriceForShippingOption = async (\n  optionId: string,\n  cartId: string,\n  data?: Record<string, unknown>\n) => {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const next = {\n    ...(await getCacheOptions(\"fulfillment\")),\n  }\n\n  const body = { cart_id: cartId, data }\n\n  if (data) {\n    body.data = data\n  }\n\n  return sdk.client\n    .fetch<{ shipping_option: HttpTypes.StoreCartShippingOption }>(\n      `/store/shipping-options/${optionId}/calculate`,\n      {\n        method: \"POST\",\n        body,\n        headers,\n        next,\n      }\n    )\n    .then(({ shipping_option }) => shipping_option)\n    .catch((e) => {\n      return null\n    })\n}\n"],"names":[],"mappings":";;;;;;;IAoCa,kCAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 2883, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/util/isEmpty.ts"],"sourcesContent":["export const isObject = (input: any) => input instanceof Object\nexport const isArray = (input: any) => Array.isArray(input)\nexport const isEmpty = (input: any) => {\n  return (\n    input === null ||\n    input === undefined ||\n    (isObject(input) && Object.keys(input).length === 0) ||\n    (isArray(input) && (input as any[]).length === 0) ||\n    (typeof input === \"string\" && input.trim().length === 0)\n  )\n}\n"],"names":[],"mappings":";;;;;;;;AAAO,MAAM,WAAW,CAAC,QAAe,iBAAiB;AAClD,MAAM,UAAU,CAAC,QAAe,MAAM,OAAO,CAAC;AAC9C,MAAM,UAAU,CAAC;IACtB,OACE,UAAU,QACV,UAAU,aACT,SAAS,UAAU,OAAO,IAAI,CAAC,OAAO,MAAM,KAAK,KACjD,QAAQ,UAAU,AAAC,MAAgB,MAAM,KAAK,KAC9C,OAAO,UAAU,YAAY,MAAM,IAAI,GAAG,MAAM,KAAK;AAE1D","debugId":null}},
    {"offset": {"line": 2900, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/util/money.ts"],"sourcesContent":["import { isEmpty } from \"./isEmpty\"\n\ntype ConvertToLocaleParams = {\n  amount: number\n  currency_code: string\n  minimumFractionDigits?: number\n  maximumFractionDigits?: number\n  locale?: string\n}\n\nexport const convertToLocale = ({\n  amount,\n  currency_code,\n  minimumFractionDigits,\n  maximumFractionDigits,\n  locale = \"en-US\",\n}: ConvertToLocaleParams) => {\n  return currency_code && !isEmpty(currency_code)\n    ? new Intl.NumberFormat(locale, {\n        style: \"currency\",\n        currency: currency_code,\n        minimumFractionDigits,\n        maximumFractionDigits,\n      }).format(amount)\n    : amount.toString()\n}\n"],"names":[],"mappings":";;;;AAAA;;AAUO,MAAM,kBAAkB,CAAC,EAC9B,MAAM,EACN,aAAa,EACb,qBAAqB,EACrB,qBAAqB,EACrB,SAAS,OAAO,EACM;IACtB,OAAO,iBAAiB,CAAC,IAAA,wIAAO,EAAC,iBAC7B,IAAI,KAAK,YAAY,CAAC,QAAQ;QAC5B,OAAO;QACP,UAAU;QACV;QACA;IACF,GAAG,MAAM,CAAC,UACV,OAAO,QAAQ;AACrB","debugId":null}},
    {"offset": {"line": 2918, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/checkout/components/shipping/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { RadioGroup, Radio } from \"@headlessui/react\"\nimport { setShippingMethod } from \"@lib/data/cart\"\nimport { calculatePriceForShippingOption } from \"@lib/data/fulfillment\"\nimport { convertToLocale } from \"@lib/util/money\"\nimport { CheckCircleSolid, Loader } from \"@medusajs/icons\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { Button, Heading, Text, clx } from \"@medusajs/ui\"\nimport ErrorMessage from \"@modules/checkout/components/error-message\"\nimport Divider from \"@modules/common/components/divider\"\nimport MedusaRadio from \"@modules/common/components/radio\"\nimport { usePathname, useRouter, useSearchParams } from \"next/navigation\"\nimport { useEffect, useState } from \"react\"\n\nconst PICKUP_OPTION_ON = \"__PICKUP_ON\"\nconst PICKUP_OPTION_OFF = \"__PICKUP_OFF\"\n\ntype ShippingProps = {\n  cart: HttpTypes.StoreCart\n  availableShippingMethods: HttpTypes.StoreCartShippingOption[] | null\n}\n\nfunction formatAddress(address) {\n  if (!address) {\n    return \"\"\n  }\n\n  let ret = \"\"\n\n  if (address.address_1) {\n    ret += ` ${address.address_1}`\n  }\n\n  if (address.address_2) {\n    ret += `, ${address.address_2}`\n  }\n\n  if (address.postal_code) {\n    ret += `, ${address.postal_code} ${address.city}`\n  }\n\n  if (address.country_code) {\n    ret += `, ${address.country_code.toUpperCase()}`\n  }\n\n  return ret\n}\n\nconst Shipping: React.FC<ShippingProps> = ({\n  cart,\n  availableShippingMethods,\n}) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [isLoadingPrices, setIsLoadingPrices] = useState(true)\n\n  const [showPickupOptions, setShowPickupOptions] =\n    useState<string>(PICKUP_OPTION_OFF)\n  const [calculatedPricesMap, setCalculatedPricesMap] = useState<\n    Record<string, number>\n  >({})\n  const [error, setError] = useState<string | null>(null)\n  const [shippingMethodId, setShippingMethodId] = useState<string | null>(\n    cart.shipping_methods?.at(-1)?.shipping_option_id || null\n  )\n\n  const searchParams = useSearchParams()\n  const router = useRouter()\n  const pathname = usePathname()\n\n  const isOpen = searchParams.get(\"step\") === \"delivery\"\n\n  const _shippingMethods = availableShippingMethods?.filter(\n    (sm) => sm.service_zone?.fulfillment_set?.type !== \"pickup\"\n  )\n\n  const _pickupMethods = availableShippingMethods?.filter(\n    (sm) => sm.service_zone?.fulfillment_set?.type === \"pickup\"\n  )\n\n  const hasPickupOptions = !!_pickupMethods?.length\n\n  useEffect(() => {\n    setIsLoadingPrices(true)\n\n    if (_shippingMethods?.length) {\n      const promises = _shippingMethods\n        .filter((sm) => sm.price_type === \"calculated\")\n        .map((sm) => calculatePriceForShippingOption(sm.id, cart.id))\n\n      if (promises.length) {\n        Promise.allSettled(promises).then((res) => {\n          const pricesMap: Record<string, number> = {}\n          res\n            .filter((r) => r.status === \"fulfilled\")\n            .forEach((p) => (pricesMap[p.value?.id || \"\"] = p.value?.amount!))\n\n          setCalculatedPricesMap(pricesMap)\n          setIsLoadingPrices(false)\n        })\n      }\n    }\n\n    if (_pickupMethods?.find((m) => m.id === shippingMethodId)) {\n      setShowPickupOptions(PICKUP_OPTION_ON)\n    }\n  }, [availableShippingMethods])\n\n  const handleEdit = () => {\n    router.push(pathname + \"?step=delivery\", { scroll: false })\n  }\n\n  const handleSubmit = () => {\n    router.push(pathname + \"?step=payment\", { scroll: false })\n  }\n\n  const handleSetShippingMethod = async (\n    id: string,\n    variant: \"shipping\" | \"pickup\"\n  ) => {\n    setError(null)\n\n    if (variant === \"pickup\") {\n      setShowPickupOptions(PICKUP_OPTION_ON)\n    } else {\n      setShowPickupOptions(PICKUP_OPTION_OFF)\n    }\n\n    let currentId: string | null = null\n    setIsLoading(true)\n    setShippingMethodId((prev) => {\n      currentId = prev\n      return id\n    })\n\n    await setShippingMethod({ cartId: cart.id, shippingMethodId: id })\n      .catch((err) => {\n        setShippingMethodId(currentId)\n\n        setError(err.message)\n      })\n      .finally(() => {\n        setIsLoading(false)\n      })\n  }\n\n  useEffect(() => {\n    setError(null)\n  }, [isOpen])\n\n  return (\n    <div className=\"bg-white\">\n      <div className=\"flex flex-row items-center justify-between mb-6\">\n        <Heading\n          level=\"h2\"\n          className={clx(\n            \"flex flex-row text-3xl-regular gap-x-2 items-baseline\",\n            {\n              \"opacity-50 pointer-events-none select-none\":\n                !isOpen && cart.shipping_methods?.length === 0,\n            }\n          )}\n        >\n          Delivery\n          {!isOpen && (cart.shipping_methods?.length ?? 0) > 0 && (\n            <CheckCircleSolid />\n          )}\n        </Heading>\n        {!isOpen &&\n          cart?.shipping_address &&\n          cart?.billing_address &&\n          cart?.email && (\n            <Text>\n              <button\n                onClick={handleEdit}\n                className=\"text-ui-fg-interactive hover:text-ui-fg-interactive-hover\"\n                data-testid=\"edit-delivery-button\"\n              >\n                Edit\n              </button>\n            </Text>\n          )}\n      </div>\n      {isOpen ? (\n        <>\n          <div className=\"grid\">\n            <div className=\"flex flex-col\">\n              <span className=\"font-medium txt-medium text-ui-fg-base\">\n                Shipping method\n              </span>\n              <span className=\"mb-4 text-ui-fg-muted txt-medium\">\n                How would you like you order delivered\n              </span>\n            </div>\n            <div data-testid=\"delivery-options-container\">\n              <div className=\"pb-8 md:pt-0 pt-2\">\n                {hasPickupOptions && (\n                  <RadioGroup\n                    value={showPickupOptions}\n                    onChange={(value) => {\n                      const id = _pickupMethods.find(\n                        (option) => !option.insufficient_inventory\n                      )?.id\n\n                      if (id) {\n                        handleSetShippingMethod(id, \"pickup\")\n                      }\n                    }}\n                  >\n                    <Radio\n                      value={PICKUP_OPTION_ON}\n                      data-testid=\"delivery-option-radio\"\n                      className={clx(\n                        \"flex items-center justify-between text-small-regular cursor-pointer py-4 border rounded-rounded px-8 mb-2 hover:shadow-borders-interactive-with-active\",\n                        {\n                          \"border-ui-border-interactive\":\n                            showPickupOptions === PICKUP_OPTION_ON,\n                        }\n                      )}\n                    >\n                      <div className=\"flex items-center gap-x-4\">\n                        <MedusaRadio\n                          checked={showPickupOptions === PICKUP_OPTION_ON}\n                        />\n                        <span className=\"text-base-regular\">\n                          Pick up your order\n                        </span>\n                      </div>\n                      <span className=\"justify-self-end text-ui-fg-base\">\n                        -\n                      </span>\n                    </Radio>\n                  </RadioGroup>\n                )}\n                <RadioGroup\n                  value={shippingMethodId}\n                  onChange={(v) => handleSetShippingMethod(v, \"shipping\")}\n                >\n                  {_shippingMethods?.map((option) => {\n                    const isDisabled =\n                      option.price_type === \"calculated\" &&\n                      !isLoadingPrices &&\n                      typeof calculatedPricesMap[option.id] !== \"number\"\n\n                    return (\n                      <Radio\n                        key={option.id}\n                        value={option.id}\n                        data-testid=\"delivery-option-radio\"\n                        disabled={isDisabled}\n                        className={clx(\n                          \"flex items-center justify-between text-small-regular cursor-pointer py-4 border rounded-rounded px-8 mb-2 hover:shadow-borders-interactive-with-active\",\n                          {\n                            \"border-ui-border-interactive\":\n                              option.id === shippingMethodId,\n                            \"hover:shadow-brders-none cursor-not-allowed\":\n                              isDisabled,\n                          }\n                        )}\n                      >\n                        <div className=\"flex items-center gap-x-4\">\n                          <MedusaRadio\n                            checked={option.id === shippingMethodId}\n                          />\n                          <span className=\"text-base-regular\">\n                            {option.name}\n                          </span>\n                        </div>\n                        <span className=\"justify-self-end text-ui-fg-base\">\n                          {option.price_type === \"flat\" ? (\n                            convertToLocale({\n                              amount: option.amount!,\n                              currency_code: cart?.currency_code,\n                            })\n                          ) : calculatedPricesMap[option.id] ? (\n                            convertToLocale({\n                              amount: calculatedPricesMap[option.id],\n                              currency_code: cart?.currency_code,\n                            })\n                          ) : isLoadingPrices ? (\n                            <Loader />\n                          ) : (\n                            \"-\"\n                          )}\n                        </span>\n                      </Radio>\n                    )\n                  })}\n                </RadioGroup>\n              </div>\n            </div>\n          </div>\n\n          {showPickupOptions === PICKUP_OPTION_ON && (\n            <div className=\"grid\">\n              <div className=\"flex flex-col\">\n                <span className=\"font-medium txt-medium text-ui-fg-base\">\n                  Store\n                </span>\n                <span className=\"mb-4 text-ui-fg-muted txt-medium\">\n                  Choose a store near you\n                </span>\n              </div>\n              <div data-testid=\"delivery-options-container\">\n                <div className=\"pb-8 md:pt-0 pt-2\">\n                  <RadioGroup\n                    value={shippingMethodId}\n                    onChange={(v) => handleSetShippingMethod(v, \"pickup\")}\n                  >\n                    {_pickupMethods?.map((option) => {\n                      return (\n                        <Radio\n                          key={option.id}\n                          value={option.id}\n                          disabled={option.insufficient_inventory}\n                          data-testid=\"delivery-option-radio\"\n                          className={clx(\n                            \"flex items-center justify-between text-small-regular cursor-pointer py-4 border rounded-rounded px-8 mb-2 hover:shadow-borders-interactive-with-active\",\n                            {\n                              \"border-ui-border-interactive\":\n                                option.id === shippingMethodId,\n                              \"hover:shadow-brders-none cursor-not-allowed\":\n                                option.insufficient_inventory,\n                            }\n                          )}\n                        >\n                          <div className=\"flex items-start gap-x-4\">\n                            <MedusaRadio\n                              checked={option.id === shippingMethodId}\n                            />\n                            <div className=\"flex flex-col\">\n                              <span className=\"text-base-regular\">\n                                {option.name}\n                              </span>\n                              <span className=\"text-base-regular text-ui-fg-muted\">\n                                {formatAddress(\n                                  option.service_zone?.fulfillment_set?.location\n                                    ?.address\n                                )}\n                              </span>\n                            </div>\n                          </div>\n                          <span className=\"justify-self-end text-ui-fg-base\">\n                            {convertToLocale({\n                              amount: option.amount!,\n                              currency_code: cart?.currency_code,\n                            })}\n                          </span>\n                        </Radio>\n                      )\n                    })}\n                  </RadioGroup>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div>\n            <ErrorMessage\n              error={error}\n              data-testid=\"delivery-option-error-message\"\n            />\n            <Button\n              size=\"large\"\n              className=\"mt\"\n              onClick={handleSubmit}\n              isLoading={isLoading}\n              disabled={!cart.shipping_methods?.[0]}\n              data-testid=\"submit-delivery-option-button\"\n            >\n              Continue to payment\n            </Button>\n          </div>\n        </>\n      ) : (\n        <div>\n          <div className=\"text-small-regular\">\n            {cart && (cart.shipping_methods?.length ?? 0) > 0 && (\n              <div className=\"flex flex-col w-1/3\">\n                <Text className=\"txt-medium-plus text-ui-fg-base mb-1\">\n                  Method\n                </Text>\n                <Text className=\"txt-medium text-ui-fg-subtle\">\n                  {cart.shipping_methods?.at(-1)?.name}{\" \"}\n                  {convertToLocale({\n                    amount: cart.shipping_methods.at(-1)?.amount!,\n                    currency_code: cart?.currency_code,\n                  })}\n                </Text>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      <Divider className=\"mt-8\" />\n    </div>\n  )\n}\n\nexport default Shipping\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3486, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/util/repeat.ts"],"sourcesContent":["const repeat = (times: number) => {\n  return Array.from(Array(times).keys())\n}\n\nexport default repeat\n"],"names":[],"mappings":";;;;AAAA,MAAM,SAAS,CAAC;IACd,OAAO,MAAM,IAAI,CAAC,MAAM,OAAO,IAAI;AACrC;uCAEe","debugId":null}},
    {"offset": {"line": 3498, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/data/cart.ts"],"sourcesContent":["\"use server\"\n\nimport { sdk } from \"@lib/config\"\nimport medusaError from \"@lib/util/medusa-error\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { revalidateTag } from \"next/cache\"\nimport { redirect } from \"next/navigation\"\nimport {\n  getAuthHeaders,\n  getCacheOptions,\n  getCacheTag,\n  getCartId,\n  removeCartId,\n  setCartId,\n} from \"./cookies\"\nimport { getRegion } from \"./regions\"\n\n/**\n * Retrieves a cart by its ID. If no ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to retrieve.\n * @returns The cart object if found, or null if not found.\n */\nexport async function retrieveCart(cartId?: string, fields?: string) {\n  const id = cartId || (await getCartId())\n  fields ??= \"*items, *region, *items.product, *items.variant, *items.thumbnail, *items.metadata, +items.total, *promotions, +shipping_methods.name\"\n\n  if (!id) {\n    return null\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const next = {\n    ...(await getCacheOptions(\"carts\")),\n  }\n\n  return await sdk.client\n    .fetch<HttpTypes.StoreCartResponse>(`/store/carts/${id}`, {\n      method: \"GET\",\n      query: {\n        fields\n      },\n      headers,\n      next,\n      cache: \"force-cache\",\n    })\n    .then(({ cart }: { cart: HttpTypes.StoreCart }) => cart)\n    .catch(() => null)\n}\n\nexport async function getOrSetCart(countryCode: string) {\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  let cart = await retrieveCart(undefined, 'id,region_id')\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  if (!cart) {\n    const cartResp = await sdk.store.cart.create(\n      { region_id: region.id },\n      {},\n      headers\n    )\n    cart = cartResp.cart\n\n    await setCartId(cart.id)\n\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  if (cart && cart?.region_id !== region.id) {\n    await sdk.store.cart.update(cart.id, { region_id: region.id }, {}, headers)\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  return cart\n}\n\nexport async function updateCart(data: HttpTypes.StoreUpdateCart) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found, please create one before updating\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, data, {}, headers)\n    .then(async ({ cart }: { cart: HttpTypes.StoreCart }) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n\n      return cart\n    })\n    .catch(medusaError)\n}\n\nexport async function addToCart({\n  variantId,\n  quantity,\n  countryCode,\n}: {\n  variantId: string\n  quantity: number\n  countryCode: string\n}) {\n  if (!variantId) {\n    throw new Error(\"Missing variant ID when adding to cart\")\n  }\n\n  const cart = await getOrSetCart(countryCode)\n\n  if (!cart) {\n    throw new Error(\"Error retrieving or creating cart\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .createLineItem(\n      cart.id,\n      {\n        variant_id: variantId,\n        quantity,\n      },\n      {},\n      headers\n    )\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function updateLineItem({\n  lineId,\n  quantity,\n}: {\n  lineId: string\n  quantity: number\n}) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when updating line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when updating line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .updateLineItem(cartId, lineId, { quantity }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function deleteLineItem(lineId: string) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when deleting line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when deleting line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .deleteLineItem(cartId, lineId, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function setShippingMethod({\n  cartId,\n  shippingMethodId,\n}: {\n  cartId: string\n  shippingMethodId: string\n}) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .addShippingMethod(cartId, { option_id: shippingMethodId }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function initiatePaymentSession(\n  cart: HttpTypes.StoreCart,\n  data: HttpTypes.StoreInitializePaymentSession\n) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.payment\n    .initiatePaymentSession(cart, data, {}, headers)\n    .then(async (resp) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return resp\n    })\n    .catch(medusaError)\n}\n\nexport async function applyPromotions(codes: string[]) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, { promo_codes: codes }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function applyGiftCard(code: string) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, { gift_cards: [{ code }] }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function removeDiscount(code: string) {\n  // const cartId = getCartId()\n  // if (!cartId) return \"No cartId cookie found\"\n  // try {\n  //   await deleteDiscount(cartId, code)\n  //   revalidateTag(\"cart\")\n  // } catch (error: any) {\n  //   throw error\n  // }\n}\n\nexport async function removeGiftCard(\n  codeToRemove: string,\n  giftCards: any[]\n  // giftCards: GiftCard[]\n) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, {\n  //       gift_cards: [...giftCards]\n  //         .filter((gc) => gc.code !== codeToRemove)\n  //         .map((gc) => ({ code: gc.code })),\n  //     }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function submitPromotionForm(\n  currentState: unknown,\n  formData: FormData\n) {\n  const code = formData.get(\"code\") as string\n  try {\n    await applyPromotions([code])\n  } catch (e: any) {\n    return e.message\n  }\n}\n\n// TODO: Pass a POJO instead of a form entity here\nexport async function setAddresses(currentState: unknown, formData: FormData) {\n  try {\n    if (!formData) {\n      throw new Error(\"No form data found when setting addresses\")\n    }\n    const cartId = getCartId()\n    if (!cartId) {\n      throw new Error(\"No existing cart found when setting addresses\")\n    }\n\n    const data = {\n      shipping_address: {\n        first_name: formData.get(\"shipping_address.first_name\"),\n        last_name: formData.get(\"shipping_address.last_name\"),\n        address_1: formData.get(\"shipping_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"shipping_address.company\"),\n        postal_code: formData.get(\"shipping_address.postal_code\"),\n        city: formData.get(\"shipping_address.city\"),\n        country_code: formData.get(\"shipping_address.country_code\"),\n        province: formData.get(\"shipping_address.province\"),\n        phone: formData.get(\"shipping_address.phone\"),\n      },\n      email: formData.get(\"email\"),\n    } as any\n\n    const sameAsBilling = formData.get(\"same_as_billing\")\n    if (sameAsBilling === \"on\") data.billing_address = data.shipping_address\n\n    if (sameAsBilling !== \"on\")\n      data.billing_address = {\n        first_name: formData.get(\"billing_address.first_name\"),\n        last_name: formData.get(\"billing_address.last_name\"),\n        address_1: formData.get(\"billing_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"billing_address.company\"),\n        postal_code: formData.get(\"billing_address.postal_code\"),\n        city: formData.get(\"billing_address.city\"),\n        country_code: formData.get(\"billing_address.country_code\"),\n        province: formData.get(\"billing_address.province\"),\n        phone: formData.get(\"billing_address.phone\"),\n      }\n    await updateCart(data)\n  } catch (e: any) {\n    return e.message\n  }\n\n  redirect(\n    `/${formData.get(\"shipping_address.country_code\")}/checkout?step=delivery`\n  )\n}\n\n/**\n * Places an order for a cart. If no cart ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to place an order for.\n * @returns The cart object if the order was successful, or null if not.\n */\nexport async function placeOrder(cartId?: string) {\n  const id = cartId || (await getCartId())\n\n  if (!id) {\n    throw new Error(\"No existing cart found when placing an order\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const cartRes = await sdk.store.cart\n    .complete(id, {}, headers)\n    .then(async (cartRes) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return cartRes\n    })\n    .catch(medusaError)\n\n  if (cartRes?.type === \"order\") {\n    const countryCode =\n      cartRes.order.shipping_address?.country_code?.toLowerCase()\n\n    const orderCacheTag = await getCacheTag(\"orders\")\n    revalidateTag(orderCacheTag)\n\n    removeCartId()\n    redirect(`/${countryCode}/order/${cartRes?.order.id}/confirmed`)\n  }\n\n  return cartRes.cart\n}\n\n/**\n * Updates the countrycode param and revalidates the regions cache\n * @param regionId\n * @param countryCode\n */\nexport async function updateRegion(countryCode: string, currentPath: string) {\n  const cartId = await getCartId()\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  if (cartId) {\n    await updateCart({ region_id: region.id })\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  const regionCacheTag = await getCacheTag(\"regions\")\n  revalidateTag(regionCacheTag)\n\n  const productsCacheTag = await getCacheTag(\"products\")\n  revalidateTag(productsCacheTag)\n\n  redirect(`/${countryCode}${currentPath}`)\n}\n\nexport async function listCartOptions() {\n  const cartId = await getCartId()\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n  const next = {\n    ...(await getCacheOptions(\"shippingOptions\")),\n  }\n\n  return await sdk.client.fetch<{\n    shipping_options: HttpTypes.StoreCartShippingOption[]\n  }>(\"/store/shipping-options\", {\n    query: { cart_id: cartId },\n    next,\n    headers,\n    cache: \"force-cache\",\n  })\n}\n"],"names":[],"mappings":";;;;;;;IA4JsB,iBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 3510, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/icons/chevron-down.tsx"],"sourcesContent":["import React from \"react\"\n\nimport { IconProps } from \"types/icon\"\n\nconst ChevronDown: React.FC<IconProps> = ({\n  size = \"16\",\n  color = \"currentColor\",\n  ...attributes\n}) => {\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 16 16\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...attributes}\n    >\n      <path\n        d=\"M4 6L8 10L12 6\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  )\n}\n\nexport default ChevronDown\n"],"names":[],"mappings":";;;;;;AAIA,MAAM,cAAmC,CAAC,EACxC,OAAO,IAAI,EACX,QAAQ,cAAc,EACtB,GAAG,YACJ;IACC,qBACE,8OAAC;QACC,OAAO;QACP,QAAQ;QACR,SAAQ;QACR,MAAK;QACL,OAAM;QACL,GAAG,UAAU;kBAEd,cAAA,8OAAC;YACC,GAAE;YACF,QAAQ;YACR,aAAY;YACZ,eAAc;YACd,gBAAe;;;;;;;;;;;AAIvB;uCAEe","debugId":null}},
    {"offset": {"line": 3546, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/cart/components/cart-item-select/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { IconBadge, clx } from \"@medusajs/ui\"\nimport {\n  SelectHTMLAttributes,\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from \"react\"\n\nimport ChevronDown from \"@modules/common/icons/chevron-down\"\n\ntype NativeSelectProps = {\n  placeholder?: string\n  errors?: Record<string, unknown>\n  touched?: Record<string, unknown>\n} & Omit<SelectHTMLAttributes<HTMLSelectElement>, \"size\">\n\nconst CartItemSelect = forwardRef<HTMLSelectElement, NativeSelectProps>(\n  ({ placeholder = \"Select...\", className, children, ...props }, ref) => {\n    const innerRef = useRef<HTMLSelectElement>(null)\n    const [isPlaceholder, setIsPlaceholder] = useState(false)\n\n    useImperativeHandle<HTMLSelectElement | null, HTMLSelectElement | null>(\n      ref,\n      () => innerRef.current\n    )\n\n    useEffect(() => {\n      if (innerRef.current && innerRef.current.value === \"\") {\n        setIsPlaceholder(true)\n      } else {\n        setIsPlaceholder(false)\n      }\n    }, [innerRef.current?.value])\n\n    return (\n      <div>\n        <IconBadge\n          onFocus={() => innerRef.current?.focus()}\n          onBlur={() => innerRef.current?.blur()}\n          className={clx(\n            \"relative flex items-center txt-compact-small border text-ui-fg-base group\",\n            className,\n            {\n              \"text-ui-fg-subtle\": isPlaceholder,\n            }\n          )}\n        >\n          <select\n            ref={innerRef}\n            {...props}\n            className=\"appearance-none bg-transparent border-none px-4 transition-colors duration-150 focus:border-gray-700 outline-none w-16 h-16 items-center justify-center\"\n          >\n            <option disabled value=\"\">\n              {placeholder}\n            </option>\n            {children}\n          </select>\n          <span className=\"absolute flex pointer-events-none justify-end w-8 group-hover:animate-pulse\">\n            <ChevronDown />\n          </span>\n        </IconBadge>\n      </div>\n    )\n  }\n)\n\nCartItemSelect.displayName = \"CartItemSelect\"\n\nexport default CartItemSelect\n"],"names":[],"mappings":";;;;;AAEA;AAAA;AACA;AASA;AAZA;;;;;AAoBA,MAAM,+BAAiB,IAAA,mNAAU,EAC/B,CAAC,EAAE,cAAc,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE;IAC7D,MAAM,WAAW,IAAA,+MAAM,EAAoB;IAC3C,MAAM,CAAC,eAAe,iBAAiB,GAAG,IAAA,iNAAQ,EAAC;IAEnD,IAAA,4NAAmB,EACjB,KACA,IAAM,SAAS,OAAO;IAGxB,IAAA,kNAAS,EAAC;QACR,IAAI,SAAS,OAAO,IAAI,SAAS,OAAO,CAAC,KAAK,KAAK,IAAI;YACrD,iBAAiB;QACnB,OAAO;YACL,iBAAiB;QACnB;IACF,GAAG;QAAC,SAAS,OAAO,EAAE;KAAM;IAE5B,qBACE,8OAAC;kBACC,cAAA,8OAAC,4MAAS;YACR,SAAS,IAAM,SAAS,OAAO,EAAE;YACjC,QAAQ,IAAM,SAAS,OAAO,EAAE;YAChC,WAAW,IAAA,sKAAG,EACZ,6EACA,WACA;gBACE,qBAAqB;YACvB;;8BAGF,8OAAC;oBACC,KAAK;oBACJ,GAAG,KAAK;oBACT,WAAU;;sCAEV,8OAAC;4BAAO,QAAQ;4BAAC,OAAM;sCACpB;;;;;;wBAEF;;;;;;;8BAEH,8OAAC;oBAAK,WAAU;8BACd,cAAA,8OAAC,gKAAW;;;;;;;;;;;;;;;;;;;;;AAKtB;AAGF,eAAe,WAAW,GAAG;uCAEd","debugId":null}},
    {"offset": {"line": 3632, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/data/cart.ts"],"sourcesContent":["\"use server\"\n\nimport { sdk } from \"@lib/config\"\nimport medusaError from \"@lib/util/medusa-error\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { revalidateTag } from \"next/cache\"\nimport { redirect } from \"next/navigation\"\nimport {\n  getAuthHeaders,\n  getCacheOptions,\n  getCacheTag,\n  getCartId,\n  removeCartId,\n  setCartId,\n} from \"./cookies\"\nimport { getRegion } from \"./regions\"\n\n/**\n * Retrieves a cart by its ID. If no ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to retrieve.\n * @returns The cart object if found, or null if not found.\n */\nexport async function retrieveCart(cartId?: string, fields?: string) {\n  const id = cartId || (await getCartId())\n  fields ??= \"*items, *region, *items.product, *items.variant, *items.thumbnail, *items.metadata, +items.total, *promotions, +shipping_methods.name\"\n\n  if (!id) {\n    return null\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const next = {\n    ...(await getCacheOptions(\"carts\")),\n  }\n\n  return await sdk.client\n    .fetch<HttpTypes.StoreCartResponse>(`/store/carts/${id}`, {\n      method: \"GET\",\n      query: {\n        fields\n      },\n      headers,\n      next,\n      cache: \"force-cache\",\n    })\n    .then(({ cart }: { cart: HttpTypes.StoreCart }) => cart)\n    .catch(() => null)\n}\n\nexport async function getOrSetCart(countryCode: string) {\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  let cart = await retrieveCart(undefined, 'id,region_id')\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  if (!cart) {\n    const cartResp = await sdk.store.cart.create(\n      { region_id: region.id },\n      {},\n      headers\n    )\n    cart = cartResp.cart\n\n    await setCartId(cart.id)\n\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  if (cart && cart?.region_id !== region.id) {\n    await sdk.store.cart.update(cart.id, { region_id: region.id }, {}, headers)\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  return cart\n}\n\nexport async function updateCart(data: HttpTypes.StoreUpdateCart) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found, please create one before updating\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, data, {}, headers)\n    .then(async ({ cart }: { cart: HttpTypes.StoreCart }) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n\n      return cart\n    })\n    .catch(medusaError)\n}\n\nexport async function addToCart({\n  variantId,\n  quantity,\n  countryCode,\n}: {\n  variantId: string\n  quantity: number\n  countryCode: string\n}) {\n  if (!variantId) {\n    throw new Error(\"Missing variant ID when adding to cart\")\n  }\n\n  const cart = await getOrSetCart(countryCode)\n\n  if (!cart) {\n    throw new Error(\"Error retrieving or creating cart\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .createLineItem(\n      cart.id,\n      {\n        variant_id: variantId,\n        quantity,\n      },\n      {},\n      headers\n    )\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function updateLineItem({\n  lineId,\n  quantity,\n}: {\n  lineId: string\n  quantity: number\n}) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when updating line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when updating line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .updateLineItem(cartId, lineId, { quantity }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function deleteLineItem(lineId: string) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when deleting line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when deleting line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .deleteLineItem(cartId, lineId, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function setShippingMethod({\n  cartId,\n  shippingMethodId,\n}: {\n  cartId: string\n  shippingMethodId: string\n}) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .addShippingMethod(cartId, { option_id: shippingMethodId }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function initiatePaymentSession(\n  cart: HttpTypes.StoreCart,\n  data: HttpTypes.StoreInitializePaymentSession\n) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.payment\n    .initiatePaymentSession(cart, data, {}, headers)\n    .then(async (resp) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return resp\n    })\n    .catch(medusaError)\n}\n\nexport async function applyPromotions(codes: string[]) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, { promo_codes: codes }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function applyGiftCard(code: string) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, { gift_cards: [{ code }] }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function removeDiscount(code: string) {\n  // const cartId = getCartId()\n  // if (!cartId) return \"No cartId cookie found\"\n  // try {\n  //   await deleteDiscount(cartId, code)\n  //   revalidateTag(\"cart\")\n  // } catch (error: any) {\n  //   throw error\n  // }\n}\n\nexport async function removeGiftCard(\n  codeToRemove: string,\n  giftCards: any[]\n  // giftCards: GiftCard[]\n) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, {\n  //       gift_cards: [...giftCards]\n  //         .filter((gc) => gc.code !== codeToRemove)\n  //         .map((gc) => ({ code: gc.code })),\n  //     }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function submitPromotionForm(\n  currentState: unknown,\n  formData: FormData\n) {\n  const code = formData.get(\"code\") as string\n  try {\n    await applyPromotions([code])\n  } catch (e: any) {\n    return e.message\n  }\n}\n\n// TODO: Pass a POJO instead of a form entity here\nexport async function setAddresses(currentState: unknown, formData: FormData) {\n  try {\n    if (!formData) {\n      throw new Error(\"No form data found when setting addresses\")\n    }\n    const cartId = getCartId()\n    if (!cartId) {\n      throw new Error(\"No existing cart found when setting addresses\")\n    }\n\n    const data = {\n      shipping_address: {\n        first_name: formData.get(\"shipping_address.first_name\"),\n        last_name: formData.get(\"shipping_address.last_name\"),\n        address_1: formData.get(\"shipping_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"shipping_address.company\"),\n        postal_code: formData.get(\"shipping_address.postal_code\"),\n        city: formData.get(\"shipping_address.city\"),\n        country_code: formData.get(\"shipping_address.country_code\"),\n        province: formData.get(\"shipping_address.province\"),\n        phone: formData.get(\"shipping_address.phone\"),\n      },\n      email: formData.get(\"email\"),\n    } as any\n\n    const sameAsBilling = formData.get(\"same_as_billing\")\n    if (sameAsBilling === \"on\") data.billing_address = data.shipping_address\n\n    if (sameAsBilling !== \"on\")\n      data.billing_address = {\n        first_name: formData.get(\"billing_address.first_name\"),\n        last_name: formData.get(\"billing_address.last_name\"),\n        address_1: formData.get(\"billing_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"billing_address.company\"),\n        postal_code: formData.get(\"billing_address.postal_code\"),\n        city: formData.get(\"billing_address.city\"),\n        country_code: formData.get(\"billing_address.country_code\"),\n        province: formData.get(\"billing_address.province\"),\n        phone: formData.get(\"billing_address.phone\"),\n      }\n    await updateCart(data)\n  } catch (e: any) {\n    return e.message\n  }\n\n  redirect(\n    `/${formData.get(\"shipping_address.country_code\")}/checkout?step=delivery`\n  )\n}\n\n/**\n * Places an order for a cart. If no cart ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to place an order for.\n * @returns The cart object if the order was successful, or null if not.\n */\nexport async function placeOrder(cartId?: string) {\n  const id = cartId || (await getCartId())\n\n  if (!id) {\n    throw new Error(\"No existing cart found when placing an order\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const cartRes = await sdk.store.cart\n    .complete(id, {}, headers)\n    .then(async (cartRes) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return cartRes\n    })\n    .catch(medusaError)\n\n  if (cartRes?.type === \"order\") {\n    const countryCode =\n      cartRes.order.shipping_address?.country_code?.toLowerCase()\n\n    const orderCacheTag = await getCacheTag(\"orders\")\n    revalidateTag(orderCacheTag)\n\n    removeCartId()\n    redirect(`/${countryCode}/order/${cartRes?.order.id}/confirmed`)\n  }\n\n  return cartRes.cart\n}\n\n/**\n * Updates the countrycode param and revalidates the regions cache\n * @param regionId\n * @param countryCode\n */\nexport async function updateRegion(countryCode: string, currentPath: string) {\n  const cartId = await getCartId()\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  if (cartId) {\n    await updateCart({ region_id: region.id })\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  const regionCacheTag = await getCacheTag(\"regions\")\n  revalidateTag(regionCacheTag)\n\n  const productsCacheTag = await getCacheTag(\"products\")\n  revalidateTag(productsCacheTag)\n\n  redirect(`/${countryCode}${currentPath}`)\n}\n\nexport async function listCartOptions() {\n  const cartId = await getCartId()\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n  const next = {\n    ...(await getCacheOptions(\"shippingOptions\")),\n  }\n\n  return await sdk.client.fetch<{\n    shipping_options: HttpTypes.StoreCartShippingOption[]\n  }>(\"/store/shipping-options\", {\n    query: { cart_id: cartId },\n    next,\n    headers,\n    cache: \"force-cache\",\n  })\n}\n"],"names":[],"mappings":";;;;;;;IA6LsB,iBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 3644, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/components/delete-button/index.tsx"],"sourcesContent":["import { deleteLineItem } from \"@lib/data/cart\"\nimport { Spinner, Trash } from \"@medusajs/icons\"\nimport { clx } from \"@medusajs/ui\"\nimport { useState } from \"react\"\n\nconst DeleteButton = ({\n  id,\n  children,\n  className,\n}: {\n  id: string\n  children?: React.ReactNode\n  className?: string\n}) => {\n  const [isDeleting, setIsDeleting] = useState(false)\n\n  const handleDelete = async (id: string) => {\n    setIsDeleting(true)\n    await deleteLineItem(id).catch((err) => {\n      setIsDeleting(false)\n    })\n  }\n\n  return (\n    <div\n      className={clx(\n        \"flex items-center justify-between text-small-regular\",\n        className\n      )}\n    >\n      <button\n        className=\"flex gap-x-1 text-ui-fg-subtle hover:text-ui-fg-base cursor-pointer\"\n        onClick={() => handleDelete(id)}\n      >\n        {isDeleting ? <Spinner className=\"animate-spin\" /> : <Trash />}\n        <span>{children}</span>\n      </button>\n    </div>\n  )\n}\n\nexport default DeleteButton\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAAA;AACA;AACA;;;;;;AAEA,MAAM,eAAe,CAAC,EACpB,EAAE,EACF,QAAQ,EACR,SAAS,EAKV;IACC,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,iNAAQ,EAAC;IAE7C,MAAM,eAAe,OAAO;QAC1B,cAAc;QACd,MAAM,IAAA,4KAAc,EAAC,IAAI,KAAK,CAAC,CAAC;YAC9B,cAAc;QAChB;IACF;IAEA,qBACE,8OAAC;QACC,WAAW,IAAA,sKAAG,EACZ,wDACA;kBAGF,cAAA,8OAAC;YACC,WAAU;YACV,SAAS,IAAM,aAAa;;gBAE3B,2BAAa,8OAAC,8MAAO;oBAAC,WAAU;;;;;6EAAoB,8OAAC,wMAAK;;;;;8BAC3D,8OAAC;8BAAM;;;;;;;;;;;;;;;;;AAIf;uCAEe","debugId":null}},
    {"offset": {"line": 3708, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/components/line-item-options/index.tsx"],"sourcesContent":["import { HttpTypes } from \"@medusajs/types\"\nimport { Text } from \"@medusajs/ui\"\n\ntype LineItemOptionsProps = {\n  variant: HttpTypes.StoreProductVariant | undefined\n  \"data-testid\"?: string\n  \"data-value\"?: HttpTypes.StoreProductVariant\n}\n\nconst LineItemOptions = ({\n  variant,\n  \"data-testid\": dataTestid,\n  \"data-value\": dataValue,\n}: LineItemOptionsProps) => {\n  return (\n    <Text\n      data-testid={dataTestid}\n      data-value={dataValue}\n      className=\"inline-block txt-medium text-ui-fg-subtle w-full overflow-hidden text-ellipsis\"\n    >\n      Variant: {variant?.title}\n    </Text>\n  )\n}\n\nexport default LineItemOptions\n"],"names":[],"mappings":";;;;;AACA;;;AAQA,MAAM,kBAAkB,CAAC,EACvB,OAAO,EACP,eAAe,UAAU,EACzB,cAAc,SAAS,EACF;IACrB,qBACE,8OAAC,qLAAI;QACH,eAAa;QACb,cAAY;QACZ,WAAU;;YACX;YACW,SAAS;;;;;;;AAGzB;uCAEe","debugId":null}},
    {"offset": {"line": 3736, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/util/get-precentage-diff.ts"],"sourcesContent":["export const getPercentageDiff = (original: number, calculated: number) => {\n  const diff = original - calculated\n  const decrease = (diff / original) * 100\n\n  return decrease.toFixed()\n}\n"],"names":[],"mappings":";;;;AAAO,MAAM,oBAAoB,CAAC,UAAkB;IAClD,MAAM,OAAO,WAAW;IACxB,MAAM,WAAW,AAAC,OAAO,WAAY;IAErC,OAAO,SAAS,OAAO;AACzB","debugId":null}},
    {"offset": {"line": 3749, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/components/line-item-price/index.tsx"],"sourcesContent":["import { getPercentageDiff } from \"@lib/util/get-precentage-diff\"\nimport { convertToLocale } from \"@lib/util/money\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { clx } from \"@medusajs/ui\"\n\ntype LineItemPriceProps = {\n  item: HttpTypes.StoreCartLineItem | HttpTypes.StoreOrderLineItem\n  style?: \"default\" | \"tight\"\n  currencyCode: string\n}\n\nconst LineItemPrice = ({\n  item,\n  style = \"default\",\n  currencyCode,\n}: LineItemPriceProps) => {\n  const { total, original_total } = item\n  const originalPrice = original_total\n  const currentPrice = total\n  const hasReducedPrice = currentPrice < originalPrice\n\n  return (\n    <div className=\"flex flex-col gap-x-2 text-ui-fg-subtle items-end\">\n      <div className=\"text-left\">\n        {hasReducedPrice && (\n          <>\n            <p>\n              {style === \"default\" && (\n                <span className=\"text-ui-fg-subtle\">Original: </span>\n              )}\n              <span\n                className=\"line-through text-ui-fg-muted\"\n                data-testid=\"product-original-price\"\n              >\n                {convertToLocale({\n                  amount: originalPrice,\n                  currency_code: currencyCode,\n                })}\n              </span>\n            </p>\n            {style === \"default\" && (\n              <span className=\"text-ui-fg-interactive\">\n                -{getPercentageDiff(originalPrice, currentPrice || 0)}%\n              </span>\n            )}\n          </>\n        )}\n        <span\n          className={clx(\"text-base-regular\", {\n            \"text-ui-fg-interactive\": hasReducedPrice,\n          })}\n          data-testid=\"product-price\"\n        >\n          {convertToLocale({\n            amount: currentPrice,\n            currency_code: currencyCode,\n          })}\n        </span>\n      </div>\n    </div>\n  )\n}\n\nexport default LineItemPrice\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAEA;;;;;AAQA,MAAM,gBAAgB,CAAC,EACrB,IAAI,EACJ,QAAQ,SAAS,EACjB,YAAY,EACO;IACnB,MAAM,EAAE,KAAK,EAAE,cAAc,EAAE,GAAG;IAClC,MAAM,gBAAgB;IACtB,MAAM,eAAe;IACrB,MAAM,kBAAkB,eAAe;IAEvC,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;gBACZ,iCACC;;sCACE,8OAAC;;gCACE,UAAU,2BACT,8OAAC;oCAAK,WAAU;8CAAoB;;;;;;8CAEtC,8OAAC;oCACC,WAAU;oCACV,eAAY;8CAEX,IAAA,8IAAe,EAAC;wCACf,QAAQ;wCACR,eAAe;oCACjB;;;;;;;;;;;;wBAGH,UAAU,2BACT,8OAAC;4BAAK,WAAU;;gCAAyB;gCACrC,IAAA,oKAAiB,EAAC,eAAe,gBAAgB;gCAAG;;;;;;;;;8BAK9D,8OAAC;oBACC,WAAW,IAAA,sKAAG,EAAC,qBAAqB;wBAClC,0BAA0B;oBAC5B;oBACA,eAAY;8BAEX,IAAA,8IAAe,EAAC;wBACf,QAAQ;wBACR,eAAe;oBACjB;;;;;;;;;;;;;;;;;AAKV;uCAEe","debugId":null}},
    {"offset": {"line": 3846, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/components/line-item-unit-price/index.tsx"],"sourcesContent":["import { convertToLocale } from \"@lib/util/money\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { clx } from \"@medusajs/ui\"\n\ntype LineItemUnitPriceProps = {\n  item: HttpTypes.StoreCartLineItem | HttpTypes.StoreOrderLineItem\n  style?: \"default\" | \"tight\"\n  currencyCode: string\n}\n\nconst LineItemUnitPrice = ({\n  item,\n  style = \"default\",\n  currencyCode,\n}: LineItemUnitPriceProps) => {\n  const { total, original_total } = item\n  const hasReducedPrice = total < original_total\n\n  const percentage_diff = Math.round(\n    ((original_total - total) / original_total) * 100\n  )\n\n  return (\n    <div className=\"flex flex-col text-ui-fg-muted justify-center h-full\">\n      {hasReducedPrice && (\n        <>\n          <p>\n            {style === \"default\" && (\n              <span className=\"text-ui-fg-muted\">Original: </span>\n            )}\n            <span\n              className=\"line-through\"\n              data-testid=\"product-unit-original-price\"\n            >\n              {convertToLocale({\n                amount: original_total / item.quantity,\n                currency_code: currencyCode,\n              })}\n            </span>\n          </p>\n          {style === \"default\" && (\n            <span className=\"text-ui-fg-interactive\">-{percentage_diff}%</span>\n          )}\n        </>\n      )}\n      <span\n        className={clx(\"text-base-regular\", {\n          \"text-ui-fg-interactive\": hasReducedPrice,\n        })}\n        data-testid=\"product-unit-price\"\n      >\n        {convertToLocale({\n          amount: total / item.quantity,\n          currency_code: currencyCode,\n        })}\n      </span>\n    </div>\n  )\n}\n\nexport default LineItemUnitPrice\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAQA,MAAM,oBAAoB,CAAC,EACzB,IAAI,EACJ,QAAQ,SAAS,EACjB,YAAY,EACW;IACvB,MAAM,EAAE,KAAK,EAAE,cAAc,EAAE,GAAG;IAClC,MAAM,kBAAkB,QAAQ;IAEhC,MAAM,kBAAkB,KAAK,KAAK,CAChC,AAAC,CAAC,iBAAiB,KAAK,IAAI,iBAAkB;IAGhD,qBACE,8OAAC;QAAI,WAAU;;YACZ,iCACC;;kCACE,8OAAC;;4BACE,UAAU,2BACT,8OAAC;gCAAK,WAAU;0CAAmB;;;;;;0CAErC,8OAAC;gCACC,WAAU;gCACV,eAAY;0CAEX,IAAA,8IAAe,EAAC;oCACf,QAAQ,iBAAiB,KAAK,QAAQ;oCACtC,eAAe;gCACjB;;;;;;;;;;;;oBAGH,UAAU,2BACT,8OAAC;wBAAK,WAAU;;4BAAyB;4BAAE;4BAAgB;;;;;;;;;0BAIjE,8OAAC;gBACC,WAAW,IAAA,sKAAG,EAAC,qBAAqB;oBAClC,0BAA0B;gBAC5B;gBACA,eAAY;0BAEX,IAAA,8IAAe,EAAC;oBACf,QAAQ,QAAQ,KAAK,QAAQ;oBAC7B,eAAe;gBACjB;;;;;;;;;;;;AAIR;uCAEe","debugId":null}},
    {"offset": {"line": 3933, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/icons/placeholder-image.tsx"],"sourcesContent":["import React from \"react\"\n\nimport { IconProps } from \"types/icon\"\n\nconst PlaceholderImage: React.FC<IconProps> = ({\n  size = \"20\",\n  color = \"currentColor\",\n  ...attributes\n}) => {\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...attributes}\n    >\n      <path\n        d=\"M15.3141 3.16699H4.68453C3.84588 3.16699 3.16602 3.84685 3.16602 4.6855V15.3151C3.16602 16.1537 3.84588 16.8336 4.68453 16.8336H15.3141C16.1527 16.8336 16.8326 16.1537 16.8326 15.3151V4.6855C16.8326 3.84685 16.1527 3.16699 15.3141 3.16699Z\"\n        stroke={color}\n        strokeWidth=\"1.53749\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M7.91699 9.16699C8.60735 9.16699 9.16699 8.60735 9.16699 7.91699C9.16699 7.22664 8.60735 6.66699 7.91699 6.66699C7.22664 6.66699 6.66699 7.22664 6.66699 7.91699C6.66699 8.60735 7.22664 9.16699 7.91699 9.16699Z\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M16.6667 12.5756L13.0208 9.1665L5 16.6665\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  )\n}\n\nexport default PlaceholderImage\n"],"names":[],"mappings":";;;;;;AAIA,MAAM,mBAAwC,CAAC,EAC7C,OAAO,IAAI,EACX,QAAQ,cAAc,EACtB,GAAG,YACJ;IACC,qBACE,8OAAC;QACC,OAAO;QACP,QAAQ;QACR,SAAQ;QACR,MAAK;QACL,OAAM;QACL,GAAG,UAAU;;0BAEd,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;0BAEjB,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;0BAEjB,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;;;;;;;AAIvB;uCAEe","debugId":null}},
    {"offset": {"line": 3993, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/products/components/thumbnail/index.tsx"],"sourcesContent":["import { Container, clx } from \"@medusajs/ui\"\nimport Image from \"next/image\"\nimport React from \"react\"\n\nimport PlaceholderImage from \"@modules/common/icons/placeholder-image\"\n\ntype ThumbnailProps = {\n  thumbnail?: string | null\n  // TODO: Fix image typings\n  images?: any[] | null\n  size?: \"small\" | \"medium\" | \"large\" | \"full\" | \"square\"\n  isFeatured?: boolean\n  className?: string\n  \"data-testid\"?: string\n}\n\nconst Thumbnail: React.FC<ThumbnailProps> = ({\n  thumbnail,\n  images,\n  size = \"small\",\n  isFeatured,\n  className,\n  \"data-testid\": dataTestid,\n}) => {\n  const initialImage = thumbnail || images?.[0]?.url\n\n  return (\n    <Container\n      className={clx(\n        \"relative w-full overflow-hidden p-4 bg-ui-bg-subtle shadow-elevation-card-rest rounded-large group-hover:shadow-elevation-card-hover transition-shadow ease-in-out duration-150\",\n        className,\n        {\n          \"aspect-[11/14]\": isFeatured,\n          \"aspect-[9/16]\": !isFeatured && size !== \"square\",\n          \"aspect-[1/1]\": size === \"square\",\n          \"w-[180px]\": size === \"small\",\n          \"w-[290px]\": size === \"medium\",\n          \"w-[440px]\": size === \"large\",\n          \"w-full\": size === \"full\",\n        }\n      )}\n      data-testid={dataTestid}\n    >\n      <ImageOrPlaceholder image={initialImage} size={size} />\n    </Container>\n  )\n}\n\nconst ImageOrPlaceholder = ({\n  image,\n  size,\n}: Pick<ThumbnailProps, \"size\"> & { image?: string }) => {\n  return image ? (\n    <Image\n      src={image}\n      alt=\"Thumbnail\"\n      className=\"absolute inset-0 object-cover object-center\"\n      draggable={false}\n      quality={50}\n      sizes=\"(max-width: 576px) 280px, (max-width: 768px) 360px, (max-width: 992px) 480px, 800px\"\n      fill\n    />\n  ) : (\n    <div className=\"w-full h-full absolute inset-0 flex items-center justify-center\">\n      <PlaceholderImage size={size === \"small\" ? 16 : 24} />\n    </div>\n  )\n}\n\nexport default Thumbnail\n"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;AAGA;;;;;AAYA,MAAM,YAAsC,CAAC,EAC3C,SAAS,EACT,MAAM,EACN,OAAO,OAAO,EACd,UAAU,EACV,SAAS,EACT,eAAe,UAAU,EAC1B;IACC,MAAM,eAAe,aAAa,QAAQ,CAAC,EAAE,EAAE;IAE/C,qBACE,8OAAC,oMAAS;QACR,WAAW,IAAA,sKAAG,EACZ,mLACA,WACA;YACE,kBAAkB;YAClB,iBAAiB,CAAC,cAAc,SAAS;YACzC,gBAAgB,SAAS;YACzB,aAAa,SAAS;YACtB,aAAa,SAAS;YACtB,aAAa,SAAS;YACtB,UAAU,SAAS;QACrB;QAEF,eAAa;kBAEb,cAAA,8OAAC;YAAmB,OAAO;YAAc,MAAM;;;;;;;;;;;AAGrD;AAEA,MAAM,qBAAqB,CAAC,EAC1B,KAAK,EACL,IAAI,EAC8C;IAClD,OAAO,sBACL,8OAAC,wIAAK;QACJ,KAAK;QACL,KAAI;QACJ,WAAU;QACV,WAAW;QACX,SAAS;QACT,OAAM;QACN,IAAI;;;;;iEAGN,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC,qKAAgB;YAAC,MAAM,SAAS,UAAU,KAAK;;;;;;;;;;;AAGtD;uCAEe","debugId":null}},
    {"offset": {"line": 4066, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/cart/components/item/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { Table, Text, clx } from \"@medusajs/ui\"\nimport { updateLineItem } from \"@lib/data/cart\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport CartItemSelect from \"@modules/cart/components/cart-item-select\"\nimport ErrorMessage from \"@modules/checkout/components/error-message\"\nimport DeleteButton from \"@modules/common/components/delete-button\"\nimport LineItemOptions from \"@modules/common/components/line-item-options\"\nimport LineItemPrice from \"@modules/common/components/line-item-price\"\nimport LineItemUnitPrice from \"@modules/common/components/line-item-unit-price\"\nimport LocalizedClientLink from \"@modules/common/components/localized-client-link\"\nimport Spinner from \"@modules/common/icons/spinner\"\nimport Thumbnail from \"@modules/products/components/thumbnail\"\nimport { useState } from \"react\"\n\ntype ItemProps = {\n  item: HttpTypes.StoreCartLineItem\n  type?: \"full\" | \"preview\"\n  currencyCode: string\n}\n\nconst Item = ({ item, type = \"full\", currencyCode }: ItemProps) => {\n  const [updating, setUpdating] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const changeQuantity = async (quantity: number) => {\n    setError(null)\n    setUpdating(true)\n\n    await updateLineItem({\n      lineId: item.id,\n      quantity,\n    })\n      .catch((err) => {\n        setError(err.message)\n      })\n      .finally(() => {\n        setUpdating(false)\n      })\n  }\n\n  // TODO: Update this to grab the actual max inventory\n  const maxQtyFromInventory = 10\n  const maxQuantity = item.variant?.manage_inventory ? 10 : maxQtyFromInventory\n\n  return (\n    <Table.Row className=\"w-full\" data-testid=\"product-row\">\n      <Table.Cell className=\"!pl-0 p-4 w-24\">\n        <LocalizedClientLink\n          href={`/products/${item.product_handle}`}\n          className={clx(\"flex\", {\n            \"w-16\": type === \"preview\",\n            \"small:w-24 w-12\": type === \"full\",\n          })}\n        >\n          <Thumbnail\n            thumbnail={item.thumbnail}\n            images={item.variant?.product?.images}\n            size=\"square\"\n          />\n        </LocalizedClientLink>\n      </Table.Cell>\n\n      <Table.Cell className=\"text-left\">\n        <Text\n          className=\"txt-medium-plus text-ui-fg-base\"\n          data-testid=\"product-title\"\n        >\n          {item.product_title}\n        </Text>\n        <LineItemOptions variant={item.variant} data-testid=\"product-variant\" />\n      </Table.Cell>\n\n      {type === \"full\" && (\n        <Table.Cell>\n          <div className=\"flex gap-2 items-center w-28\">\n            <DeleteButton id={item.id} data-testid=\"product-delete-button\" />\n            <CartItemSelect\n              value={item.quantity}\n              onChange={(value) => changeQuantity(parseInt(value.target.value))}\n              className=\"w-14 h-10 p-4\"\n              data-testid=\"product-select-button\"\n            >\n              {/* TODO: Update this with the v2 way of managing inventory */}\n              {Array.from(\n                {\n                  length: Math.min(maxQuantity, 10),\n                },\n                (_, i) => (\n                  <option value={i + 1} key={i}>\n                    {i + 1}\n                  </option>\n                )\n              )}\n\n              <option value={1} key={1}>\n                1\n              </option>\n            </CartItemSelect>\n            {updating && <Spinner />}\n          </div>\n          <ErrorMessage error={error} data-testid=\"product-error-message\" />\n        </Table.Cell>\n      )}\n\n      {type === \"full\" && (\n        <Table.Cell className=\"hidden small:table-cell\">\n          <LineItemUnitPrice\n            item={item}\n            style=\"tight\"\n            currencyCode={currencyCode}\n          />\n        </Table.Cell>\n      )}\n\n      <Table.Cell className=\"!pr-0\">\n        <span\n          className={clx(\"!pr-0\", {\n            \"flex flex-col items-end h-full justify-center\": type === \"preview\",\n          })}\n        >\n          {type === \"preview\" && (\n            <span className=\"flex gap-x-1 \">\n              <Text className=\"text-ui-fg-muted\">{item.quantity}x </Text>\n              <LineItemUnitPrice\n                item={item}\n                style=\"tight\"\n                currencyCode={currencyCode}\n              />\n            </span>\n          )}\n          <LineItemPrice\n            item={item}\n            style=\"tight\"\n            currencyCode={currencyCode}\n          />\n        </span>\n      </Table.Cell>\n    </Table.Row>\n  )\n}\n\nexport default Item\n"],"names":[],"mappings":";;;;;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;;;;;;;;;;;;;;AAsBA,MAAM,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,MAAM,EAAE,YAAY,EAAa;IAC5D,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,iNAAQ,EAAC;IACzC,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,iNAAQ,EAAgB;IAElD,MAAM,iBAAiB,OAAO;QAC5B,SAAS;QACT,YAAY;QAEZ,MAAM,IAAA,4KAAc,EAAC;YACnB,QAAQ,KAAK,EAAE;YACf;QACF,GACG,KAAK,CAAC,CAAC;YACN,SAAS,IAAI,OAAO;QACtB,GACC,OAAO,CAAC;YACP,YAAY;QACd;IACJ;IAEA,qDAAqD;IACrD,MAAM,sBAAsB;IAC5B,MAAM,cAAc,KAAK,OAAO,EAAE,mBAAmB,KAAK;IAE1D,qBACE,8OAAC,wLAAK,CAAC,GAAG;QAAC,WAAU;QAAS,eAAY;;0BACxC,8OAAC,wLAAK,CAAC,IAAI;gBAAC,WAAU;0BACpB,cAAA,8OAAC,0LAAmB;oBAClB,MAAM,CAAC,UAAU,EAAE,KAAK,cAAc,EAAE;oBACxC,WAAW,IAAA,sKAAG,EAAC,QAAQ;wBACrB,QAAQ,SAAS;wBACjB,mBAAmB,SAAS;oBAC9B;8BAEA,cAAA,8OAAC,0KAAS;wBACR,WAAW,KAAK,SAAS;wBACzB,QAAQ,KAAK,OAAO,EAAE,SAAS;wBAC/B,MAAK;;;;;;;;;;;;;;;;0BAKX,8OAAC,wLAAK,CAAC,IAAI;gBAAC,WAAU;;kCACpB,8OAAC,qLAAI;wBACH,WAAU;wBACV,eAAY;kCAEX,KAAK,aAAa;;;;;;kCAErB,8OAAC,sLAAe;wBAAC,SAAS,KAAK,OAAO;wBAAE,eAAY;;;;;;;;;;;;YAGrD,SAAS,wBACR,8OAAC,wLAAK,CAAC,IAAI;;kCACT,8OAAC;wBAAI,WAAU;;0CACb,8OAAC,+KAAY;gCAAC,IAAI,KAAK,EAAE;gCAAE,eAAY;;;;;;0CACvC,8OAAC,mLAAc;gCACb,OAAO,KAAK,QAAQ;gCACpB,UAAU,CAAC,QAAU,eAAe,SAAS,MAAM,MAAM,CAAC,KAAK;gCAC/D,WAAU;gCACV,eAAY;;oCAGX,MAAM,IAAI,CACT;wCACE,QAAQ,KAAK,GAAG,CAAC,aAAa;oCAChC,GACA,CAAC,GAAG,kBACF,8OAAC;4CAAO,OAAO,IAAI;sDAChB,IAAI;2CADoB;;;;;kDAM/B,8OAAC;wCAAO,OAAO;kDAAW;uCAAH;;;;;;;;;;;4BAIxB,0BAAY,8OAAC,wJAAO;;;;;;;;;;;kCAEvB,8OAAC,iLAAY;wBAAC,OAAO;wBAAO,eAAY;;;;;;;;;;;;YAI3C,SAAS,wBACR,8OAAC,wLAAK,CAAC,IAAI;gBAAC,WAAU;0BACpB,cAAA,8OAAC,4LAAiB;oBAChB,MAAM;oBACN,OAAM;oBACN,cAAc;;;;;;;;;;;0BAKpB,8OAAC,wLAAK,CAAC,IAAI;gBAAC,WAAU;0BACpB,cAAA,8OAAC;oBACC,WAAW,IAAA,sKAAG,EAAC,SAAS;wBACtB,iDAAiD,SAAS;oBAC5D;;wBAEC,SAAS,2BACR,8OAAC;4BAAK,WAAU;;8CACd,8OAAC,qLAAI;oCAAC,WAAU;;wCAAoB,KAAK,QAAQ;wCAAC;;;;;;;8CAClD,8OAAC,4LAAiB;oCAChB,MAAM;oCACN,OAAM;oCACN,cAAc;;;;;;;;;;;;sCAIpB,8OAAC,oLAAa;4BACZ,MAAM;4BACN,OAAM;4BACN,cAAc;;;;;;;;;;;;;;;;;;;;;;;AAM1B;uCAEe","debugId":null}},
    {"offset": {"line": 4326, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/skeletons/components/skeleton-line-item/index.tsx"],"sourcesContent":["import { Table } from \"@medusajs/ui\"\n\nconst SkeletonLineItem = () => {\n  return (\n    <Table.Row className=\"w-full m-4\">\n      <Table.Cell className=\"p-4 w-24\">\n        <div className=\"flex w-24 h-24 p-4 bg-gray-200 animate-pulse\" />\n      </Table.Cell>\n      <Table.Cell className=\"text-left\">\n        <div className=\"flex flex-col gap-y-2\">\n          <div className=\"w-32 h-4 bg-gray-200 animate-pulse\" />\n          <div className=\"w-24 h-4 bg-gray-200 animate-pulse\" />\n        </div>\n      </Table.Cell>\n      <Table.Cell>\n        <div className=\"flex gap-2 items-center\">\n          <div className=\"w-6 h-8 bg-gray-200 animate-pulse\" />\n          <div className=\"w-14 h-10 bg-gray-200 animate-pulse\" />\n        </div>\n      </Table.Cell>\n      <Table.Cell>\n        <div className=\"flex gap-2\">\n          <div className=\"w-12 h-6 bg-gray-200 animate-pulse\" />\n        </div>\n      </Table.Cell>\n      <Table.Cell>\n        <div className=\"flex gap-2 justify-end\">\n          <div className=\"w-12 h-6 bg-gray-200 animate-pulse\" />\n        </div>\n      </Table.Cell>\n    </Table.Row>\n  )\n}\n\nexport default SkeletonLineItem\n"],"names":[],"mappings":";;;;;AAAA;;;AAEA,MAAM,mBAAmB;IACvB,qBACE,8OAAC,wLAAK,CAAC,GAAG;QAAC,WAAU;;0BACnB,8OAAC,wLAAK,CAAC,IAAI;gBAAC,WAAU;0BACpB,cAAA,8OAAC;oBAAI,WAAU;;;;;;;;;;;0BAEjB,8OAAC,wLAAK,CAAC,IAAI;gBAAC,WAAU;0BACpB,cAAA,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;;;;;;;;;;;;0BAGnB,8OAAC,wLAAK,CAAC,IAAI;0BACT,cAAA,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAI,WAAU;;;;;;;;;;;;;;;;;0BAGnB,8OAAC,wLAAK,CAAC,IAAI;0BACT,cAAA,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAI,WAAU;;;;;;;;;;;;;;;;0BAGnB,8OAAC,wLAAK,CAAC,IAAI;0BACT,cAAA,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAI,WAAU;;;;;;;;;;;;;;;;;;;;;;AAKzB;uCAEe","debugId":null}},
    {"offset": {"line": 4463, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/cart/templates/preview.tsx"],"sourcesContent":["\"use client\"\n\nimport repeat from \"@lib/util/repeat\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { Table, clx } from \"@medusajs/ui\"\n\nimport Item from \"@modules/cart/components/item\"\nimport SkeletonLineItem from \"@modules/skeletons/components/skeleton-line-item\"\n\ntype ItemsTemplateProps = {\n  cart: HttpTypes.StoreCart\n}\n\nconst ItemsPreviewTemplate = ({ cart }: ItemsTemplateProps) => {\n  const items = cart.items\n  const hasOverflow = items && items.length > 4\n\n  return (\n    <div\n      className={clx({\n        \"pl-[1px] overflow-y-scroll overflow-x-hidden no-scrollbar max-h-[420px]\":\n          hasOverflow,\n      })}\n    >\n      <Table>\n        <Table.Body data-testid=\"items-table\">\n          {items\n            ? items\n                .sort((a, b) => {\n                  return (a.created_at ?? \"\") > (b.created_at ?? \"\") ? -1 : 1\n                })\n                .map((item) => {\n                  return (\n                    <Item\n                      key={item.id}\n                      item={item}\n                      type=\"preview\"\n                      currencyCode={cart.currency_code}\n                    />\n                  )\n                })\n            : repeat(5).map((i) => {\n                return <SkeletonLineItem key={i} />\n              })}\n        </Table.Body>\n      </Table>\n    </div>\n  )\n}\n\nexport default ItemsPreviewTemplate\n"],"names":[],"mappings":";;;;;AAEA;AAEA;AAAA;AAEA;AACA;AAPA;;;;;;AAaA,MAAM,uBAAuB,CAAC,EAAE,IAAI,EAAsB;IACxD,MAAM,QAAQ,KAAK,KAAK;IACxB,MAAM,cAAc,SAAS,MAAM,MAAM,GAAG;IAE5C,qBACE,8OAAC;QACC,WAAW,IAAA,sKAAG,EAAC;YACb,2EACE;QACJ;kBAEA,cAAA,8OAAC,wLAAK;sBACJ,cAAA,8OAAC,wLAAK,CAAC,IAAI;gBAAC,eAAY;0BACrB,QACG,MACG,IAAI,CAAC,CAAC,GAAG;oBACR,OAAO,CAAC,EAAE,UAAU,IAAI,EAAE,IAAI,CAAC,EAAE,UAAU,IAAI,EAAE,IAAI,CAAC,IAAI;gBAC5D,GACC,GAAG,CAAC,CAAC;oBACJ,qBACE,8OAAC,iKAAI;wBAEH,MAAM;wBACN,MAAK;wBACL,cAAc,KAAK,aAAa;uBAH3B,KAAK,EAAE;;;;;gBAMlB,KACF,IAAA,uIAAM,EAAC,GAAG,GAAG,CAAC,CAAC;oBACb,qBAAO,8OAAC,0LAAgB,MAAM;;;;;gBAChC;;;;;;;;;;;;;;;;AAKd;uCAEe","debugId":null}},
    {"offset": {"line": 4529, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/data/cart.ts"],"sourcesContent":["\"use server\"\n\nimport { sdk } from \"@lib/config\"\nimport medusaError from \"@lib/util/medusa-error\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { revalidateTag } from \"next/cache\"\nimport { redirect } from \"next/navigation\"\nimport {\n  getAuthHeaders,\n  getCacheOptions,\n  getCacheTag,\n  getCartId,\n  removeCartId,\n  setCartId,\n} from \"./cookies\"\nimport { getRegion } from \"./regions\"\n\n/**\n * Retrieves a cart by its ID. If no ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to retrieve.\n * @returns The cart object if found, or null if not found.\n */\nexport async function retrieveCart(cartId?: string, fields?: string) {\n  const id = cartId || (await getCartId())\n  fields ??= \"*items, *region, *items.product, *items.variant, *items.thumbnail, *items.metadata, +items.total, *promotions, +shipping_methods.name\"\n\n  if (!id) {\n    return null\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const next = {\n    ...(await getCacheOptions(\"carts\")),\n  }\n\n  return await sdk.client\n    .fetch<HttpTypes.StoreCartResponse>(`/store/carts/${id}`, {\n      method: \"GET\",\n      query: {\n        fields\n      },\n      headers,\n      next,\n      cache: \"force-cache\",\n    })\n    .then(({ cart }: { cart: HttpTypes.StoreCart }) => cart)\n    .catch(() => null)\n}\n\nexport async function getOrSetCart(countryCode: string) {\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  let cart = await retrieveCart(undefined, 'id,region_id')\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  if (!cart) {\n    const cartResp = await sdk.store.cart.create(\n      { region_id: region.id },\n      {},\n      headers\n    )\n    cart = cartResp.cart\n\n    await setCartId(cart.id)\n\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  if (cart && cart?.region_id !== region.id) {\n    await sdk.store.cart.update(cart.id, { region_id: region.id }, {}, headers)\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  return cart\n}\n\nexport async function updateCart(data: HttpTypes.StoreUpdateCart) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found, please create one before updating\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, data, {}, headers)\n    .then(async ({ cart }: { cart: HttpTypes.StoreCart }) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n\n      return cart\n    })\n    .catch(medusaError)\n}\n\nexport async function addToCart({\n  variantId,\n  quantity,\n  countryCode,\n}: {\n  variantId: string\n  quantity: number\n  countryCode: string\n}) {\n  if (!variantId) {\n    throw new Error(\"Missing variant ID when adding to cart\")\n  }\n\n  const cart = await getOrSetCart(countryCode)\n\n  if (!cart) {\n    throw new Error(\"Error retrieving or creating cart\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .createLineItem(\n      cart.id,\n      {\n        variant_id: variantId,\n        quantity,\n      },\n      {},\n      headers\n    )\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function updateLineItem({\n  lineId,\n  quantity,\n}: {\n  lineId: string\n  quantity: number\n}) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when updating line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when updating line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .updateLineItem(cartId, lineId, { quantity }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function deleteLineItem(lineId: string) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when deleting line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when deleting line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .deleteLineItem(cartId, lineId, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function setShippingMethod({\n  cartId,\n  shippingMethodId,\n}: {\n  cartId: string\n  shippingMethodId: string\n}) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .addShippingMethod(cartId, { option_id: shippingMethodId }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function initiatePaymentSession(\n  cart: HttpTypes.StoreCart,\n  data: HttpTypes.StoreInitializePaymentSession\n) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.payment\n    .initiatePaymentSession(cart, data, {}, headers)\n    .then(async (resp) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return resp\n    })\n    .catch(medusaError)\n}\n\nexport async function applyPromotions(codes: string[]) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, { promo_codes: codes }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function applyGiftCard(code: string) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, { gift_cards: [{ code }] }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function removeDiscount(code: string) {\n  // const cartId = getCartId()\n  // if (!cartId) return \"No cartId cookie found\"\n  // try {\n  //   await deleteDiscount(cartId, code)\n  //   revalidateTag(\"cart\")\n  // } catch (error: any) {\n  //   throw error\n  // }\n}\n\nexport async function removeGiftCard(\n  codeToRemove: string,\n  giftCards: any[]\n  // giftCards: GiftCard[]\n) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, {\n  //       gift_cards: [...giftCards]\n  //         .filter((gc) => gc.code !== codeToRemove)\n  //         .map((gc) => ({ code: gc.code })),\n  //     }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function submitPromotionForm(\n  currentState: unknown,\n  formData: FormData\n) {\n  const code = formData.get(\"code\") as string\n  try {\n    await applyPromotions([code])\n  } catch (e: any) {\n    return e.message\n  }\n}\n\n// TODO: Pass a POJO instead of a form entity here\nexport async function setAddresses(currentState: unknown, formData: FormData) {\n  try {\n    if (!formData) {\n      throw new Error(\"No form data found when setting addresses\")\n    }\n    const cartId = getCartId()\n    if (!cartId) {\n      throw new Error(\"No existing cart found when setting addresses\")\n    }\n\n    const data = {\n      shipping_address: {\n        first_name: formData.get(\"shipping_address.first_name\"),\n        last_name: formData.get(\"shipping_address.last_name\"),\n        address_1: formData.get(\"shipping_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"shipping_address.company\"),\n        postal_code: formData.get(\"shipping_address.postal_code\"),\n        city: formData.get(\"shipping_address.city\"),\n        country_code: formData.get(\"shipping_address.country_code\"),\n        province: formData.get(\"shipping_address.province\"),\n        phone: formData.get(\"shipping_address.phone\"),\n      },\n      email: formData.get(\"email\"),\n    } as any\n\n    const sameAsBilling = formData.get(\"same_as_billing\")\n    if (sameAsBilling === \"on\") data.billing_address = data.shipping_address\n\n    if (sameAsBilling !== \"on\")\n      data.billing_address = {\n        first_name: formData.get(\"billing_address.first_name\"),\n        last_name: formData.get(\"billing_address.last_name\"),\n        address_1: formData.get(\"billing_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"billing_address.company\"),\n        postal_code: formData.get(\"billing_address.postal_code\"),\n        city: formData.get(\"billing_address.city\"),\n        country_code: formData.get(\"billing_address.country_code\"),\n        province: formData.get(\"billing_address.province\"),\n        phone: formData.get(\"billing_address.phone\"),\n      }\n    await updateCart(data)\n  } catch (e: any) {\n    return e.message\n  }\n\n  redirect(\n    `/${formData.get(\"shipping_address.country_code\")}/checkout?step=delivery`\n  )\n}\n\n/**\n * Places an order for a cart. If no cart ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to place an order for.\n * @returns The cart object if the order was successful, or null if not.\n */\nexport async function placeOrder(cartId?: string) {\n  const id = cartId || (await getCartId())\n\n  if (!id) {\n    throw new Error(\"No existing cart found when placing an order\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const cartRes = await sdk.store.cart\n    .complete(id, {}, headers)\n    .then(async (cartRes) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return cartRes\n    })\n    .catch(medusaError)\n\n  if (cartRes?.type === \"order\") {\n    const countryCode =\n      cartRes.order.shipping_address?.country_code?.toLowerCase()\n\n    const orderCacheTag = await getCacheTag(\"orders\")\n    revalidateTag(orderCacheTag)\n\n    removeCartId()\n    redirect(`/${countryCode}/order/${cartRes?.order.id}/confirmed`)\n  }\n\n  return cartRes.cart\n}\n\n/**\n * Updates the countrycode param and revalidates the regions cache\n * @param regionId\n * @param countryCode\n */\nexport async function updateRegion(countryCode: string, currentPath: string) {\n  const cartId = await getCartId()\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  if (cartId) {\n    await updateCart({ region_id: region.id })\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  const regionCacheTag = await getCacheTag(\"regions\")\n  revalidateTag(regionCacheTag)\n\n  const productsCacheTag = await getCacheTag(\"products\")\n  revalidateTag(productsCacheTag)\n\n  redirect(`/${countryCode}${currentPath}`)\n}\n\nexport async function listCartOptions() {\n  const cartId = await getCartId()\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n  const next = {\n    ...(await getCacheOptions(\"shippingOptions\")),\n  }\n\n  return await sdk.client.fetch<{\n    shipping_options: HttpTypes.StoreCartShippingOption[]\n  }>(\"/store/shipping-options\", {\n    query: { cart_id: cartId },\n    next,\n    headers,\n    cache: \"force-cache\",\n  })\n}\n"],"names":[],"mappings":";;;;;;;IA8PsB,kBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 4541, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/icons/trash.tsx"],"sourcesContent":["import React from \"react\"\n\nimport { IconProps } from \"types/icon\"\n\nconst Trash: React.FC<IconProps> = ({\n  size = \"16\",\n  color = \"currentColor\",\n  ...attributes\n}) => {\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...attributes}\n    >\n      <path\n        d=\"M3.33301 5.49054H4.81449H16.6663\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M7.14286 5.5V4C7.14286 3.60218 7.29337 3.22064 7.56128 2.93934C7.82919 2.65804 8.19255 2.5 8.57143 2.5H11.4286C11.8075 2.5 12.1708 2.65804 12.4387 2.93934C12.7066 3.22064 12.8571 3.60218 12.8571 4V5.5M15 5.5V16C15 16.3978 14.8495 16.7794 14.5816 17.0607C14.3137 17.342 13.9503 17.5 13.5714 17.5H6.42857C6.04969 17.5 5.68633 17.342 5.41842 17.0607C5.15051 16.7794 5 16.3978 5 16V5.5H15Z\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M8.33203 9.23724V13.4039\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M11.666 9.23724V13.4039\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  )\n}\n\nexport default Trash\n"],"names":[],"mappings":";;;;;;AAIA,MAAM,QAA6B,CAAC,EAClC,OAAO,IAAI,EACX,QAAQ,cAAc,EACtB,GAAG,YACJ;IACC,qBACE,8OAAC;QACC,OAAO;QACP,QAAQ;QACR,SAAQ;QACR,MAAK;QACL,OAAM;QACL,GAAG,UAAU;;0BAEd,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;0BAEjB,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;0BAEjB,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;0BAEjB,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;;;;;;;AAIvB;uCAEe","debugId":null}},
    {"offset": {"line": 4612, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/checkout/components/discount-code/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { Badge, Heading, Input, Label, Text } from \"@medusajs/ui\"\nimport React from \"react\"\n\nimport { applyPromotions } from \"@lib/data/cart\"\nimport { convertToLocale } from \"@lib/util/money\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport Trash from \"@modules/common/icons/trash\"\nimport ErrorMessage from \"../error-message\"\nimport { SubmitButton } from \"../submit-button\"\n\ntype DiscountCodeProps = {\n  cart: HttpTypes.StoreCart & {\n    promotions: HttpTypes.StorePromotion[]\n  }\n}\n\nconst DiscountCode: React.FC<DiscountCodeProps> = ({ cart }) => {\n  const [isOpen, setIsOpen] = React.useState(false)\n  const [errorMessage, setErrorMessage] = React.useState(\"\")\n\n  const { promotions = [] } = cart\n  const removePromotionCode = async (code: string) => {\n    const validPromotions = promotions.filter(\n      (promotion) => promotion.code !== code\n    )\n\n    await applyPromotions(\n      validPromotions.filter((p) => p.code !== undefined).map((p) => p.code!)\n    )\n  }\n\n  const addPromotionCode = async (formData: FormData) => {\n    setErrorMessage(\"\")\n\n    const code = formData.get(\"code\")\n    if (!code) {\n      return\n    }\n    const input = document.getElementById(\"promotion-input\") as HTMLInputElement\n    const codes = promotions\n      .filter((p) => p.code !== undefined)\n      .map((p) => p.code!)\n    codes.push(code.toString())\n\n    try {\n      await applyPromotions(codes)\n    } catch (e: any) {\n      setErrorMessage(e.message)\n    }\n\n    if (input) {\n      input.value = \"\"\n    }\n  }\n\n  return (\n    <div className=\"w-full bg-white flex flex-col\">\n      <div className=\"txt-medium\">\n        <form action={(a) => addPromotionCode(a)} className=\"w-full mb-5\">\n          <Label className=\"flex gap-x-1 my-2 items-center\">\n            <button\n              onClick={() => setIsOpen(!isOpen)}\n              type=\"button\"\n              className=\"txt-medium text-ui-fg-interactive hover:text-ui-fg-interactive-hover\"\n              data-testid=\"add-discount-button\"\n            >\n              Add Promotion Code(s)\n            </button>\n\n            {/* <Tooltip content=\"You can add multiple promotion codes\">\n              <InformationCircleSolid color=\"var(--fg-muted)\" />\n            </Tooltip> */}\n          </Label>\n\n          {isOpen && (\n            <>\n              <div className=\"flex w-full gap-x-2\">\n                <Input\n                  className=\"size-full\"\n                  id=\"promotion-input\"\n                  name=\"code\"\n                  type=\"text\"\n                  autoFocus={false}\n                  data-testid=\"discount-input\"\n                />\n                <SubmitButton\n                  variant=\"secondary\"\n                  data-testid=\"discount-apply-button\"\n                >\n                  Apply\n                </SubmitButton>\n              </div>\n\n              <ErrorMessage\n                error={errorMessage}\n                data-testid=\"discount-error-message\"\n              />\n            </>\n          )}\n        </form>\n\n        {promotions.length > 0 && (\n          <div className=\"w-full flex items-center\">\n            <div className=\"flex flex-col w-full\">\n              <Heading className=\"txt-medium mb-2\">\n                Promotion(s) applied:\n              </Heading>\n\n              {promotions.map((promotion) => {\n                return (\n                  <div\n                    key={promotion.id}\n                    className=\"flex items-center justify-between w-full max-w-full mb-2\"\n                    data-testid=\"discount-row\"\n                  >\n                    <Text className=\"flex gap-x-1 items-baseline txt-small-plus w-4/5 pr-1\">\n                      <span className=\"truncate\" data-testid=\"discount-code\">\n                        <Badge\n                          color={promotion.is_automatic ? \"green\" : \"grey\"}\n                          size=\"small\"\n                        >\n                          {promotion.code}\n                        </Badge>{\" \"}\n                        (\n                        {promotion.application_method?.value !== undefined &&\n                          promotion.application_method.currency_code !==\n                            undefined && (\n                            <>\n                              {promotion.application_method.type ===\n                              \"percentage\"\n                                ? `${promotion.application_method.value}%`\n                                : convertToLocale({\n                                    amount: promotion.application_method.value,\n                                    currency_code:\n                                      promotion.application_method\n                                        .currency_code,\n                                  })}\n                            </>\n                          )}\n                        )\n                        {/* {promotion.is_automatic && (\n                          <Tooltip content=\"This promotion is automatically applied\">\n                            <InformationCircleSolid className=\"inline text-zinc-400\" />\n                          </Tooltip>\n                        )} */}\n                      </span>\n                    </Text>\n                    {!promotion.is_automatic && (\n                      <button\n                        className=\"flex items-center\"\n                        onClick={() => {\n                          if (!promotion.code) {\n                            return\n                          }\n\n                          removePromotionCode(promotion.code)\n                        }}\n                        data-testid=\"remove-discount-button\"\n                      >\n                        <Trash size={14} />\n                        <span className=\"sr-only\">\n                          Remove discount code from order\n                        </span>\n                      </button>\n                    )}\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default DiscountCode\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4857, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/components/cart-totals/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { convertToLocale } from \"@lib/util/money\"\nimport React from \"react\"\n\ntype CartTotalsProps = {\n  totals: {\n    total?: number | null\n    subtotal?: number | null\n    tax_total?: number | null\n    currency_code: string\n    item_subtotal?: number | null\n    shipping_subtotal?: number | null\n    discount_subtotal?: number | null\n  }\n}\n\nconst CartTotals: React.FC<CartTotalsProps> = ({ totals }) => {\n  const {\n    currency_code,\n    total,\n    tax_total,\n    item_subtotal,\n    shipping_subtotal,\n    discount_subtotal,\n  } = totals\n\n  return (\n    <div>\n      <div className=\"flex flex-col gap-y-2 txt-medium text-ui-fg-subtle \">\n        <div className=\"flex items-center justify-between\">\n          <span>Subtotal (excl. shipping and taxes)</span>\n          <span data-testid=\"cart-subtotal\" data-value={item_subtotal || 0}>\n            {convertToLocale({ amount: item_subtotal ?? 0, currency_code })}\n          </span>\n        </div>\n        <div className=\"flex items-center justify-between\">\n          <span>Shipping</span>\n          <span data-testid=\"cart-shipping\" data-value={shipping_subtotal || 0}>\n            {convertToLocale({ amount: shipping_subtotal ?? 0, currency_code })}\n          </span>\n        </div>\n        {!!discount_subtotal && (\n          <div className=\"flex items-center justify-between\">\n            <span>Discount</span>\n            <span\n              className=\"text-ui-fg-interactive\"\n              data-testid=\"cart-discount\"\n              data-value={discount_subtotal || 0}\n            >\n              -{\" \"}\n              {convertToLocale({\n                amount: discount_subtotal ?? 0,\n                currency_code,\n              })}\n            </span>\n          </div>\n        )}\n        <div className=\"flex justify-between\">\n          <span className=\"flex gap-x-1 items-center \">Taxes</span>\n          <span data-testid=\"cart-taxes\" data-value={tax_total || 0}>\n            {convertToLocale({ amount: tax_total ?? 0, currency_code })}\n          </span>\n        </div>\n      </div>\n      <div className=\"h-px w-full border-b border-gray-200 my-4\" />\n      <div className=\"flex items-center justify-between text-ui-fg-base mb-2 txt-medium \">\n        <span>Total</span>\n        <span\n          className=\"txt-xlarge-plus\"\n          data-testid=\"cart-total\"\n          data-value={total || 0}\n        >\n          {convertToLocale({ amount: total ?? 0, currency_code })}\n        </span>\n      </div>\n      <div className=\"h-px w-full border-b border-gray-200 mt-4\" />\n    </div>\n  )\n}\n\nexport default CartTotals\n"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAiBA,MAAM,aAAwC,CAAC,EAAE,MAAM,EAAE;IACvD,MAAM,EACJ,aAAa,EACb,KAAK,EACL,SAAS,EACT,aAAa,EACb,iBAAiB,EACjB,iBAAiB,EAClB,GAAG;IAEJ,qBACE,8OAAC;;0BACC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;0CAAK;;;;;;0CACN,8OAAC;gCAAK,eAAY;gCAAgB,cAAY,iBAAiB;0CAC5D,IAAA,8IAAe,EAAC;oCAAE,QAAQ,iBAAiB;oCAAG;gCAAc;;;;;;;;;;;;kCAGjE,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;0CAAK;;;;;;0CACN,8OAAC;gCAAK,eAAY;gCAAgB,cAAY,qBAAqB;0CAChE,IAAA,8IAAe,EAAC;oCAAE,QAAQ,qBAAqB;oCAAG;gCAAc;;;;;;;;;;;;oBAGpE,CAAC,CAAC,mCACD,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;0CAAK;;;;;;0CACN,8OAAC;gCACC,WAAU;gCACV,eAAY;gCACZ,cAAY,qBAAqB;;oCAClC;oCACG;oCACD,IAAA,8IAAe,EAAC;wCACf,QAAQ,qBAAqB;wCAC7B;oCACF;;;;;;;;;;;;;kCAIN,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAK,WAAU;0CAA6B;;;;;;0CAC7C,8OAAC;gCAAK,eAAY;gCAAa,cAAY,aAAa;0CACrD,IAAA,8IAAe,EAAC;oCAAE,QAAQ,aAAa;oCAAG;gCAAc;;;;;;;;;;;;;;;;;;0BAI/D,8OAAC;gBAAI,WAAU;;;;;;0BACf,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;kCAAK;;;;;;kCACN,8OAAC;wBACC,WAAU;wBACV,eAAY;wBACZ,cAAY,SAAS;kCAEpB,IAAA,8IAAe,EAAC;4BAAE,QAAQ,SAAS;4BAAG;wBAAc;;;;;;;;;;;;0BAGzD,8OAAC;gBAAI,WAAU;;;;;;;;;;;;AAGrB;uCAEe","debugId":null}}]
}