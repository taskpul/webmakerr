{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/data/customer.ts"],"sourcesContent":["\"use server\"\n\nimport { sdk } from \"@lib/config\"\nimport medusaError from \"@lib/util/medusa-error\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { revalidateTag } from \"next/cache\"\nimport { redirect } from \"next/navigation\"\nimport {\n  getAuthHeaders,\n  getCacheOptions,\n  getCacheTag,\n  getCartId,\n  removeAuthToken,\n  removeCartId,\n  setAuthToken,\n} from \"./cookies\"\n\nexport const retrieveCustomer =\n  async (): Promise<HttpTypes.StoreCustomer | null> => {\n    const authHeaders = await getAuthHeaders()\n\n    if (!authHeaders) return null\n\n    const headers = {\n      ...authHeaders,\n    }\n\n    const next = {\n      ...(await getCacheOptions(\"customers\")),\n    }\n\n    return await sdk.client\n      .fetch<{ customer: HttpTypes.StoreCustomer }>(`/store/customers/me`, {\n        method: \"GET\",\n        query: {\n          fields: \"*orders\",\n        },\n        headers,\n        next,\n        cache: \"force-cache\",\n      })\n      .then(({ customer }) => customer)\n      .catch(() => null)\n  }\n\nexport const updateCustomer = async (body: HttpTypes.StoreUpdateCustomer) => {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const updateRes = await sdk.store.customer\n    .update(body, {}, headers)\n    .then(({ customer }) => customer)\n    .catch(medusaError)\n\n  const cacheTag = await getCacheTag(\"customers\")\n  revalidateTag(cacheTag)\n\n  return updateRes\n}\n\nexport async function signup(_currentState: unknown, formData: FormData) {\n  const password = formData.get(\"password\") as string\n  const customerForm = {\n    email: formData.get(\"email\") as string,\n    first_name: formData.get(\"first_name\") as string,\n    last_name: formData.get(\"last_name\") as string,\n    phone: formData.get(\"phone\") as string,\n  }\n\n  try {\n    const token = await sdk.auth.register(\"customer\", \"emailpass\", {\n      email: customerForm.email,\n      password: password,\n    })\n\n    await setAuthToken(token as string)\n\n    const headers = {\n      ...(await getAuthHeaders()),\n    }\n\n    const { customer: createdCustomer } = await sdk.store.customer.create(\n      customerForm,\n      {},\n      headers\n    )\n\n    const loginToken = await sdk.auth.login(\"customer\", \"emailpass\", {\n      email: customerForm.email,\n      password,\n    })\n\n    await setAuthToken(loginToken as string)\n\n    const customerCacheTag = await getCacheTag(\"customers\")\n    revalidateTag(customerCacheTag)\n\n    await transferCart()\n\n    return createdCustomer\n  } catch (error: any) {\n    return error.toString()\n  }\n}\n\nexport async function login(_currentState: unknown, formData: FormData) {\n  const email = formData.get(\"email\") as string\n  const password = formData.get(\"password\") as string\n\n  try {\n    await sdk.auth\n      .login(\"customer\", \"emailpass\", { email, password })\n      .then(async (token) => {\n        await setAuthToken(token as string)\n        const customerCacheTag = await getCacheTag(\"customers\")\n        revalidateTag(customerCacheTag)\n      })\n  } catch (error: any) {\n    return error.toString()\n  }\n\n  try {\n    await transferCart()\n  } catch (error: any) {\n    return error.toString()\n  }\n}\n\nexport async function signout(countryCode: string) {\n  await sdk.auth.logout()\n\n  await removeAuthToken()\n\n  const customerCacheTag = await getCacheTag(\"customers\")\n  revalidateTag(customerCacheTag)\n\n  await removeCartId()\n\n  const cartCacheTag = await getCacheTag(\"carts\")\n  revalidateTag(cartCacheTag)\n\n  redirect(`/${countryCode}/account`)\n}\n\nexport async function transferCart() {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    return\n  }\n\n  const headers = await getAuthHeaders()\n\n  await sdk.store.cart.transferCart(cartId, {}, headers)\n\n  const cartCacheTag = await getCacheTag(\"carts\")\n  revalidateTag(cartCacheTag)\n}\n\nexport const addCustomerAddress = async (\n  currentState: Record<string, unknown>,\n  formData: FormData\n): Promise<any> => {\n  const isDefaultBilling = (currentState.isDefaultBilling as boolean) || false\n  const isDefaultShipping = (currentState.isDefaultShipping as boolean) || false\n\n  const address = {\n    first_name: formData.get(\"first_name\") as string,\n    last_name: formData.get(\"last_name\") as string,\n    company: formData.get(\"company\") as string,\n    address_1: formData.get(\"address_1\") as string,\n    address_2: formData.get(\"address_2\") as string,\n    city: formData.get(\"city\") as string,\n    postal_code: formData.get(\"postal_code\") as string,\n    province: formData.get(\"province\") as string,\n    country_code: formData.get(\"country_code\") as string,\n    phone: formData.get(\"phone\") as string,\n    is_default_billing: isDefaultBilling,\n    is_default_shipping: isDefaultShipping,\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.customer\n    .createAddress(address, {}, headers)\n    .then(async ({ customer }) => {\n      const customerCacheTag = await getCacheTag(\"customers\")\n      revalidateTag(customerCacheTag)\n      return { success: true, error: null }\n    })\n    .catch((err) => {\n      return { success: false, error: err.toString() }\n    })\n}\n\nexport const deleteCustomerAddress = async (\n  addressId: string\n): Promise<void> => {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.customer\n    .deleteAddress(addressId, headers)\n    .then(async () => {\n      const customerCacheTag = await getCacheTag(\"customers\")\n      revalidateTag(customerCacheTag)\n      return { success: true, error: null }\n    })\n    .catch((err) => {\n      return { success: false, error: err.toString() }\n    })\n}\n\nexport const updateCustomerAddress = async (\n  currentState: Record<string, unknown>,\n  formData: FormData\n): Promise<any> => {\n  const addressId =\n    (currentState.addressId as string) || (formData.get(\"addressId\") as string)\n\n  if (!addressId) {\n    return { success: false, error: \"Address ID is required\" }\n  }\n\n  const address = {\n    first_name: formData.get(\"first_name\") as string,\n    last_name: formData.get(\"last_name\") as string,\n    company: formData.get(\"company\") as string,\n    address_1: formData.get(\"address_1\") as string,\n    address_2: formData.get(\"address_2\") as string,\n    city: formData.get(\"city\") as string,\n    postal_code: formData.get(\"postal_code\") as string,\n    province: formData.get(\"province\") as string,\n    country_code: formData.get(\"country_code\") as string,\n  } as HttpTypes.StoreUpdateCustomerAddress\n\n  const phone = formData.get(\"phone\") as string\n\n  if (phone) {\n    address.phone = phone\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.customer\n    .updateAddress(addressId, address, {}, headers)\n    .then(async () => {\n      const customerCacheTag = await getCacheTag(\"customers\")\n      revalidateTag(customerCacheTag)\n      return { success: true, error: null }\n    })\n    .catch((err) => {\n      return { success: false, error: err.toString() }\n    })\n}\n"],"names":[],"mappings":";;;;;;;IAiJsB,eAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/layout/components/cart-mismatch-banner/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { transferCart } from \"@lib/data/customer\"\nimport { ExclamationCircleSolid } from \"@medusajs/icons\"\nimport { StoreCart, StoreCustomer } from \"@medusajs/types\"\nimport { Button } from \"@medusajs/ui\"\nimport { useState } from \"react\"\n\nfunction CartMismatchBanner(props: {\n  customer: StoreCustomer\n  cart: StoreCart\n}) {\n  const { customer, cart } = props\n  const [isPending, setIsPending] = useState(false)\n  const [actionText, setActionText] = useState(\"Run transfer again\")\n\n  if (!customer || !!cart.customer_id) {\n    return\n  }\n\n  const handleSubmit = async () => {\n    try {\n      setIsPending(true)\n      setActionText(\"Transferring..\")\n\n      await transferCart()\n    } catch {\n      setActionText(\"Run transfer again\")\n      setIsPending(false)\n    }\n  }\n\n  return (\n    <div className=\"flex items-center justify-center small:p-4 p-2 text-center bg-orange-300 small:gap-2 gap-1 text-sm mt-2 text-orange-800\">\n      <div className=\"flex flex-col small:flex-row small:gap-2 gap-1 items-center\">\n        <span className=\"flex items-center gap-1\">\n          <ExclamationCircleSolid className=\"inline\" />\n          Something went wrong when we tried to transfer your cart\n        </span>\n\n        <span>Â·</span>\n\n        <Button\n          variant=\"transparent\"\n          className=\"hover:bg-transparent active:bg-transparent focus:bg-transparent disabled:text-orange-500 text-orange-950 p-0 bg-transparent\"\n          size=\"base\"\n          disabled={isPending}\n          onClick={handleSubmit}\n        >\n          {actionText}\n        </Button>\n      </div>\n    </div>\n  )\n}\n\nexport default CartMismatchBanner\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AACA;AANA;;;;;;AAQA,SAAS,mBAAmB,KAG3B;IACC,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG;IAC3B,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,iNAAQ,EAAC;IAC3C,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,iNAAQ,EAAC;IAE7C,IAAI,CAAC,YAAY,CAAC,CAAC,KAAK,WAAW,EAAE;QACnC;IACF;IAEA,MAAM,eAAe;QACnB,IAAI;YACF,aAAa;YACb,cAAc;YAEd,MAAM,IAAA,0KAAY;QACpB,EAAE,OAAM;YACN,cAAc;YACd,aAAa;QACf;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAK,WAAU;;sCACd,8OAAC,mQAAsB;4BAAC,WAAU;;;;;;wBAAW;;;;;;;8BAI/C,8OAAC;8BAAK;;;;;;8BAEN,8OAAC,2LAAM;oBACL,SAAQ;oBACR,WAAU;oBACV,MAAK;oBACL,UAAU;oBACV,SAAS;8BAER;;;;;;;;;;;;;;;;;AAKX;uCAEe","debugId":null}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/components/localized-client-link/index.tsx"],"sourcesContent":["\"use client\"\n\nimport Link from \"next/link\"\nimport { useParams } from \"next/navigation\"\nimport React from \"react\"\n\n/**\n * Use this component to create a Next.js `<Link />` that persists the current country code in the url,\n * without having to explicitly pass it as a prop.\n */\nconst LocalizedClientLink = ({\n  children,\n  href,\n  ...props\n}: {\n  children?: React.ReactNode\n  href: string\n  className?: string\n  onClick?: () => void\n  passHref?: true\n  [x: string]: any\n}) => {\n  const { countryCode } = useParams()\n\n  return (\n    <Link href={`/${countryCode}${href}`} {...props}>\n      {children}\n    </Link>\n  )\n}\n\nexport default LocalizedClientLink\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAHA;;;;AAMA;;;CAGC,GACD,MAAM,sBAAsB,CAAC,EAC3B,QAAQ,EACR,IAAI,EACJ,GAAG,OAQJ;IACC,MAAM,EAAE,WAAW,EAAE,GAAG,IAAA,+IAAS;IAEjC,qBACE,8OAAC,uKAAI;QAAC,MAAM,CAAC,CAAC,EAAE,cAAc,MAAM;QAAG,GAAG,KAAK;kBAC5C;;;;;;AAGP;uCAEe","debugId":null}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/util/isEmpty.ts"],"sourcesContent":["export const isObject = (input: any) => input instanceof Object\nexport const isArray = (input: any) => Array.isArray(input)\nexport const isEmpty = (input: any) => {\n  return (\n    input === null ||\n    input === undefined ||\n    (isObject(input) && Object.keys(input).length === 0) ||\n    (isArray(input) && (input as any[]).length === 0) ||\n    (typeof input === \"string\" && input.trim().length === 0)\n  )\n}\n"],"names":[],"mappings":";;;;;;;;AAAO,MAAM,WAAW,CAAC,QAAe,iBAAiB;AAClD,MAAM,UAAU,CAAC,QAAe,MAAM,OAAO,CAAC;AAC9C,MAAM,UAAU,CAAC;IACtB,OACE,UAAU,QACV,UAAU,aACT,SAAS,UAAU,OAAO,IAAI,CAAC,OAAO,MAAM,KAAK,KACjD,QAAQ,UAAU,AAAC,MAAgB,MAAM,KAAK,KAC9C,OAAO,UAAU,YAAY,MAAM,IAAI,GAAG,MAAM,KAAK;AAE1D","debugId":null}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/util/money.ts"],"sourcesContent":["import { isEmpty } from \"./isEmpty\"\n\ntype ConvertToLocaleParams = {\n  amount: number\n  currency_code: string\n  minimumFractionDigits?: number\n  maximumFractionDigits?: number\n  locale?: string\n}\n\nexport const convertToLocale = ({\n  amount,\n  currency_code,\n  minimumFractionDigits,\n  maximumFractionDigits,\n  locale = \"en-US\",\n}: ConvertToLocaleParams) => {\n  return currency_code && !isEmpty(currency_code)\n    ? new Intl.NumberFormat(locale, {\n        style: \"currency\",\n        currency: currency_code,\n        minimumFractionDigits,\n        maximumFractionDigits,\n      }).format(amount)\n    : amount.toString()\n}\n"],"names":[],"mappings":";;;;AAAA;;AAUO,MAAM,kBAAkB,CAAC,EAC9B,MAAM,EACN,aAAa,EACb,qBAAqB,EACrB,qBAAqB,EACrB,SAAS,OAAO,EACM;IACtB,OAAO,iBAAiB,CAAC,IAAA,wIAAO,EAAC,iBAC7B,IAAI,KAAK,YAAY,CAAC,QAAQ;QAC5B,OAAO;QACP,UAAU;QACV;QACA;IACF,GAAG,MAAM,CAAC,UACV,OAAO,QAAQ;AACrB","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/data/cart.ts"],"sourcesContent":["\"use server\"\n\nimport { sdk } from \"@lib/config\"\nimport medusaError from \"@lib/util/medusa-error\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { revalidateTag } from \"next/cache\"\nimport { redirect } from \"next/navigation\"\nimport {\n  getAuthHeaders,\n  getCacheOptions,\n  getCacheTag,\n  getCartId,\n  removeCartId,\n  setCartId,\n} from \"./cookies\"\nimport { getRegion } from \"./regions\"\n\n/**\n * Retrieves a cart by its ID. If no ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to retrieve.\n * @returns The cart object if found, or null if not found.\n */\nexport async function retrieveCart(cartId?: string, fields?: string) {\n  const id = cartId || (await getCartId())\n  fields ??= \"*items, *region, *items.product, *items.variant, *items.thumbnail, *items.metadata, +items.total, *promotions, +shipping_methods.name\"\n\n  if (!id) {\n    return null\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const next = {\n    ...(await getCacheOptions(\"carts\")),\n  }\n\n  return await sdk.client\n    .fetch<HttpTypes.StoreCartResponse>(`/store/carts/${id}`, {\n      method: \"GET\",\n      query: {\n        fields\n      },\n      headers,\n      next,\n      cache: \"force-cache\",\n    })\n    .then(({ cart }: { cart: HttpTypes.StoreCart }) => cart)\n    .catch(() => null)\n}\n\nexport async function getOrSetCart(countryCode: string) {\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  let cart = await retrieveCart(undefined, 'id,region_id')\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  if (!cart) {\n    const cartResp = await sdk.store.cart.create(\n      { region_id: region.id },\n      {},\n      headers\n    )\n    cart = cartResp.cart\n\n    await setCartId(cart.id)\n\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  if (cart && cart?.region_id !== region.id) {\n    await sdk.store.cart.update(cart.id, { region_id: region.id }, {}, headers)\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  return cart\n}\n\nexport async function updateCart(data: HttpTypes.StoreUpdateCart) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found, please create one before updating\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, data, {}, headers)\n    .then(async ({ cart }: { cart: HttpTypes.StoreCart }) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n\n      return cart\n    })\n    .catch(medusaError)\n}\n\nexport async function addToCart({\n  variantId,\n  quantity,\n  countryCode,\n}: {\n  variantId: string\n  quantity: number\n  countryCode: string\n}) {\n  if (!variantId) {\n    throw new Error(\"Missing variant ID when adding to cart\")\n  }\n\n  const cart = await getOrSetCart(countryCode)\n\n  if (!cart) {\n    throw new Error(\"Error retrieving or creating cart\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .createLineItem(\n      cart.id,\n      {\n        variant_id: variantId,\n        quantity,\n      },\n      {},\n      headers\n    )\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function updateLineItem({\n  lineId,\n  quantity,\n}: {\n  lineId: string\n  quantity: number\n}) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when updating line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when updating line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .updateLineItem(cartId, lineId, { quantity }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function deleteLineItem(lineId: string) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when deleting line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when deleting line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .deleteLineItem(cartId, lineId, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function setShippingMethod({\n  cartId,\n  shippingMethodId,\n}: {\n  cartId: string\n  shippingMethodId: string\n}) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .addShippingMethod(cartId, { option_id: shippingMethodId }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function initiatePaymentSession(\n  cart: HttpTypes.StoreCart,\n  data: HttpTypes.StoreInitializePaymentSession\n) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.payment\n    .initiatePaymentSession(cart, data, {}, headers)\n    .then(async (resp) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return resp\n    })\n    .catch(medusaError)\n}\n\nexport async function applyPromotions(codes: string[]) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, { promo_codes: codes }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function applyGiftCard(code: string) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, { gift_cards: [{ code }] }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function removeDiscount(code: string) {\n  // const cartId = getCartId()\n  // if (!cartId) return \"No cartId cookie found\"\n  // try {\n  //   await deleteDiscount(cartId, code)\n  //   revalidateTag(\"cart\")\n  // } catch (error: any) {\n  //   throw error\n  // }\n}\n\nexport async function removeGiftCard(\n  codeToRemove: string,\n  giftCards: any[]\n  // giftCards: GiftCard[]\n) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, {\n  //       gift_cards: [...giftCards]\n  //         .filter((gc) => gc.code !== codeToRemove)\n  //         .map((gc) => ({ code: gc.code })),\n  //     }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function submitPromotionForm(\n  currentState: unknown,\n  formData: FormData\n) {\n  const code = formData.get(\"code\") as string\n  try {\n    await applyPromotions([code])\n  } catch (e: any) {\n    return e.message\n  }\n}\n\n// TODO: Pass a POJO instead of a form entity here\nexport async function setAddresses(currentState: unknown, formData: FormData) {\n  try {\n    if (!formData) {\n      throw new Error(\"No form data found when setting addresses\")\n    }\n    const cartId = getCartId()\n    if (!cartId) {\n      throw new Error(\"No existing cart found when setting addresses\")\n    }\n\n    const data = {\n      shipping_address: {\n        first_name: formData.get(\"shipping_address.first_name\"),\n        last_name: formData.get(\"shipping_address.last_name\"),\n        address_1: formData.get(\"shipping_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"shipping_address.company\"),\n        postal_code: formData.get(\"shipping_address.postal_code\"),\n        city: formData.get(\"shipping_address.city\"),\n        country_code: formData.get(\"shipping_address.country_code\"),\n        province: formData.get(\"shipping_address.province\"),\n        phone: formData.get(\"shipping_address.phone\"),\n      },\n      email: formData.get(\"email\"),\n    } as any\n\n    const sameAsBilling = formData.get(\"same_as_billing\")\n    if (sameAsBilling === \"on\") data.billing_address = data.shipping_address\n\n    if (sameAsBilling !== \"on\")\n      data.billing_address = {\n        first_name: formData.get(\"billing_address.first_name\"),\n        last_name: formData.get(\"billing_address.last_name\"),\n        address_1: formData.get(\"billing_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"billing_address.company\"),\n        postal_code: formData.get(\"billing_address.postal_code\"),\n        city: formData.get(\"billing_address.city\"),\n        country_code: formData.get(\"billing_address.country_code\"),\n        province: formData.get(\"billing_address.province\"),\n        phone: formData.get(\"billing_address.phone\"),\n      }\n    await updateCart(data)\n  } catch (e: any) {\n    return e.message\n  }\n\n  redirect(\n    `/${formData.get(\"shipping_address.country_code\")}/checkout?step=delivery`\n  )\n}\n\n/**\n * Places an order for a cart. If no cart ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to place an order for.\n * @returns The cart object if the order was successful, or null if not.\n */\nexport async function placeOrder(cartId?: string) {\n  const id = cartId || (await getCartId())\n\n  if (!id) {\n    throw new Error(\"No existing cart found when placing an order\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const cartRes = await sdk.store.cart\n    .complete(id, {}, headers)\n    .then(async (cartRes) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return cartRes\n    })\n    .catch(medusaError)\n\n  if (cartRes?.type === \"order\") {\n    const countryCode =\n      cartRes.order.shipping_address?.country_code?.toLowerCase()\n\n    const orderCacheTag = await getCacheTag(\"orders\")\n    revalidateTag(orderCacheTag)\n\n    removeCartId()\n    redirect(`/${countryCode}/order/${cartRes?.order.id}/confirmed`)\n  }\n\n  return cartRes.cart\n}\n\n/**\n * Updates the countrycode param and revalidates the regions cache\n * @param regionId\n * @param countryCode\n */\nexport async function updateRegion(countryCode: string, currentPath: string) {\n  const cartId = await getCartId()\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  if (cartId) {\n    await updateCart({ region_id: region.id })\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  const regionCacheTag = await getCacheTag(\"regions\")\n  revalidateTag(regionCacheTag)\n\n  const productsCacheTag = await getCacheTag(\"products\")\n  revalidateTag(productsCacheTag)\n\n  redirect(`/${countryCode}${currentPath}`)\n}\n\nexport async function listCartOptions() {\n  const cartId = await getCartId()\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n  const next = {\n    ...(await getCacheOptions(\"shippingOptions\")),\n  }\n\n  return await sdk.client.fetch<{\n    shipping_options: HttpTypes.StoreCartShippingOption[]\n  }>(\"/store/shipping-options\", {\n    query: { cart_id: cartId },\n    next,\n    headers,\n    cache: \"force-cache\",\n  })\n}\n"],"names":[],"mappings":";;;;;;;IA6LsB,iBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/components/delete-button/index.tsx"],"sourcesContent":["import { deleteLineItem } from \"@lib/data/cart\"\nimport { Spinner, Trash } from \"@medusajs/icons\"\nimport { clx } from \"@medusajs/ui\"\nimport { useState } from \"react\"\n\nconst DeleteButton = ({\n  id,\n  children,\n  className,\n}: {\n  id: string\n  children?: React.ReactNode\n  className?: string\n}) => {\n  const [isDeleting, setIsDeleting] = useState(false)\n\n  const handleDelete = async (id: string) => {\n    setIsDeleting(true)\n    await deleteLineItem(id).catch((err) => {\n      setIsDeleting(false)\n    })\n  }\n\n  return (\n    <div\n      className={clx(\n        \"flex items-center justify-between text-small-regular\",\n        className\n      )}\n    >\n      <button\n        className=\"flex gap-x-1 text-ui-fg-subtle hover:text-ui-fg-base cursor-pointer\"\n        onClick={() => handleDelete(id)}\n      >\n        {isDeleting ? <Spinner className=\"animate-spin\" /> : <Trash />}\n        <span>{children}</span>\n      </button>\n    </div>\n  )\n}\n\nexport default DeleteButton\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAAA;AACA;AACA;;;;;;AAEA,MAAM,eAAe,CAAC,EACpB,EAAE,EACF,QAAQ,EACR,SAAS,EAKV;IACC,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,iNAAQ,EAAC;IAE7C,MAAM,eAAe,OAAO;QAC1B,cAAc;QACd,MAAM,IAAA,4KAAc,EAAC,IAAI,KAAK,CAAC,CAAC;YAC9B,cAAc;QAChB;IACF;IAEA,qBACE,8OAAC;QACC,WAAW,IAAA,sKAAG,EACZ,wDACA;kBAGF,cAAA,8OAAC;YACC,WAAU;YACV,SAAS,IAAM,aAAa;;gBAE3B,2BAAa,8OAAC,8MAAO;oBAAC,WAAU;;;;;6EAAoB,8OAAC,wMAAK;;;;;8BAC3D,8OAAC;8BAAM;;;;;;;;;;;;;;;;;AAIf;uCAEe","debugId":null}},
    {"offset": {"line": 272, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/components/line-item-options/index.tsx"],"sourcesContent":["import { HttpTypes } from \"@medusajs/types\"\nimport { Text } from \"@medusajs/ui\"\n\ntype LineItemOptionsProps = {\n  variant: HttpTypes.StoreProductVariant | undefined\n  \"data-testid\"?: string\n  \"data-value\"?: HttpTypes.StoreProductVariant\n}\n\nconst LineItemOptions = ({\n  variant,\n  \"data-testid\": dataTestid,\n  \"data-value\": dataValue,\n}: LineItemOptionsProps) => {\n  return (\n    <Text\n      data-testid={dataTestid}\n      data-value={dataValue}\n      className=\"inline-block txt-medium text-ui-fg-subtle w-full overflow-hidden text-ellipsis\"\n    >\n      Variant: {variant?.title}\n    </Text>\n  )\n}\n\nexport default LineItemOptions\n"],"names":[],"mappings":";;;;;AACA;;;AAQA,MAAM,kBAAkB,CAAC,EACvB,OAAO,EACP,eAAe,UAAU,EACzB,cAAc,SAAS,EACF;IACrB,qBACE,8OAAC,qLAAI;QACH,eAAa;QACb,cAAY;QACZ,WAAU;;YACX;YACW,SAAS;;;;;;;AAGzB;uCAEe","debugId":null}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/util/get-precentage-diff.ts"],"sourcesContent":["export const getPercentageDiff = (original: number, calculated: number) => {\n  const diff = original - calculated\n  const decrease = (diff / original) * 100\n\n  return decrease.toFixed()\n}\n"],"names":[],"mappings":";;;;AAAO,MAAM,oBAAoB,CAAC,UAAkB;IAClD,MAAM,OAAO,WAAW;IACxB,MAAM,WAAW,AAAC,OAAO,WAAY;IAErC,OAAO,SAAS,OAAO;AACzB","debugId":null}},
    {"offset": {"line": 313, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/components/line-item-price/index.tsx"],"sourcesContent":["import { getPercentageDiff } from \"@lib/util/get-precentage-diff\"\nimport { convertToLocale } from \"@lib/util/money\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { clx } from \"@medusajs/ui\"\n\ntype LineItemPriceProps = {\n  item: HttpTypes.StoreCartLineItem | HttpTypes.StoreOrderLineItem\n  style?: \"default\" | \"tight\"\n  currencyCode: string\n}\n\nconst LineItemPrice = ({\n  item,\n  style = \"default\",\n  currencyCode,\n}: LineItemPriceProps) => {\n  const { total, original_total } = item\n  const originalPrice = original_total\n  const currentPrice = total\n  const hasReducedPrice = currentPrice < originalPrice\n\n  return (\n    <div className=\"flex flex-col gap-x-2 text-ui-fg-subtle items-end\">\n      <div className=\"text-left\">\n        {hasReducedPrice && (\n          <>\n            <p>\n              {style === \"default\" && (\n                <span className=\"text-ui-fg-subtle\">Original: </span>\n              )}\n              <span\n                className=\"line-through text-ui-fg-muted\"\n                data-testid=\"product-original-price\"\n              >\n                {convertToLocale({\n                  amount: originalPrice,\n                  currency_code: currencyCode,\n                })}\n              </span>\n            </p>\n            {style === \"default\" && (\n              <span className=\"text-ui-fg-interactive\">\n                -{getPercentageDiff(originalPrice, currentPrice || 0)}%\n              </span>\n            )}\n          </>\n        )}\n        <span\n          className={clx(\"text-base-regular\", {\n            \"text-ui-fg-interactive\": hasReducedPrice,\n          })}\n          data-testid=\"product-price\"\n        >\n          {convertToLocale({\n            amount: currentPrice,\n            currency_code: currencyCode,\n          })}\n        </span>\n      </div>\n    </div>\n  )\n}\n\nexport default LineItemPrice\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAEA;;;;;AAQA,MAAM,gBAAgB,CAAC,EACrB,IAAI,EACJ,QAAQ,SAAS,EACjB,YAAY,EACO;IACnB,MAAM,EAAE,KAAK,EAAE,cAAc,EAAE,GAAG;IAClC,MAAM,gBAAgB;IACtB,MAAM,eAAe;IACrB,MAAM,kBAAkB,eAAe;IAEvC,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;gBACZ,iCACC;;sCACE,8OAAC;;gCACE,UAAU,2BACT,8OAAC;oCAAK,WAAU;8CAAoB;;;;;;8CAEtC,8OAAC;oCACC,WAAU;oCACV,eAAY;8CAEX,IAAA,8IAAe,EAAC;wCACf,QAAQ;wCACR,eAAe;oCACjB;;;;;;;;;;;;wBAGH,UAAU,2BACT,8OAAC;4BAAK,WAAU;;gCAAyB;gCACrC,IAAA,oKAAiB,EAAC,eAAe,gBAAgB;gCAAG;;;;;;;;;8BAK9D,8OAAC;oBACC,WAAW,IAAA,sKAAG,EAAC,qBAAqB;wBAClC,0BAA0B;oBAC5B;oBACA,eAAY;8BAEX,IAAA,8IAAe,EAAC;wBACf,QAAQ;wBACR,eAAe;oBACjB;;;;;;;;;;;;;;;;;AAKV;uCAEe","debugId":null}},
    {"offset": {"line": 410, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/common/icons/placeholder-image.tsx"],"sourcesContent":["import React from \"react\"\n\nimport { IconProps } from \"types/icon\"\n\nconst PlaceholderImage: React.FC<IconProps> = ({\n  size = \"20\",\n  color = \"currentColor\",\n  ...attributes\n}) => {\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...attributes}\n    >\n      <path\n        d=\"M15.3141 3.16699H4.68453C3.84588 3.16699 3.16602 3.84685 3.16602 4.6855V15.3151C3.16602 16.1537 3.84588 16.8336 4.68453 16.8336H15.3141C16.1527 16.8336 16.8326 16.1537 16.8326 15.3151V4.6855C16.8326 3.84685 16.1527 3.16699 15.3141 3.16699Z\"\n        stroke={color}\n        strokeWidth=\"1.53749\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M7.91699 9.16699C8.60735 9.16699 9.16699 8.60735 9.16699 7.91699C9.16699 7.22664 8.60735 6.66699 7.91699 6.66699C7.22664 6.66699 6.66699 7.22664 6.66699 7.91699C6.66699 8.60735 7.22664 9.16699 7.91699 9.16699Z\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M16.6667 12.5756L13.0208 9.1665L5 16.6665\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  )\n}\n\nexport default PlaceholderImage\n"],"names":[],"mappings":";;;;;;AAIA,MAAM,mBAAwC,CAAC,EAC7C,OAAO,IAAI,EACX,QAAQ,cAAc,EACtB,GAAG,YACJ;IACC,qBACE,8OAAC;QACC,OAAO;QACP,QAAQ;QACR,SAAQ;QACR,MAAK;QACL,OAAM;QACL,GAAG,UAAU;;0BAEd,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;0BAEjB,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;0BAEjB,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;;;;;;;AAIvB;uCAEe","debugId":null}},
    {"offset": {"line": 470, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/products/components/thumbnail/index.tsx"],"sourcesContent":["import { Container, clx } from \"@medusajs/ui\"\nimport Image from \"next/image\"\nimport React from \"react\"\n\nimport PlaceholderImage from \"@modules/common/icons/placeholder-image\"\n\ntype ThumbnailProps = {\n  thumbnail?: string | null\n  // TODO: Fix image typings\n  images?: any[] | null\n  size?: \"small\" | \"medium\" | \"large\" | \"full\" | \"square\"\n  isFeatured?: boolean\n  className?: string\n  \"data-testid\"?: string\n}\n\nconst Thumbnail: React.FC<ThumbnailProps> = ({\n  thumbnail,\n  images,\n  size = \"small\",\n  isFeatured,\n  className,\n  \"data-testid\": dataTestid,\n}) => {\n  const initialImage = thumbnail || images?.[0]?.url\n\n  return (\n    <Container\n      className={clx(\n        \"relative w-full overflow-hidden p-4 bg-ui-bg-subtle shadow-elevation-card-rest rounded-large group-hover:shadow-elevation-card-hover transition-shadow ease-in-out duration-150\",\n        className,\n        {\n          \"aspect-[11/14]\": isFeatured,\n          \"aspect-[9/16]\": !isFeatured && size !== \"square\",\n          \"aspect-[1/1]\": size === \"square\",\n          \"w-[180px]\": size === \"small\",\n          \"w-[290px]\": size === \"medium\",\n          \"w-[440px]\": size === \"large\",\n          \"w-full\": size === \"full\",\n        }\n      )}\n      data-testid={dataTestid}\n    >\n      <ImageOrPlaceholder image={initialImage} size={size} />\n    </Container>\n  )\n}\n\nconst ImageOrPlaceholder = ({\n  image,\n  size,\n}: Pick<ThumbnailProps, \"size\"> & { image?: string }) => {\n  return image ? (\n    <Image\n      src={image}\n      alt=\"Thumbnail\"\n      className=\"absolute inset-0 object-cover object-center\"\n      draggable={false}\n      quality={50}\n      sizes=\"(max-width: 576px) 280px, (max-width: 768px) 360px, (max-width: 992px) 480px, 800px\"\n      fill\n    />\n  ) : (\n    <div className=\"w-full h-full absolute inset-0 flex items-center justify-center\">\n      <PlaceholderImage size={size === \"small\" ? 16 : 24} />\n    </div>\n  )\n}\n\nexport default Thumbnail\n"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;AAGA;;;;;AAYA,MAAM,YAAsC,CAAC,EAC3C,SAAS,EACT,MAAM,EACN,OAAO,OAAO,EACd,UAAU,EACV,SAAS,EACT,eAAe,UAAU,EAC1B;IACC,MAAM,eAAe,aAAa,QAAQ,CAAC,EAAE,EAAE;IAE/C,qBACE,8OAAC,oMAAS;QACR,WAAW,IAAA,sKAAG,EACZ,mLACA,WACA;YACE,kBAAkB;YAClB,iBAAiB,CAAC,cAAc,SAAS;YACzC,gBAAgB,SAAS;YACzB,aAAa,SAAS;YACtB,aAAa,SAAS;YACtB,aAAa,SAAS;YACtB,UAAU,SAAS;QACrB;QAEF,eAAa;kBAEb,cAAA,8OAAC;YAAmB,OAAO;YAAc,MAAM;;;;;;;;;;;AAGrD;AAEA,MAAM,qBAAqB,CAAC,EAC1B,KAAK,EACL,IAAI,EAC8C;IAClD,OAAO,sBACL,8OAAC,wIAAK;QACJ,KAAK;QACL,KAAI;QACJ,WAAU;QACV,WAAW;QACX,SAAS;QACT,OAAM;QACN,IAAI;;;;;iEAGN,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC,qKAAgB;YAAC,MAAM,SAAS,UAAU,KAAK;;;;;;;;;;;AAGtD;uCAEe","debugId":null}},
    {"offset": {"line": 543, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/layout/components/cart-dropdown/index.tsx"],"sourcesContent":["\"use client\"\n\nimport {\n  Popover,\n  PopoverButton,\n  PopoverPanel,\n  Transition,\n} from \"@headlessui/react\"\nimport { convertToLocale } from \"@lib/util/money\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { Button } from \"@medusajs/ui\"\nimport DeleteButton from \"@modules/common/components/delete-button\"\nimport LineItemOptions from \"@modules/common/components/line-item-options\"\nimport LineItemPrice from \"@modules/common/components/line-item-price\"\nimport LocalizedClientLink from \"@modules/common/components/localized-client-link\"\nimport Thumbnail from \"@modules/products/components/thumbnail\"\nimport { usePathname } from \"next/navigation\"\nimport { Fragment, useEffect, useRef, useState } from \"react\"\n\nconst CartDropdown = ({\n  cart: cartState,\n}: {\n  cart?: HttpTypes.StoreCart | null\n}) => {\n  const [activeTimer, setActiveTimer] = useState<NodeJS.Timer | undefined>(\n    undefined\n  )\n  const [cartDropdownOpen, setCartDropdownOpen] = useState(false)\n\n  const open = () => setCartDropdownOpen(true)\n  const close = () => setCartDropdownOpen(false)\n\n  const totalItems =\n    cartState?.items?.reduce((acc, item) => {\n      return acc + item.quantity\n    }, 0) || 0\n\n  const subtotal = cartState?.subtotal ?? 0\n  const itemRef = useRef<number>(totalItems || 0)\n\n  const timedOpen = () => {\n    open()\n\n    const timer = setTimeout(close, 5000)\n\n    setActiveTimer(timer)\n  }\n\n  const openAndCancel = () => {\n    if (activeTimer) {\n      clearTimeout(activeTimer)\n    }\n\n    open()\n  }\n\n  // Clean up the timer when the component unmounts\n  useEffect(() => {\n    return () => {\n      if (activeTimer) {\n        clearTimeout(activeTimer)\n      }\n    }\n  }, [activeTimer])\n\n  const pathname = usePathname()\n\n  // open cart dropdown when modifying the cart items, but only if we're not on the cart page\n  useEffect(() => {\n    if (itemRef.current !== totalItems && !pathname.includes(\"/cart\")) {\n      timedOpen()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [totalItems, itemRef.current])\n\n  return (\n    <div\n      className=\"h-full z-50\"\n      onMouseEnter={openAndCancel}\n      onMouseLeave={close}\n    >\n      <Popover className=\"relative h-full\">\n        <PopoverButton className=\"h-full\">\n          <LocalizedClientLink\n            className=\"hover:text-ui-fg-base\"\n            href=\"/cart\"\n            data-testid=\"nav-cart-link\"\n          >{`Cart (${totalItems})`}</LocalizedClientLink>\n        </PopoverButton>\n        <Transition\n          show={cartDropdownOpen}\n          as={Fragment}\n          enter=\"transition ease-out duration-200\"\n          enterFrom=\"opacity-0 translate-y-1\"\n          enterTo=\"opacity-100 translate-y-0\"\n          leave=\"transition ease-in duration-150\"\n          leaveFrom=\"opacity-100 translate-y-0\"\n          leaveTo=\"opacity-0 translate-y-1\"\n        >\n          <PopoverPanel\n            static\n            className=\"hidden small:block absolute top-[calc(100%+1px)] right-0 bg-white border-x border-b border-gray-200 w-[420px] text-ui-fg-base\"\n            data-testid=\"nav-cart-dropdown\"\n          >\n            <div className=\"p-4 flex items-center justify-center\">\n              <h3 className=\"text-large-semi\">Cart</h3>\n            </div>\n            {cartState && cartState.items?.length ? (\n              <>\n                <div className=\"overflow-y-scroll max-h-[402px] px-4 grid grid-cols-1 gap-y-8 no-scrollbar p-px\">\n                  {cartState.items\n                    .sort((a, b) => {\n                      return (a.created_at ?? \"\") > (b.created_at ?? \"\")\n                        ? -1\n                        : 1\n                    })\n                    .map((item) => (\n                      <div\n                        className=\"grid grid-cols-[122px_1fr] gap-x-4\"\n                        key={item.id}\n                        data-testid=\"cart-item\"\n                      >\n                        <LocalizedClientLink\n                          href={`/products/${item.product_handle}`}\n                          className=\"w-24\"\n                        >\n                          <Thumbnail\n                            thumbnail={item.thumbnail}\n                            images={item.variant?.product?.images}\n                            size=\"square\"\n                          />\n                        </LocalizedClientLink>\n                        <div className=\"flex flex-col justify-between flex-1\">\n                          <div className=\"flex flex-col flex-1\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex flex-col overflow-ellipsis whitespace-nowrap mr-4 w-[180px]\">\n                                <h3 className=\"text-base-regular overflow-hidden text-ellipsis\">\n                                  <LocalizedClientLink\n                                    href={`/products/${item.product_handle}`}\n                                    data-testid=\"product-link\"\n                                  >\n                                    {item.title}\n                                  </LocalizedClientLink>\n                                </h3>\n                                <LineItemOptions\n                                  variant={item.variant}\n                                  data-testid=\"cart-item-variant\"\n                                  data-value={item.variant}\n                                />\n                                <span\n                                  data-testid=\"cart-item-quantity\"\n                                  data-value={item.quantity}\n                                >\n                                  Quantity: {item.quantity}\n                                </span>\n                              </div>\n                              <div className=\"flex justify-end\">\n                                <LineItemPrice\n                                  item={item}\n                                  style=\"tight\"\n                                  currencyCode={cartState.currency_code}\n                                />\n                              </div>\n                            </div>\n                          </div>\n                          <DeleteButton\n                            id={item.id}\n                            className=\"mt-1\"\n                            data-testid=\"cart-item-remove-button\"\n                          >\n                            Remove\n                          </DeleteButton>\n                        </div>\n                      </div>\n                    ))}\n                </div>\n                <div className=\"p-4 flex flex-col gap-y-4 text-small-regular\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-ui-fg-base font-semibold\">\n                      Subtotal{\" \"}\n                      <span className=\"font-normal\">(excl. taxes)</span>\n                    </span>\n                    <span\n                      className=\"text-large-semi\"\n                      data-testid=\"cart-subtotal\"\n                      data-value={subtotal}\n                    >\n                      {convertToLocale({\n                        amount: subtotal,\n                        currency_code: cartState.currency_code,\n                      })}\n                    </span>\n                  </div>\n                  <LocalizedClientLink href=\"/cart\" passHref>\n                    <Button\n                      className=\"w-full\"\n                      size=\"large\"\n                      data-testid=\"go-to-cart-button\"\n                    >\n                      Go to cart\n                    </Button>\n                  </LocalizedClientLink>\n                </div>\n              </>\n            ) : (\n              <div>\n                <div className=\"flex py-16 flex-col gap-y-4 items-center justify-center\">\n                  <div className=\"bg-gray-900 text-small-regular flex items-center justify-center w-6 h-6 rounded-full text-white\">\n                    <span>0</span>\n                  </div>\n                  <span>Your shopping bag is empty.</span>\n                  <div>\n                    <LocalizedClientLink href=\"/store\">\n                      <>\n                        <span className=\"sr-only\">Go to all products page</span>\n                        <Button onClick={close}>Explore products</Button>\n                      </>\n                    </LocalizedClientLink>\n                  </div>\n                </div>\n              </div>\n            )}\n          </PopoverPanel>\n        </Transition>\n      </Popover>\n    </div>\n  )\n}\n\nexport default CartDropdown\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 967, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/lib/data/cart.ts"],"sourcesContent":["\"use server\"\n\nimport { sdk } from \"@lib/config\"\nimport medusaError from \"@lib/util/medusa-error\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { revalidateTag } from \"next/cache\"\nimport { redirect } from \"next/navigation\"\nimport {\n  getAuthHeaders,\n  getCacheOptions,\n  getCacheTag,\n  getCartId,\n  removeCartId,\n  setCartId,\n} from \"./cookies\"\nimport { getRegion } from \"./regions\"\n\n/**\n * Retrieves a cart by its ID. If no ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to retrieve.\n * @returns The cart object if found, or null if not found.\n */\nexport async function retrieveCart(cartId?: string, fields?: string) {\n  const id = cartId || (await getCartId())\n  fields ??= \"*items, *region, *items.product, *items.variant, *items.thumbnail, *items.metadata, +items.total, *promotions, +shipping_methods.name\"\n\n  if (!id) {\n    return null\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const next = {\n    ...(await getCacheOptions(\"carts\")),\n  }\n\n  return await sdk.client\n    .fetch<HttpTypes.StoreCartResponse>(`/store/carts/${id}`, {\n      method: \"GET\",\n      query: {\n        fields\n      },\n      headers,\n      next,\n      cache: \"force-cache\",\n    })\n    .then(({ cart }: { cart: HttpTypes.StoreCart }) => cart)\n    .catch(() => null)\n}\n\nexport async function getOrSetCart(countryCode: string) {\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  let cart = await retrieveCart(undefined, 'id,region_id')\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  if (!cart) {\n    const cartResp = await sdk.store.cart.create(\n      { region_id: region.id },\n      {},\n      headers\n    )\n    cart = cartResp.cart\n\n    await setCartId(cart.id)\n\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  if (cart && cart?.region_id !== region.id) {\n    await sdk.store.cart.update(cart.id, { region_id: region.id }, {}, headers)\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  return cart\n}\n\nexport async function updateCart(data: HttpTypes.StoreUpdateCart) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found, please create one before updating\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, data, {}, headers)\n    .then(async ({ cart }: { cart: HttpTypes.StoreCart }) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n\n      return cart\n    })\n    .catch(medusaError)\n}\n\nexport async function addToCart({\n  variantId,\n  quantity,\n  countryCode,\n}: {\n  variantId: string\n  quantity: number\n  countryCode: string\n}) {\n  if (!variantId) {\n    throw new Error(\"Missing variant ID when adding to cart\")\n  }\n\n  const cart = await getOrSetCart(countryCode)\n\n  if (!cart) {\n    throw new Error(\"Error retrieving or creating cart\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .createLineItem(\n      cart.id,\n      {\n        variant_id: variantId,\n        quantity,\n      },\n      {},\n      headers\n    )\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function updateLineItem({\n  lineId,\n  quantity,\n}: {\n  lineId: string\n  quantity: number\n}) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when updating line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when updating line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .updateLineItem(cartId, lineId, { quantity }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function deleteLineItem(lineId: string) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when deleting line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when deleting line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .deleteLineItem(cartId, lineId, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function setShippingMethod({\n  cartId,\n  shippingMethodId,\n}: {\n  cartId: string\n  shippingMethodId: string\n}) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .addShippingMethod(cartId, { option_id: shippingMethodId }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function initiatePaymentSession(\n  cart: HttpTypes.StoreCart,\n  data: HttpTypes.StoreInitializePaymentSession\n) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.payment\n    .initiatePaymentSession(cart, data, {}, headers)\n    .then(async (resp) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return resp\n    })\n    .catch(medusaError)\n}\n\nexport async function applyPromotions(codes: string[]) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, { promo_codes: codes }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function applyGiftCard(code: string) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, { gift_cards: [{ code }] }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function removeDiscount(code: string) {\n  // const cartId = getCartId()\n  // if (!cartId) return \"No cartId cookie found\"\n  // try {\n  //   await deleteDiscount(cartId, code)\n  //   revalidateTag(\"cart\")\n  // } catch (error: any) {\n  //   throw error\n  // }\n}\n\nexport async function removeGiftCard(\n  codeToRemove: string,\n  giftCards: any[]\n  // giftCards: GiftCard[]\n) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, {\n  //       gift_cards: [...giftCards]\n  //         .filter((gc) => gc.code !== codeToRemove)\n  //         .map((gc) => ({ code: gc.code })),\n  //     }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function submitPromotionForm(\n  currentState: unknown,\n  formData: FormData\n) {\n  const code = formData.get(\"code\") as string\n  try {\n    await applyPromotions([code])\n  } catch (e: any) {\n    return e.message\n  }\n}\n\n// TODO: Pass a POJO instead of a form entity here\nexport async function setAddresses(currentState: unknown, formData: FormData) {\n  try {\n    if (!formData) {\n      throw new Error(\"No form data found when setting addresses\")\n    }\n    const cartId = getCartId()\n    if (!cartId) {\n      throw new Error(\"No existing cart found when setting addresses\")\n    }\n\n    const data = {\n      shipping_address: {\n        first_name: formData.get(\"shipping_address.first_name\"),\n        last_name: formData.get(\"shipping_address.last_name\"),\n        address_1: formData.get(\"shipping_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"shipping_address.company\"),\n        postal_code: formData.get(\"shipping_address.postal_code\"),\n        city: formData.get(\"shipping_address.city\"),\n        country_code: formData.get(\"shipping_address.country_code\"),\n        province: formData.get(\"shipping_address.province\"),\n        phone: formData.get(\"shipping_address.phone\"),\n      },\n      email: formData.get(\"email\"),\n    } as any\n\n    const sameAsBilling = formData.get(\"same_as_billing\")\n    if (sameAsBilling === \"on\") data.billing_address = data.shipping_address\n\n    if (sameAsBilling !== \"on\")\n      data.billing_address = {\n        first_name: formData.get(\"billing_address.first_name\"),\n        last_name: formData.get(\"billing_address.last_name\"),\n        address_1: formData.get(\"billing_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"billing_address.company\"),\n        postal_code: formData.get(\"billing_address.postal_code\"),\n        city: formData.get(\"billing_address.city\"),\n        country_code: formData.get(\"billing_address.country_code\"),\n        province: formData.get(\"billing_address.province\"),\n        phone: formData.get(\"billing_address.phone\"),\n      }\n    await updateCart(data)\n  } catch (e: any) {\n    return e.message\n  }\n\n  redirect(\n    `/${formData.get(\"shipping_address.country_code\")}/checkout?step=delivery`\n  )\n}\n\n/**\n * Places an order for a cart. If no cart ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to place an order for.\n * @returns The cart object if the order was successful, or null if not.\n */\nexport async function placeOrder(cartId?: string) {\n  const id = cartId || (await getCartId())\n\n  if (!id) {\n    throw new Error(\"No existing cart found when placing an order\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const cartRes = await sdk.store.cart\n    .complete(id, {}, headers)\n    .then(async (cartRes) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return cartRes\n    })\n    .catch(medusaError)\n\n  if (cartRes?.type === \"order\") {\n    const countryCode =\n      cartRes.order.shipping_address?.country_code?.toLowerCase()\n\n    const orderCacheTag = await getCacheTag(\"orders\")\n    revalidateTag(orderCacheTag)\n\n    removeCartId()\n    redirect(`/${countryCode}/order/${cartRes?.order.id}/confirmed`)\n  }\n\n  return cartRes.cart\n}\n\n/**\n * Updates the countrycode param and revalidates the regions cache\n * @param regionId\n * @param countryCode\n */\nexport async function updateRegion(countryCode: string, currentPath: string) {\n  const cartId = await getCartId()\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  if (cartId) {\n    await updateCart({ region_id: region.id })\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  const regionCacheTag = await getCacheTag(\"regions\")\n  revalidateTag(regionCacheTag)\n\n  const productsCacheTag = await getCacheTag(\"products\")\n  revalidateTag(productsCacheTag)\n\n  redirect(`/${countryCode}${currentPath}`)\n}\n\nexport async function listCartOptions() {\n  const cartId = await getCartId()\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n  const next = {\n    ...(await getCacheOptions(\"shippingOptions\")),\n  }\n\n  return await sdk.client.fetch<{\n    shipping_options: HttpTypes.StoreCartShippingOption[]\n  }>(\"/store/shipping-options\", {\n    query: { cart_id: cartId },\n    next,\n    headers,\n    cache: \"force-cache\",\n  })\n}\n"],"names":[],"mappings":";;;;;;;IA6asB,eAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 979, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/layout/components/country-select/index.tsx"],"sourcesContent":["\"use client\"\n\nimport {\n  Listbox,\n  ListboxButton,\n  ListboxOption,\n  ListboxOptions,\n  Transition,\n} from \"@headlessui/react\"\nimport { Fragment, useEffect, useMemo, useState } from \"react\"\nimport ReactCountryFlag from \"react-country-flag\"\n\nimport { StateType } from \"@lib/hooks/use-toggle-state\"\nimport { useParams, usePathname } from \"next/navigation\"\nimport { updateRegion } from \"@lib/data/cart\"\nimport { HttpTypes } from \"@medusajs/types\"\n\ntype CountryOption = {\n  country: string\n  region: string\n  label: string\n}\n\ntype CountrySelectProps = {\n  toggleState: StateType\n  regions: HttpTypes.StoreRegion[]\n}\n\nconst CountrySelect = ({ toggleState, regions }: CountrySelectProps) => {\n  const [current, setCurrent] = useState<\n    | { country: string | undefined; region: string; label: string | undefined }\n    | undefined\n  >(undefined)\n\n  const { countryCode } = useParams()\n  const currentPath = usePathname().split(`/${countryCode}`)[1]\n\n  const { state, close } = toggleState\n\n  const options = useMemo(() => {\n    return regions\n      ?.map((r) => {\n        return r.countries?.map((c) => ({\n          country: c.iso_2,\n          region: r.id,\n          label: c.display_name,\n        }))\n      })\n      .flat()\n      .sort((a, b) => (a?.label ?? \"\").localeCompare(b?.label ?? \"\"))\n  }, [regions])\n\n  useEffect(() => {\n    if (countryCode) {\n      const option = options?.find((o) => o?.country === countryCode)\n      setCurrent(option)\n    }\n  }, [options, countryCode])\n\n  const handleChange = (option: CountryOption) => {\n    updateRegion(option.country, currentPath)\n    close()\n  }\n\n  return (\n    <div>\n      <Listbox\n        as=\"span\"\n        onChange={handleChange}\n        defaultValue={\n          countryCode\n            ? options?.find((o) => o?.country === countryCode)\n            : undefined\n        }\n      >\n        <ListboxButton className=\"py-1 w-full\">\n          <div className=\"txt-compact-small flex items-start gap-x-2\">\n            <span>Shipping to:</span>\n            {current && (\n              <span className=\"txt-compact-small flex items-center gap-x-2\">\n                {/* @ts-ignore */}\n                <ReactCountryFlag\n                  svg\n                  style={{\n                    width: \"16px\",\n                    height: \"16px\",\n                  }}\n                  countryCode={current.country ?? \"\"}\n                />\n                {current.label}\n              </span>\n            )}\n          </div>\n        </ListboxButton>\n        <div className=\"flex relative w-full min-w-[320px]\">\n          <Transition\n            show={state}\n            as={Fragment}\n            leave=\"transition ease-in duration-150\"\n            leaveFrom=\"opacity-100\"\n            leaveTo=\"opacity-0\"\n          >\n            <ListboxOptions\n              className=\"absolute -bottom-[calc(100%-36px)] left-0 xsmall:left-auto xsmall:right-0 max-h-[442px] overflow-y-scroll z-[900] bg-white drop-shadow-md text-small-regular uppercase text-black no-scrollbar rounded-rounded w-full\"\n              static\n            >\n              {options?.map((o, index) => {\n                return (\n                  <ListboxOption\n                    key={index}\n                    value={o}\n                    className=\"py-2 hover:bg-gray-200 px-3 cursor-pointer flex items-center gap-x-2\"\n                  >\n                    {/* @ts-ignore */}\n                    <ReactCountryFlag\n                      svg\n                      style={{\n                        width: \"16px\",\n                        height: \"16px\",\n                      }}\n                      countryCode={o?.country ?? \"\"}\n                    />{\" \"}\n                    {o?.label}\n                  </ListboxOption>\n                )\n              })}\n            </ListboxOptions>\n          </Transition>\n        </div>\n      </Listbox>\n    </div>\n  )\n}\n\nexport default CountrySelect\n"],"names":[],"mappings":";;;;;AAEA;AAAA;AAOA;AACA;AAGA;AACA;AAdA;;;;;;;AA4BA,MAAM,gBAAgB,CAAC,EAAE,WAAW,EAAE,OAAO,EAAsB;IACjE,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,iNAAQ,EAGpC;IAEF,MAAM,EAAE,WAAW,EAAE,GAAG,IAAA,+IAAS;IACjC,MAAM,cAAc,IAAA,iJAAW,IAAG,KAAK,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,EAAE;IAE7D,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG;IAEzB,MAAM,UAAU,IAAA,gNAAO,EAAC;QACtB,OAAO,SACH,IAAI,CAAC;YACL,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,IAAM,CAAC;oBAC9B,SAAS,EAAE,KAAK;oBAChB,QAAQ,EAAE,EAAE;oBACZ,OAAO,EAAE,YAAY;gBACvB,CAAC;QACH,GACC,OACA,KAAK,CAAC,GAAG,IAAM,CAAC,GAAG,SAAS,EAAE,EAAE,aAAa,CAAC,GAAG,SAAS;IAC/D,GAAG;QAAC;KAAQ;IAEZ,IAAA,kNAAS,EAAC;QACR,IAAI,aAAa;YACf,MAAM,SAAS,SAAS,KAAK,CAAC,IAAM,GAAG,YAAY;YACnD,WAAW;QACb;IACF,GAAG;QAAC;QAAS;KAAY;IAEzB,MAAM,eAAe,CAAC;QACpB,IAAA,0KAAY,EAAC,OAAO,OAAO,EAAE;QAC7B;IACF;IAEA,qBACE,8OAAC;kBACC,cAAA,8OAAC,4LAAO;YACN,IAAG;YACH,UAAU;YACV,cACE,cACI,SAAS,KAAK,CAAC,IAAM,GAAG,YAAY,eACpC;;8BAGN,8OAAC,kMAAa;oBAAC,WAAU;8BACvB,cAAA,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;0CAAK;;;;;;4BACL,yBACC,8OAAC;gCAAK,WAAU;;kDAEd,8OAAC,8LAAgB;wCACf,GAAG;wCACH,OAAO;4CACL,OAAO;4CACP,QAAQ;wCACV;wCACA,aAAa,QAAQ,OAAO,IAAI;;;;;;oCAEjC,QAAQ,KAAK;;;;;;;;;;;;;;;;;;8BAKtB,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC,qMAAU;wBACT,MAAM;wBACN,IAAI,iNAAQ;wBACZ,OAAM;wBACN,WAAU;wBACV,SAAQ;kCAER,cAAA,8OAAC,mMAAc;4BACb,WAAU;4BACV,MAAM;sCAEL,SAAS,IAAI,CAAC,GAAG;gCAChB,qBACE,8OAAC,kMAAa;oCAEZ,OAAO;oCACP,WAAU;;sDAGV,8OAAC,8LAAgB;4CACf,GAAG;4CACH,OAAO;gDACL,OAAO;gDACP,QAAQ;4CACV;4CACA,aAAa,GAAG,WAAW;;;;;;wCAC1B;wCACF,GAAG;;mCAbC;;;;;4BAgBX;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOd;uCAEe","debugId":null}},
    {"offset": {"line": 1146, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/layout/components/side-menu/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { Popover, PopoverPanel, Transition } from \"@headlessui/react\"\nimport { ArrowRightMini, XMark } from \"@medusajs/icons\"\nimport { Text, clx, useToggleState } from \"@medusajs/ui\"\nimport { Fragment } from \"react\"\n\nimport LocalizedClientLink from \"@modules/common/components/localized-client-link\"\nimport CountrySelect from \"../country-select\"\nimport { HttpTypes } from \"@medusajs/types\"\n\nconst SideMenuItems = {\n  Home: \"/\",\n  Store: \"/store\",\n  Account: \"/account\",\n  Cart: \"/cart\",\n}\n\nconst SideMenu = ({ regions }: { regions: HttpTypes.StoreRegion[] | null }) => {\n  const toggleState = useToggleState()\n\n  return (\n    <div className=\"h-full\">\n      <div className=\"flex items-center h-full\">\n        <Popover className=\"h-full flex\">\n          {({ open, close }) => (\n            <>\n              <div className=\"relative flex h-full\">\n                <Popover.Button\n                  data-testid=\"nav-menu-button\"\n                  className=\"relative h-full flex items-center transition-all ease-out duration-200 focus:outline-none hover:text-ui-fg-base\"\n                >\n                  Menu\n                </Popover.Button>\n              </div>\n\n              <Transition\n                show={open}\n                as={Fragment}\n                enter=\"transition ease-out duration-150\"\n                enterFrom=\"opacity-0\"\n                enterTo=\"opacity-100 backdrop-blur-2xl\"\n                leave=\"transition ease-in duration-150\"\n                leaveFrom=\"opacity-100 backdrop-blur-2xl\"\n                leaveTo=\"opacity-0\"\n              >\n                <PopoverPanel className=\"flex flex-col absolute w-full pr-4 sm:pr-0 sm:w-1/3 2xl:w-1/4 sm:min-w-min h-[calc(100vh-1rem)] z-30 inset-x-0 text-sm text-ui-fg-on-color m-2 backdrop-blur-2xl\">\n                  <div\n                    data-testid=\"nav-menu-popup\"\n                    className=\"flex flex-col h-full bg-[rgba(3,7,18,0.5)] rounded-rounded justify-between p-6\"\n                  >\n                    <div className=\"flex justify-end\" id=\"xmark\">\n                      <button data-testid=\"close-menu-button\" onClick={close}>\n                        <XMark />\n                      </button>\n                    </div>\n                    <ul className=\"flex flex-col gap-6 items-start justify-start\">\n                      {Object.entries(SideMenuItems).map(([name, href]) => {\n                        return (\n                          <li key={name}>\n                            <LocalizedClientLink\n                              href={href}\n                              className=\"text-3xl leading-10 hover:text-ui-fg-disabled\"\n                              onClick={close}\n                              data-testid={`${name.toLowerCase()}-link`}\n                            >\n                              {name}\n                            </LocalizedClientLink>\n                          </li>\n                        )\n                      })}\n                    </ul>\n                    <div className=\"flex flex-col gap-y-6\">\n                      <div\n                        className=\"flex justify-between\"\n                        onMouseEnter={toggleState.open}\n                        onMouseLeave={toggleState.close}\n                      >\n                        {regions && (\n                          <CountrySelect\n                            toggleState={toggleState}\n                            regions={regions}\n                          />\n                        )}\n                        <ArrowRightMini\n                          className={clx(\n                            \"transition-transform duration-150\",\n                            toggleState.state ? \"-rotate-90\" : \"\"\n                          )}\n                        />\n                      </div>\n                      <Text className=\"flex justify-between txt-compact-small\">\n                        Â© {new Date().getFullYear()} Medusa Store. All rights\n                        reserved.\n                      </Text>\n                    </div>\n                  </div>\n                </PopoverPanel>\n              </Transition>\n            </>\n          )}\n        </Popover>\n      </div>\n    </div>\n  )\n}\n\nexport default SideMenu\n"],"names":[],"mappings":";;;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AARA;;;;;;;;AAWA,MAAM,gBAAgB;IACpB,MAAM;IACN,OAAO;IACP,SAAS;IACT,MAAM;AACR;AAEA,MAAM,WAAW,CAAC,EAAE,OAAO,EAA+C;IACxE,MAAM,cAAc,IAAA,8NAAc;IAElC,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC,4LAAO;gBAAC,WAAU;0BAChB,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,iBACf;;0CACE,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC,4LAAO,CAAC,MAAM;oCACb,eAAY;oCACZ,WAAU;8CACX;;;;;;;;;;;0CAKH,8OAAC,qMAAU;gCACT,MAAM;gCACN,IAAI,iNAAQ;gCACZ,OAAM;gCACN,WAAU;gCACV,SAAQ;gCACR,OAAM;gCACN,WAAU;gCACV,SAAQ;0CAER,cAAA,8OAAC,iMAAY;oCAAC,WAAU;8CACtB,cAAA,8OAAC;wCACC,eAAY;wCACZ,WAAU;;0DAEV,8OAAC;gDAAI,WAAU;gDAAmB,IAAG;0DACnC,cAAA,8OAAC;oDAAO,eAAY;oDAAoB,SAAS;8DAC/C,cAAA,8OAAC,4MAAK;;;;;;;;;;;;;;;0DAGV,8OAAC;gDAAG,WAAU;0DACX,OAAO,OAAO,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,MAAM,KAAK;oDAC9C,qBACE,8OAAC;kEACC,cAAA,8OAAC,0LAAmB;4DAClB,MAAM;4DACN,WAAU;4DACV,SAAS;4DACT,eAAa,GAAG,KAAK,WAAW,GAAG,KAAK,CAAC;sEAExC;;;;;;uDAPI;;;;;gDAWb;;;;;;0DAEF,8OAAC;gDAAI,WAAU;;kEACb,8OAAC;wDACC,WAAU;wDACV,cAAc,YAAY,IAAI;wDAC9B,cAAc,YAAY,KAAK;;4DAE9B,yBACC,8OAAC,gLAAa;gEACZ,aAAa;gEACb,SAAS;;;;;;0EAGb,8OAAC,2OAAc;gEACb,WAAW,IAAA,sKAAG,EACZ,qCACA,YAAY,KAAK,GAAG,eAAe;;;;;;;;;;;;kEAIzC,8OAAC,qLAAI;wDAAC,WAAU;;4DAAyC;4DACpD,IAAI,OAAO,WAAW;4DAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAapD;uCAEe","debugId":null}},
    {"offset": {"line": 1349, "column": 0}, "map": {"version":3,"sources":["file:///root/app-storefront/src/modules/shipping/components/free-shipping-price-nudge/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { convertToLocale } from \"@lib/util/money\"\nimport { CheckCircleSolid, XMark } from \"@medusajs/icons\"\nimport {\n  HttpTypes,\n  StoreCart,\n  StoreCartShippingOption,\n  StorePrice,\n} from \"@medusajs/types\"\nimport { Button, clx } from \"@medusajs/ui\"\nimport LocalizedClientLink from \"@modules/common/components/localized-client-link\"\nimport { useState } from \"react\"\nimport { StoreFreeShippingPrice } from \"types/global\"\n\nconst computeTarget = (\n  cart: HttpTypes.StoreCart,\n  price: HttpTypes.StorePrice\n) => {\n  const priceRule = (price.price_rules || []).find(\n    (pr) => pr.attribute === \"item_total\"\n  )!\n\n  const currentAmount = cart.item_total\n  const targetAmount = parseFloat(priceRule.value)\n\n  if (priceRule.operator === \"gt\") {\n    return {\n      current_amount: currentAmount,\n      target_amount: targetAmount,\n      target_reached: currentAmount > targetAmount,\n      target_remaining:\n        currentAmount > targetAmount ? 0 : targetAmount + 1 - currentAmount,\n      remaining_percentage: (currentAmount / targetAmount) * 100,\n    }\n  } else if (priceRule.operator === \"gte\") {\n    return {\n      current_amount: currentAmount,\n      target_amount: targetAmount,\n      target_reached: currentAmount > targetAmount,\n      target_remaining:\n        currentAmount > targetAmount ? 0 : targetAmount - currentAmount,\n      remaining_percentage: (currentAmount / targetAmount) * 100,\n    }\n  } else if (priceRule.operator === \"lt\") {\n    return {\n      current_amount: currentAmount,\n      target_amount: targetAmount,\n      target_reached: targetAmount > currentAmount,\n      target_remaining:\n        targetAmount > currentAmount ? 0 : currentAmount + 1 - targetAmount,\n      remaining_percentage: (currentAmount / targetAmount) * 100,\n    }\n  } else if (priceRule.operator === \"lte\") {\n    return {\n      current_amount: currentAmount,\n      target_amount: targetAmount,\n      target_reached: targetAmount > currentAmount,\n      target_remaining:\n        targetAmount > currentAmount ? 0 : currentAmount - targetAmount,\n      remaining_percentage: (currentAmount / targetAmount) * 100,\n    }\n  } else {\n    return {\n      current_amount: currentAmount,\n      target_amount: targetAmount,\n      target_reached: currentAmount === targetAmount,\n      target_remaining:\n        targetAmount > currentAmount ? 0 : targetAmount - currentAmount,\n      remaining_percentage: (currentAmount / targetAmount) * 100,\n    }\n  }\n}\n\nexport default function ShippingPriceNudge({\n  variant = \"inline\",\n  cart,\n  shippingOptions,\n}: {\n  variant?: \"popup\" | \"inline\"\n  cart: StoreCart\n  shippingOptions: StoreCartShippingOption[]\n}) {\n  if (!cart || !shippingOptions?.length) {\n    return\n  }\n\n  // Check if any shipping options have a conditional price based on item_total\n  const freeShippingPrice = shippingOptions\n    .map((shippingOption) => {\n      const calculatedPrice = shippingOption.calculated_price\n\n      if (!calculatedPrice) {\n        return\n      }\n\n      // Get all prices that are:\n      // 1. Currency code is same as the cart's\n      // 2. Have a rule that is set on item_total\n      const validCurrencyPrices = shippingOption.prices.filter(\n        (price) =>\n          price.currency_code === cart.currency_code &&\n          (price.price_rules || []).some(\n            (priceRule) => priceRule.attribute === \"item_total\"\n          )\n      )\n\n      return validCurrencyPrices.map((price) => {\n        return {\n          ...price,\n          shipping_option_id: shippingOption.id,\n          ...computeTarget(cart, price),\n        }\n      })\n    })\n    .flat(1)\n    .filter(Boolean)\n    // We focus here entirely on free shipping, but this can be edited to handle multiple layers\n    // of reduced shipping prices.\n    .find((price) => price?.amount === 0)\n\n  if (!freeShippingPrice) {\n    return\n  }\n\n  if (variant === \"popup\") {\n    return <FreeShippingPopup cart={cart} price={freeShippingPrice} />\n  } else {\n    return <FreeShippingInline cart={cart} price={freeShippingPrice} />\n  }\n}\n\nfunction FreeShippingInline({\n  cart,\n  price,\n}: {\n  cart: StoreCart\n  price: StorePrice & {\n    target_reached: boolean\n    target_remaining: number\n    remaining_percentage: number\n  }\n}) {\n  return (\n    <div className=\"bg-neutral-100 p-2 rounded-lg border\">\n      <div className=\"space-y-1.5\">\n        <div className=\"flex justify-between text-xs text-neutral-600\">\n          <div>\n            {price.target_reached ? (\n              <div className=\"flex items-center gap-1.5\">\n                <CheckCircleSolid className=\"text-green-500 inline-block\" />{\" \"}\n                Free Shipping unlocked!\n              </div>\n            ) : (\n              `Unlock Free Shipping`\n            )}\n          </div>\n\n          <div\n            className={clx(\"visible\", {\n              \"opacity-0 invisible\": price.target_reached,\n            })}\n          >\n            Only{\" \"}\n            <span className=\"text-neutral-950\">\n              {convertToLocale({\n                amount: price.target_remaining,\n                currency_code: cart.currency_code,\n              })}\n            </span>{\" \"}\n            away\n          </div>\n        </div>\n        <div className=\"flex justify-between gap-1\">\n          <div\n            className={clx(\n              \"bg-gradient-to-r from-zinc-400 to-zinc-500 h-1 rounded-full max-w-full duration-500 ease-in-out\",\n              {\n                \"from-green-400 to-green-500\": price.target_reached,\n              }\n            )}\n            style={{ width: `${price.remaining_percentage}%` }}\n          ></div>\n          <div className=\"bg-neutral-300 h-1 rounded-full w-fit flex-grow\"></div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction FreeShippingPopup({\n  cart,\n  price,\n}: {\n  cart: StoreCart\n  price: StoreFreeShippingPrice\n}) {\n  const [isClosed, setIsClosed] = useState(false)\n\n  return (\n    <div\n      className={clx(\n        \"fixed bottom-5 right-5 flex flex-col items-end gap-2 transition-all duration-500 ease-in-out z-10\",\n        {\n          \"opacity-0 invisible delay-1000\": price.target_reached,\n          \"opacity-0 invisible\": isClosed,\n          \"opacity-100 visible\": !price.target_reached && !isClosed,\n        }\n      )}\n    >\n      <div>\n        <Button\n          className=\"rounded-full bg-neutral-900 shadow-none outline-none border-none text-[15px] p-2\"\n          onClick={() => setIsClosed(true)}\n        >\n          <XMark />\n        </Button>\n      </div>\n\n      <div className=\"w-[400px] bg-black text-white p-6 rounded-lg \">\n        <div className=\"pb-4\">\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between text-[15px] text-neutral-400\">\n              <div>\n                {price.target_reached ? (\n                  <div className=\"flex items-center gap-1.5\">\n                    <CheckCircleSolid className=\"text-green-500 inline-block\" />{\" \"}\n                    Free Shipping unlocked!\n                  </div>\n                ) : (\n                  `Unlock Free Shipping`\n                )}\n              </div>\n\n              <div\n                className={clx(\"visible\", {\n                  \"opacity-0 invisible\": price.target_reached,\n                })}\n              >\n                Only{\" \"}\n                <span className=\"text-white\">\n                  {convertToLocale({\n                    amount: price.target_remaining,\n                    currency_code: cart.currency_code,\n                  })}\n                </span>{\" \"}\n                away\n              </div>\n            </div>\n            <div className=\"flex justify-between gap-1\">\n              <div\n                className={clx(\n                  \"bg-gradient-to-r from-zinc-400 to-zinc-500 h-1.5 rounded-full max-w-full duration-500 ease-in-out\",\n                  {\n                    \"from-green-400 to-green-500\": price.target_reached,\n                  }\n                )}\n                style={{ width: `${price.remaining_percentage}%` }}\n              ></div>\n              <div className=\"bg-zinc-600 h-1.5 rounded-full w-fit flex-grow\"></div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex gap-3\">\n          <LocalizedClientLink\n            className=\"rounded-2xl bg-transparent shadow-none outline-none border-[1px] border-white text-[15px] py-2.5 px-4\"\n            href=\"/cart\"\n          >\n            View cart\n          </LocalizedClientLink>\n\n          <LocalizedClientLink\n            className=\"flex-grow rounded-2xl bg-white text-neutral-950 shadow-none outline-none border-[1px] border-white text-[15px] py-2.5 px-4 text-center\"\n            href=\"/store\"\n          >\n            View products\n          </LocalizedClientLink>\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}