{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { HttpTypes } from \"@medusajs/types\"\nimport { NextRequest, NextResponse } from \"next/server\"\n\nconst BACKEND_URL = process.env.MEDUSA_BACKEND_URL\nconst PUBLISHABLE_API_KEY = process.env.NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY\nconst DEFAULT_REGION = process.env.NEXT_PUBLIC_DEFAULT_REGION || \"us\"\n\nconst regionMapCache = {\n  regionMap: new Map<string, HttpTypes.StoreRegion>(),\n  regionMapUpdated: Date.now(),\n}\n\nasync function getRegionMap(cacheId: string) {\n  const { regionMap, regionMapUpdated } = regionMapCache\n\n  if (!BACKEND_URL) {\n    throw new Error(\n      \"Middleware.ts: Error fetching regions. Did you set up regions in your Medusa Admin and define a MEDUSA_BACKEND_URL environment variable? Note that the variable is no longer named NEXT_PUBLIC_MEDUSA_BACKEND_URL.\"\n    )\n  }\n\n  if (\n    !regionMap.keys().next().value ||\n    regionMapUpdated < Date.now() - 3600 * 1000\n  ) {\n    // Fetch regions from Medusa. We can't use the JS client here because middleware is running on Edge and the client needs a Node environment.\n    const { regions } = await fetch(`${BACKEND_URL}/store/regions`, {\n      headers: {\n        \"x-publishable-api-key\": PUBLISHABLE_API_KEY!,\n      },\n      next: {\n        revalidate: 3600,\n        tags: [`regions-${cacheId}`],\n      },\n      cache: \"force-cache\",\n    }).then(async (response) => {\n      const json = await response.json()\n\n      if (!response.ok) {\n        throw new Error(json.message)\n      }\n\n      return json\n    })\n\n    if (!regions?.length) {\n      throw new Error(\n        \"No regions found. Please set up regions in your Medusa Admin.\"\n      )\n    }\n\n    // Create a map of country codes to regions.\n    regions.forEach((region: HttpTypes.StoreRegion) => {\n      region.countries?.forEach((c) => {\n        regionMapCache.regionMap.set(c.iso_2 ?? \"\", region)\n      })\n    })\n\n    regionMapCache.regionMapUpdated = Date.now()\n  }\n\n  return regionMapCache.regionMap\n}\n\n/**\n * Fetches regions from Medusa and sets the region cookie.\n * @param request\n * @param response\n */\nasync function getCountryCode(\n  request: NextRequest,\n  regionMap: Map<string, HttpTypes.StoreRegion | number>\n) {\n  try {\n    let countryCode\n\n    const vercelCountryCode = request.headers\n      .get(\"x-vercel-ip-country\")\n      ?.toLowerCase()\n\n    const urlCountryCode = request.nextUrl.pathname.split(\"/\")[1]?.toLowerCase()\n\n    if (urlCountryCode && regionMap.has(urlCountryCode)) {\n      countryCode = urlCountryCode\n    } else if (vercelCountryCode && regionMap.has(vercelCountryCode)) {\n      countryCode = vercelCountryCode\n    } else if (regionMap.has(DEFAULT_REGION)) {\n      countryCode = DEFAULT_REGION\n    } else if (regionMap.keys().next().value) {\n      countryCode = regionMap.keys().next().value\n    }\n\n    return countryCode\n  } catch (error) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.error(\n        \"Middleware.ts: Error getting the country code. Did you set up regions in your Medusa Admin and define a MEDUSA_BACKEND_URL environment variable? Note that the variable is no longer named NEXT_PUBLIC_MEDUSA_BACKEND_URL.\"\n      )\n    }\n  }\n}\n\n/**\n * Middleware to handle region selection and onboarding status.\n */\nexport async function middleware(request: NextRequest) {\n  let redirectUrl = request.nextUrl.href\n\n  let response = NextResponse.redirect(redirectUrl, 307)\n\n  let cacheIdCookie = request.cookies.get(\"_medusa_cache_id\")\n\n  let cacheId = cacheIdCookie?.value || crypto.randomUUID()\n\n  const regionMap = await getRegionMap(cacheId)\n\n  const countryCode = regionMap && (await getCountryCode(request, regionMap))\n\n  const urlHasCountryCode =\n    countryCode && request.nextUrl.pathname.split(\"/\")[1].includes(countryCode)\n\n  // if one of the country codes is in the url and the cache id is set, return next\n  if (urlHasCountryCode && cacheIdCookie) {\n    return NextResponse.next()\n  }\n\n  // if one of the country codes is in the url and the cache id is not set, set the cache id and redirect\n  if (urlHasCountryCode && !cacheIdCookie) {\n    response.cookies.set(\"_medusa_cache_id\", cacheId, {\n      maxAge: 60 * 60 * 24,\n    })\n\n    return response\n  }\n\n  // check if the url is a static asset\n  if (request.nextUrl.pathname.includes(\".\")) {\n    return NextResponse.next()\n  }\n\n  const redirectPath =\n    request.nextUrl.pathname === \"/\" ? \"\" : request.nextUrl.pathname\n\n  const queryString = request.nextUrl.search ? request.nextUrl.search : \"\"\n\n  // If no country code is set, we redirect to the relevant region.\n  if (!urlHasCountryCode && countryCode) {\n    redirectUrl = `${request.nextUrl.origin}/${countryCode}${redirectPath}${queryString}`\n    response = NextResponse.redirect(`${redirectUrl}`, 307)\n  }\n\n  return response\n}\n\nexport const config = {\n  matcher: [\n    \"/((?!api|_next/static|_next/image|favicon.ico|images|assets|png|svg|jpg|jpeg|gif|webp).*)\",\n  ],\n}\n"],"names":[],"mappings":"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"}}]
}